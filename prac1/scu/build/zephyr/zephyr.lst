
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	00 14 00 20 05 25 00 00 65 66 00 00 d9 24 00 00     ... .%..ef...$..
  10:	d9 24 00 00 d9 24 00 00 d9 24 00 00 00 00 00 00     .$...$...$......
	...
  2c:	ed 21 00 00 d9 24 00 00 00 00 00 00 99 21 00 00     .!...$.......!..
  3c:	d9 24 00 00                                         .$..

00000040 <_irq_vector_table>:
  40:	9d 22 00 00 9d 22 00 00 9d 22 00 00 9d 22 00 00     ."..."..."..."..
  50:	9d 22 00 00 9d 22 00 00 9d 22 00 00 9d 22 00 00     ."..."..."..."..
  60:	9d 22 00 00 9d 22 00 00 9d 22 00 00 9d 22 00 00     ."..."..."..."..
  70:	9d 22 00 00 9d 22 00 00 9d 22 00 00 9d 22 00 00     ."..."..."..."..
  80:	9d 22 00 00 9d 22 00 00 9d 22 00 00 9d 22 00 00     ."..."..."..."..
  90:	9d 22 00 00 9d 22 00 00 9d 22 00 00 9d 22 00 00     ."..."..."..."..
  a0:	9d 22 00 00 9d 22 00 00 9d 22 00 00 9d 22 00 00     ."..."..."..."..
  b0:	9d 22 00 00 9d 22 00 00 9d 22 00 00 9d 22 00 00     ."..."..."..."..
  c0:	9d 22 00 00 9d 22 00 00 9d 22 00 00 9d 22 00 00     ."..."..."..."..
  d0:	9d 22 00 00 9d 22 00 00 9d 22 00 00                 ."..."..."..

Disassembly of section text:

000000e0 <__aeabi_drsub>:
      e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
      e4:	e002      	b.n	ec <__adddf3>
      e6:	bf00      	nop

000000e8 <__aeabi_dsub>:
      e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000000ec <__adddf3>:
      ec:	b530      	push	{r4, r5, lr}
      ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
      f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
      f6:	ea94 0f05 	teq	r4, r5
      fa:	bf08      	it	eq
      fc:	ea90 0f02 	teqeq	r0, r2
     100:	bf1f      	itttt	ne
     102:	ea54 0c00 	orrsne.w	ip, r4, r0
     106:	ea55 0c02 	orrsne.w	ip, r5, r2
     10a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     10e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     112:	f000 80e2 	beq.w	2da <CONFIG_FLASH_SIZE+0xda>
     116:	ea4f 5454 	mov.w	r4, r4, lsr #21
     11a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     11e:	bfb8      	it	lt
     120:	426d      	neglt	r5, r5
     122:	dd0c      	ble.n	13e <CONFIG_KOBJECT_TEXT_AREA+0x3e>
     124:	442c      	add	r4, r5
     126:	ea80 0202 	eor.w	r2, r0, r2
     12a:	ea81 0303 	eor.w	r3, r1, r3
     12e:	ea82 0000 	eor.w	r0, r2, r0
     132:	ea83 0101 	eor.w	r1, r3, r1
     136:	ea80 0202 	eor.w	r2, r0, r2
     13a:	ea81 0303 	eor.w	r3, r1, r3
     13e:	2d36      	cmp	r5, #54	; 0x36
     140:	bf88      	it	hi
     142:	bd30      	pophi	{r4, r5, pc}
     144:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     148:	ea4f 3101 	mov.w	r1, r1, lsl #12
     14c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     150:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     154:	d002      	beq.n	15c <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x12>
     156:	4240      	negs	r0, r0
     158:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     15c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     160:	ea4f 3303 	mov.w	r3, r3, lsl #12
     164:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     168:	d002      	beq.n	170 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x3>
     16a:	4252      	negs	r2, r2
     16c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     170:	ea94 0f05 	teq	r4, r5
     174:	f000 80a7 	beq.w	2c6 <CONFIG_FLASH_SIZE+0xc6>
     178:	f1a4 0401 	sub.w	r4, r4, #1
     17c:	f1d5 0e20 	rsbs	lr, r5, #32
     180:	db0d      	blt.n	19e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x31>
     182:	fa02 fc0e 	lsl.w	ip, r2, lr
     186:	fa22 f205 	lsr.w	r2, r2, r5
     18a:	1880      	adds	r0, r0, r2
     18c:	f141 0100 	adc.w	r1, r1, #0
     190:	fa03 f20e 	lsl.w	r2, r3, lr
     194:	1880      	adds	r0, r0, r2
     196:	fa43 f305 	asr.w	r3, r3, r5
     19a:	4159      	adcs	r1, r3
     19c:	e00e      	b.n	1bc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x4f>
     19e:	f1a5 0520 	sub.w	r5, r5, #32
     1a2:	f10e 0e20 	add.w	lr, lr, #32
     1a6:	2a01      	cmp	r2, #1
     1a8:	fa03 fc0e 	lsl.w	ip, r3, lr
     1ac:	bf28      	it	cs
     1ae:	f04c 0c02 	orrcs.w	ip, ip, #2
     1b2:	fa43 f305 	asr.w	r3, r3, r5
     1b6:	18c0      	adds	r0, r0, r3
     1b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     1bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     1c0:	d507      	bpl.n	1d2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x65>
     1c2:	f04f 0e00 	mov.w	lr, #0
     1c6:	f1dc 0c00 	rsbs	ip, ip, #0
     1ca:	eb7e 0000 	sbcs.w	r0, lr, r0
     1ce:	eb6e 0101 	sbc.w	r1, lr, r1
     1d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     1d6:	d31b      	bcc.n	210 <CONFIG_FLASH_SIZE+0x10>
     1d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     1dc:	d30c      	bcc.n	1f8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x8b>
     1de:	0849      	lsrs	r1, r1, #1
     1e0:	ea5f 0030 	movs.w	r0, r0, rrx
     1e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
     1e8:	f104 0401 	add.w	r4, r4, #1
     1ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
     1f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     1f4:	f080 809a 	bcs.w	32c <CONFIG_FLASH_SIZE+0x12c>
     1f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     1fc:	bf08      	it	eq
     1fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     202:	f150 0000 	adcs.w	r0, r0, #0
     206:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     20a:	ea41 0105 	orr.w	r1, r1, r5
     20e:	bd30      	pop	{r4, r5, pc}
     210:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     214:	4140      	adcs	r0, r0
     216:	eb41 0101 	adc.w	r1, r1, r1
     21a:	3c01      	subs	r4, #1
     21c:	bf28      	it	cs
     21e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     222:	d2e9      	bcs.n	1f8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x8b>
     224:	f091 0f00 	teq	r1, #0
     228:	bf04      	itt	eq
     22a:	4601      	moveq	r1, r0
     22c:	2000      	moveq	r0, #0
     22e:	fab1 f381 	clz	r3, r1
     232:	bf08      	it	eq
     234:	3320      	addeq	r3, #32
     236:	f1a3 030b 	sub.w	r3, r3, #11
     23a:	f1b3 0220 	subs.w	r2, r3, #32
     23e:	da0c      	bge.n	25a <CONFIG_FLASH_SIZE+0x5a>
     240:	320c      	adds	r2, #12
     242:	dd08      	ble.n	256 <CONFIG_FLASH_SIZE+0x56>
     244:	f102 0c14 	add.w	ip, r2, #20
     248:	f1c2 020c 	rsb	r2, r2, #12
     24c:	fa01 f00c 	lsl.w	r0, r1, ip
     250:	fa21 f102 	lsr.w	r1, r1, r2
     254:	e00c      	b.n	270 <CONFIG_FLASH_SIZE+0x70>
     256:	f102 0214 	add.w	r2, r2, #20
     25a:	bfd8      	it	le
     25c:	f1c2 0c20 	rsble	ip, r2, #32
     260:	fa01 f102 	lsl.w	r1, r1, r2
     264:	fa20 fc0c 	lsr.w	ip, r0, ip
     268:	bfdc      	itt	le
     26a:	ea41 010c 	orrle.w	r1, r1, ip
     26e:	4090      	lslle	r0, r2
     270:	1ae4      	subs	r4, r4, r3
     272:	bfa2      	ittt	ge
     274:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     278:	4329      	orrge	r1, r5
     27a:	bd30      	popge	{r4, r5, pc}
     27c:	ea6f 0404 	mvn.w	r4, r4
     280:	3c1f      	subs	r4, #31
     282:	da1c      	bge.n	2be <CONFIG_FLASH_SIZE+0xbe>
     284:	340c      	adds	r4, #12
     286:	dc0e      	bgt.n	2a6 <CONFIG_FLASH_SIZE+0xa6>
     288:	f104 0414 	add.w	r4, r4, #20
     28c:	f1c4 0220 	rsb	r2, r4, #32
     290:	fa20 f004 	lsr.w	r0, r0, r4
     294:	fa01 f302 	lsl.w	r3, r1, r2
     298:	ea40 0003 	orr.w	r0, r0, r3
     29c:	fa21 f304 	lsr.w	r3, r1, r4
     2a0:	ea45 0103 	orr.w	r1, r5, r3
     2a4:	bd30      	pop	{r4, r5, pc}
     2a6:	f1c4 040c 	rsb	r4, r4, #12
     2aa:	f1c4 0220 	rsb	r2, r4, #32
     2ae:	fa20 f002 	lsr.w	r0, r0, r2
     2b2:	fa01 f304 	lsl.w	r3, r1, r4
     2b6:	ea40 0003 	orr.w	r0, r0, r3
     2ba:	4629      	mov	r1, r5
     2bc:	bd30      	pop	{r4, r5, pc}
     2be:	fa21 f004 	lsr.w	r0, r1, r4
     2c2:	4629      	mov	r1, r5
     2c4:	bd30      	pop	{r4, r5, pc}
     2c6:	f094 0f00 	teq	r4, #0
     2ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     2ce:	bf06      	itte	eq
     2d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     2d4:	3401      	addeq	r4, #1
     2d6:	3d01      	subne	r5, #1
     2d8:	e74e      	b.n	178 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xb>
     2da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     2de:	bf18      	it	ne
     2e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     2e4:	d029      	beq.n	33a <CONFIG_FLASH_SIZE+0x13a>
     2e6:	ea94 0f05 	teq	r4, r5
     2ea:	bf08      	it	eq
     2ec:	ea90 0f02 	teqeq	r0, r2
     2f0:	d005      	beq.n	2fe <CONFIG_FLASH_SIZE+0xfe>
     2f2:	ea54 0c00 	orrs.w	ip, r4, r0
     2f6:	bf04      	itt	eq
     2f8:	4619      	moveq	r1, r3
     2fa:	4610      	moveq	r0, r2
     2fc:	bd30      	pop	{r4, r5, pc}
     2fe:	ea91 0f03 	teq	r1, r3
     302:	bf1e      	ittt	ne
     304:	2100      	movne	r1, #0
     306:	2000      	movne	r0, #0
     308:	bd30      	popne	{r4, r5, pc}
     30a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     30e:	d105      	bne.n	31c <CONFIG_FLASH_SIZE+0x11c>
     310:	0040      	lsls	r0, r0, #1
     312:	4149      	adcs	r1, r1
     314:	bf28      	it	cs
     316:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     31a:	bd30      	pop	{r4, r5, pc}
     31c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     320:	bf3c      	itt	cc
     322:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     326:	bd30      	popcc	{r4, r5, pc}
     328:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     32c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     330:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     334:	f04f 0000 	mov.w	r0, #0
     338:	bd30      	pop	{r4, r5, pc}
     33a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     33e:	bf1a      	itte	ne
     340:	4619      	movne	r1, r3
     342:	4610      	movne	r0, r2
     344:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     348:	bf1c      	itt	ne
     34a:	460b      	movne	r3, r1
     34c:	4602      	movne	r2, r0
     34e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     352:	bf06      	itte	eq
     354:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     358:	ea91 0f03 	teqeq	r1, r3
     35c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     360:	bd30      	pop	{r4, r5, pc}
     362:	bf00      	nop

00000364 <__aeabi_ui2d>:
     364:	f090 0f00 	teq	r0, #0
     368:	bf04      	itt	eq
     36a:	2100      	moveq	r1, #0
     36c:	4770      	bxeq	lr
     36e:	b530      	push	{r4, r5, lr}
     370:	f44f 6480 	mov.w	r4, #1024	; 0x400
     374:	f104 0432 	add.w	r4, r4, #50	; 0x32
     378:	f04f 0500 	mov.w	r5, #0
     37c:	f04f 0100 	mov.w	r1, #0
     380:	e750      	b.n	224 <CONFIG_FLASH_SIZE+0x24>
     382:	bf00      	nop

00000384 <__aeabi_i2d>:
     384:	f090 0f00 	teq	r0, #0
     388:	bf04      	itt	eq
     38a:	2100      	moveq	r1, #0
     38c:	4770      	bxeq	lr
     38e:	b530      	push	{r4, r5, lr}
     390:	f44f 6480 	mov.w	r4, #1024	; 0x400
     394:	f104 0432 	add.w	r4, r4, #50	; 0x32
     398:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     39c:	bf48      	it	mi
     39e:	4240      	negmi	r0, r0
     3a0:	f04f 0100 	mov.w	r1, #0
     3a4:	e73e      	b.n	224 <CONFIG_FLASH_SIZE+0x24>
     3a6:	bf00      	nop

000003a8 <__aeabi_f2d>:
     3a8:	0042      	lsls	r2, r0, #1
     3aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
     3ae:	ea4f 0131 	mov.w	r1, r1, rrx
     3b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
     3b6:	bf1f      	itttt	ne
     3b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     3bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     3c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     3c4:	4770      	bxne	lr
     3c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     3ca:	bf08      	it	eq
     3cc:	4770      	bxeq	lr
     3ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     3d2:	bf04      	itt	eq
     3d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     3d8:	4770      	bxeq	lr
     3da:	b530      	push	{r4, r5, lr}
     3dc:	f44f 7460 	mov.w	r4, #896	; 0x380
     3e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     3e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     3e8:	e71c      	b.n	224 <CONFIG_FLASH_SIZE+0x24>
     3ea:	bf00      	nop

000003ec <__aeabi_ul2d>:
     3ec:	ea50 0201 	orrs.w	r2, r0, r1
     3f0:	bf08      	it	eq
     3f2:	4770      	bxeq	lr
     3f4:	b530      	push	{r4, r5, lr}
     3f6:	f04f 0500 	mov.w	r5, #0
     3fa:	e00a      	b.n	412 <CONFIG_MAIN_STACK_SIZE+0x12>

000003fc <__aeabi_l2d>:
     3fc:	ea50 0201 	orrs.w	r2, r0, r1
     400:	bf08      	it	eq
     402:	4770      	bxeq	lr
     404:	b530      	push	{r4, r5, lr}
     406:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     40a:	d502      	bpl.n	412 <CONFIG_MAIN_STACK_SIZE+0x12>
     40c:	4240      	negs	r0, r0
     40e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     412:	f44f 6480 	mov.w	r4, #1024	; 0x400
     416:	f104 0432 	add.w	r4, r4, #50	; 0x32
     41a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     41e:	f43f aed8 	beq.w	1d2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x65>
     422:	f04f 0203 	mov.w	r2, #3
     426:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     42a:	bf18      	it	ne
     42c:	3203      	addne	r2, #3
     42e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     432:	bf18      	it	ne
     434:	3203      	addne	r2, #3
     436:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     43a:	f1c2 0320 	rsb	r3, r2, #32
     43e:	fa00 fc03 	lsl.w	ip, r0, r3
     442:	fa20 f002 	lsr.w	r0, r0, r2
     446:	fa01 fe03 	lsl.w	lr, r1, r3
     44a:	ea40 000e 	orr.w	r0, r0, lr
     44e:	fa21 f102 	lsr.w	r1, r1, r2
     452:	4414      	add	r4, r2
     454:	e6bd      	b.n	1d2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x65>
     456:	bf00      	nop

00000458 <__aeabi_dmul>:
     458:	b570      	push	{r4, r5, r6, lr}
     45a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     45e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     462:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     466:	bf1d      	ittte	ne
     468:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     46c:	ea94 0f0c 	teqne	r4, ip
     470:	ea95 0f0c 	teqne	r5, ip
     474:	f000 f8de 	bleq	634 <__aeabi_dmul+0x1dc>
     478:	442c      	add	r4, r5
     47a:	ea81 0603 	eor.w	r6, r1, r3
     47e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     482:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     486:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     48a:	bf18      	it	ne
     48c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     490:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     494:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     498:	d038      	beq.n	50c <__aeabi_dmul+0xb4>
     49a:	fba0 ce02 	umull	ip, lr, r0, r2
     49e:	f04f 0500 	mov.w	r5, #0
     4a2:	fbe1 e502 	umlal	lr, r5, r1, r2
     4a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     4aa:	fbe0 e503 	umlal	lr, r5, r0, r3
     4ae:	f04f 0600 	mov.w	r6, #0
     4b2:	fbe1 5603 	umlal	r5, r6, r1, r3
     4b6:	f09c 0f00 	teq	ip, #0
     4ba:	bf18      	it	ne
     4bc:	f04e 0e01 	orrne.w	lr, lr, #1
     4c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     4c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     4c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     4cc:	d204      	bcs.n	4d8 <__aeabi_dmul+0x80>
     4ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     4d2:	416d      	adcs	r5, r5
     4d4:	eb46 0606 	adc.w	r6, r6, r6
     4d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     4dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     4e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     4e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     4e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     4ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     4f0:	bf88      	it	hi
     4f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     4f6:	d81e      	bhi.n	536 <__aeabi_dmul+0xde>
     4f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     4fc:	bf08      	it	eq
     4fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     502:	f150 0000 	adcs.w	r0, r0, #0
     506:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     50a:	bd70      	pop	{r4, r5, r6, pc}
     50c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     510:	ea46 0101 	orr.w	r1, r6, r1
     514:	ea40 0002 	orr.w	r0, r0, r2
     518:	ea81 0103 	eor.w	r1, r1, r3
     51c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     520:	bfc2      	ittt	gt
     522:	ebd4 050c 	rsbsgt	r5, r4, ip
     526:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     52a:	bd70      	popgt	{r4, r5, r6, pc}
     52c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     530:	f04f 0e00 	mov.w	lr, #0
     534:	3c01      	subs	r4, #1
     536:	f300 80ab 	bgt.w	690 <__aeabi_dmul+0x238>
     53a:	f114 0f36 	cmn.w	r4, #54	; 0x36
     53e:	bfde      	ittt	le
     540:	2000      	movle	r0, #0
     542:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     546:	bd70      	pople	{r4, r5, r6, pc}
     548:	f1c4 0400 	rsb	r4, r4, #0
     54c:	3c20      	subs	r4, #32
     54e:	da35      	bge.n	5bc <__aeabi_dmul+0x164>
     550:	340c      	adds	r4, #12
     552:	dc1b      	bgt.n	58c <__aeabi_dmul+0x134>
     554:	f104 0414 	add.w	r4, r4, #20
     558:	f1c4 0520 	rsb	r5, r4, #32
     55c:	fa00 f305 	lsl.w	r3, r0, r5
     560:	fa20 f004 	lsr.w	r0, r0, r4
     564:	fa01 f205 	lsl.w	r2, r1, r5
     568:	ea40 0002 	orr.w	r0, r0, r2
     56c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     570:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     574:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     578:	fa21 f604 	lsr.w	r6, r1, r4
     57c:	eb42 0106 	adc.w	r1, r2, r6
     580:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     584:	bf08      	it	eq
     586:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     58a:	bd70      	pop	{r4, r5, r6, pc}
     58c:	f1c4 040c 	rsb	r4, r4, #12
     590:	f1c4 0520 	rsb	r5, r4, #32
     594:	fa00 f304 	lsl.w	r3, r0, r4
     598:	fa20 f005 	lsr.w	r0, r0, r5
     59c:	fa01 f204 	lsl.w	r2, r1, r4
     5a0:	ea40 0002 	orr.w	r0, r0, r2
     5a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     5ac:	f141 0100 	adc.w	r1, r1, #0
     5b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5b4:	bf08      	it	eq
     5b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5ba:	bd70      	pop	{r4, r5, r6, pc}
     5bc:	f1c4 0520 	rsb	r5, r4, #32
     5c0:	fa00 f205 	lsl.w	r2, r0, r5
     5c4:	ea4e 0e02 	orr.w	lr, lr, r2
     5c8:	fa20 f304 	lsr.w	r3, r0, r4
     5cc:	fa01 f205 	lsl.w	r2, r1, r5
     5d0:	ea43 0302 	orr.w	r3, r3, r2
     5d4:	fa21 f004 	lsr.w	r0, r1, r4
     5d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5dc:	fa21 f204 	lsr.w	r2, r1, r4
     5e0:	ea20 0002 	bic.w	r0, r0, r2
     5e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     5e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5ec:	bf08      	it	eq
     5ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5f2:	bd70      	pop	{r4, r5, r6, pc}
     5f4:	f094 0f00 	teq	r4, #0
     5f8:	d10f      	bne.n	61a <__aeabi_dmul+0x1c2>
     5fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     5fe:	0040      	lsls	r0, r0, #1
     600:	eb41 0101 	adc.w	r1, r1, r1
     604:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     608:	bf08      	it	eq
     60a:	3c01      	subeq	r4, #1
     60c:	d0f7      	beq.n	5fe <__aeabi_dmul+0x1a6>
     60e:	ea41 0106 	orr.w	r1, r1, r6
     612:	f095 0f00 	teq	r5, #0
     616:	bf18      	it	ne
     618:	4770      	bxne	lr
     61a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     61e:	0052      	lsls	r2, r2, #1
     620:	eb43 0303 	adc.w	r3, r3, r3
     624:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     628:	bf08      	it	eq
     62a:	3d01      	subeq	r5, #1
     62c:	d0f7      	beq.n	61e <__aeabi_dmul+0x1c6>
     62e:	ea43 0306 	orr.w	r3, r3, r6
     632:	4770      	bx	lr
     634:	ea94 0f0c 	teq	r4, ip
     638:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     63c:	bf18      	it	ne
     63e:	ea95 0f0c 	teqne	r5, ip
     642:	d00c      	beq.n	65e <__aeabi_dmul+0x206>
     644:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     648:	bf18      	it	ne
     64a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     64e:	d1d1      	bne.n	5f4 <__aeabi_dmul+0x19c>
     650:	ea81 0103 	eor.w	r1, r1, r3
     654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     658:	f04f 0000 	mov.w	r0, #0
     65c:	bd70      	pop	{r4, r5, r6, pc}
     65e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     662:	bf06      	itte	eq
     664:	4610      	moveq	r0, r2
     666:	4619      	moveq	r1, r3
     668:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     66c:	d019      	beq.n	6a2 <__aeabi_dmul+0x24a>
     66e:	ea94 0f0c 	teq	r4, ip
     672:	d102      	bne.n	67a <__aeabi_dmul+0x222>
     674:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     678:	d113      	bne.n	6a2 <__aeabi_dmul+0x24a>
     67a:	ea95 0f0c 	teq	r5, ip
     67e:	d105      	bne.n	68c <__aeabi_dmul+0x234>
     680:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     684:	bf1c      	itt	ne
     686:	4610      	movne	r0, r2
     688:	4619      	movne	r1, r3
     68a:	d10a      	bne.n	6a2 <__aeabi_dmul+0x24a>
     68c:	ea81 0103 	eor.w	r1, r1, r3
     690:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     694:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     698:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     69c:	f04f 0000 	mov.w	r0, #0
     6a0:	bd70      	pop	{r4, r5, r6, pc}
     6a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     6aa:	bd70      	pop	{r4, r5, r6, pc}

000006ac <__aeabi_ddiv>:
     6ac:	b570      	push	{r4, r5, r6, lr}
     6ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
     6b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     6b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     6ba:	bf1d      	ittte	ne
     6bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     6c0:	ea94 0f0c 	teqne	r4, ip
     6c4:	ea95 0f0c 	teqne	r5, ip
     6c8:	f000 f8a7 	bleq	81a <CONFIG_ISR_STACK_SIZE+0x1a>
     6cc:	eba4 0405 	sub.w	r4, r4, r5
     6d0:	ea81 0e03 	eor.w	lr, r1, r3
     6d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     6d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
     6dc:	f000 8088 	beq.w	7f0 <__aeabi_ddiv+0x144>
     6e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
     6e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     6e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     6ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     6f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
     6f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     6f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     6fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
     700:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     704:	429d      	cmp	r5, r3
     706:	bf08      	it	eq
     708:	4296      	cmpeq	r6, r2
     70a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     70e:	f504 7440 	add.w	r4, r4, #768	; 0x300
     712:	d202      	bcs.n	71a <__aeabi_ddiv+0x6e>
     714:	085b      	lsrs	r3, r3, #1
     716:	ea4f 0232 	mov.w	r2, r2, rrx
     71a:	1ab6      	subs	r6, r6, r2
     71c:	eb65 0503 	sbc.w	r5, r5, r3
     720:	085b      	lsrs	r3, r3, #1
     722:	ea4f 0232 	mov.w	r2, r2, rrx
     726:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     72a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     72e:	ebb6 0e02 	subs.w	lr, r6, r2
     732:	eb75 0e03 	sbcs.w	lr, r5, r3
     736:	bf22      	ittt	cs
     738:	1ab6      	subcs	r6, r6, r2
     73a:	4675      	movcs	r5, lr
     73c:	ea40 000c 	orrcs.w	r0, r0, ip
     740:	085b      	lsrs	r3, r3, #1
     742:	ea4f 0232 	mov.w	r2, r2, rrx
     746:	ebb6 0e02 	subs.w	lr, r6, r2
     74a:	eb75 0e03 	sbcs.w	lr, r5, r3
     74e:	bf22      	ittt	cs
     750:	1ab6      	subcs	r6, r6, r2
     752:	4675      	movcs	r5, lr
     754:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     758:	085b      	lsrs	r3, r3, #1
     75a:	ea4f 0232 	mov.w	r2, r2, rrx
     75e:	ebb6 0e02 	subs.w	lr, r6, r2
     762:	eb75 0e03 	sbcs.w	lr, r5, r3
     766:	bf22      	ittt	cs
     768:	1ab6      	subcs	r6, r6, r2
     76a:	4675      	movcs	r5, lr
     76c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     770:	085b      	lsrs	r3, r3, #1
     772:	ea4f 0232 	mov.w	r2, r2, rrx
     776:	ebb6 0e02 	subs.w	lr, r6, r2
     77a:	eb75 0e03 	sbcs.w	lr, r5, r3
     77e:	bf22      	ittt	cs
     780:	1ab6      	subcs	r6, r6, r2
     782:	4675      	movcs	r5, lr
     784:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     788:	ea55 0e06 	orrs.w	lr, r5, r6
     78c:	d018      	beq.n	7c0 <__aeabi_ddiv+0x114>
     78e:	ea4f 1505 	mov.w	r5, r5, lsl #4
     792:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     796:	ea4f 1606 	mov.w	r6, r6, lsl #4
     79a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     79e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     7a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     7a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     7aa:	d1c0      	bne.n	72e <__aeabi_ddiv+0x82>
     7ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7b0:	d10b      	bne.n	7ca <__aeabi_ddiv+0x11e>
     7b2:	ea41 0100 	orr.w	r1, r1, r0
     7b6:	f04f 0000 	mov.w	r0, #0
     7ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     7be:	e7b6      	b.n	72e <__aeabi_ddiv+0x82>
     7c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7c4:	bf04      	itt	eq
     7c6:	4301      	orreq	r1, r0
     7c8:	2000      	moveq	r0, #0
     7ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     7ce:	bf88      	it	hi
     7d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     7d4:	f63f aeaf 	bhi.w	536 <__aeabi_dmul+0xde>
     7d8:	ebb5 0c03 	subs.w	ip, r5, r3
     7dc:	bf04      	itt	eq
     7de:	ebb6 0c02 	subseq.w	ip, r6, r2
     7e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     7e6:	f150 0000 	adcs.w	r0, r0, #0
     7ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     7ee:	bd70      	pop	{r4, r5, r6, pc}
     7f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     7f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     7f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     7fc:	bfc2      	ittt	gt
     7fe:	ebd4 050c 	rsbsgt	r5, r4, ip
     802:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     806:	bd70      	popgt	{r4, r5, r6, pc}
     808:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     80c:	f04f 0e00 	mov.w	lr, #0
     810:	3c01      	subs	r4, #1
     812:	e690      	b.n	536 <__aeabi_dmul+0xde>
     814:	ea45 0e06 	orr.w	lr, r5, r6
     818:	e68d      	b.n	536 <__aeabi_dmul+0xde>
     81a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     81e:	ea94 0f0c 	teq	r4, ip
     822:	bf08      	it	eq
     824:	ea95 0f0c 	teqeq	r5, ip
     828:	f43f af3b 	beq.w	6a2 <__aeabi_dmul+0x24a>
     82c:	ea94 0f0c 	teq	r4, ip
     830:	d10a      	bne.n	848 <CONFIG_ISR_STACK_SIZE+0x48>
     832:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     836:	f47f af34 	bne.w	6a2 <__aeabi_dmul+0x24a>
     83a:	ea95 0f0c 	teq	r5, ip
     83e:	f47f af25 	bne.w	68c <__aeabi_dmul+0x234>
     842:	4610      	mov	r0, r2
     844:	4619      	mov	r1, r3
     846:	e72c      	b.n	6a2 <__aeabi_dmul+0x24a>
     848:	ea95 0f0c 	teq	r5, ip
     84c:	d106      	bne.n	85c <CONFIG_ISR_STACK_SIZE+0x5c>
     84e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     852:	f43f aefd 	beq.w	650 <__aeabi_dmul+0x1f8>
     856:	4610      	mov	r0, r2
     858:	4619      	mov	r1, r3
     85a:	e722      	b.n	6a2 <__aeabi_dmul+0x24a>
     85c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     860:	bf18      	it	ne
     862:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     866:	f47f aec5 	bne.w	5f4 <__aeabi_dmul+0x19c>
     86a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     86e:	f47f af0d 	bne.w	68c <__aeabi_dmul+0x234>
     872:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     876:	f47f aeeb 	bne.w	650 <__aeabi_dmul+0x1f8>
     87a:	e712      	b.n	6a2 <__aeabi_dmul+0x24a>

0000087c <__aeabi_ldivmod>:
     87c:	b97b      	cbnz	r3, 89e <__aeabi_ldivmod+0x22>
     87e:	b972      	cbnz	r2, 89e <__aeabi_ldivmod+0x22>
     880:	2900      	cmp	r1, #0
     882:	bfbe      	ittt	lt
     884:	2000      	movlt	r0, #0
     886:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
     88a:	e006      	blt.n	89a <__aeabi_ldivmod+0x1e>
     88c:	bf08      	it	eq
     88e:	2800      	cmpeq	r0, #0
     890:	bf1c      	itt	ne
     892:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
     896:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     89a:	f000 b9bf 	b.w	c1c <__aeabi_idiv0>
     89e:	f1ad 0c08 	sub.w	ip, sp, #8
     8a2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     8a6:	2900      	cmp	r1, #0
     8a8:	db09      	blt.n	8be <__aeabi_ldivmod+0x42>
     8aa:	2b00      	cmp	r3, #0
     8ac:	db1a      	blt.n	8e4 <__aeabi_ldivmod+0x68>
     8ae:	f000 f84d 	bl	94c <__udivmoddi4>
     8b2:	f8dd e004 	ldr.w	lr, [sp, #4]
     8b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     8ba:	b004      	add	sp, #16
     8bc:	4770      	bx	lr
     8be:	4240      	negs	r0, r0
     8c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     8c4:	2b00      	cmp	r3, #0
     8c6:	db1b      	blt.n	900 <__aeabi_ldivmod+0x84>
     8c8:	f000 f840 	bl	94c <__udivmoddi4>
     8cc:	f8dd e004 	ldr.w	lr, [sp, #4]
     8d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     8d4:	b004      	add	sp, #16
     8d6:	4240      	negs	r0, r0
     8d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     8dc:	4252      	negs	r2, r2
     8de:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     8e2:	4770      	bx	lr
     8e4:	4252      	negs	r2, r2
     8e6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     8ea:	f000 f82f 	bl	94c <__udivmoddi4>
     8ee:	f8dd e004 	ldr.w	lr, [sp, #4]
     8f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     8f6:	b004      	add	sp, #16
     8f8:	4240      	negs	r0, r0
     8fa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     8fe:	4770      	bx	lr
     900:	4252      	negs	r2, r2
     902:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     906:	f000 f821 	bl	94c <__udivmoddi4>
     90a:	f8dd e004 	ldr.w	lr, [sp, #4]
     90e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     912:	b004      	add	sp, #16
     914:	4252      	negs	r2, r2
     916:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     91a:	4770      	bx	lr

0000091c <__aeabi_uldivmod>:
     91c:	b953      	cbnz	r3, 934 <__aeabi_uldivmod+0x18>
     91e:	b94a      	cbnz	r2, 934 <__aeabi_uldivmod+0x18>
     920:	2900      	cmp	r1, #0
     922:	bf08      	it	eq
     924:	2800      	cmpeq	r0, #0
     926:	bf1c      	itt	ne
     928:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     92c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     930:	f000 b974 	b.w	c1c <__aeabi_idiv0>
     934:	f1ad 0c08 	sub.w	ip, sp, #8
     938:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     93c:	f000 f806 	bl	94c <__udivmoddi4>
     940:	f8dd e004 	ldr.w	lr, [sp, #4]
     944:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     948:	b004      	add	sp, #16
     94a:	4770      	bx	lr

0000094c <__udivmoddi4>:
     94c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     950:	9e08      	ldr	r6, [sp, #32]
     952:	460d      	mov	r5, r1
     954:	4604      	mov	r4, r0
     956:	4688      	mov	r8, r1
     958:	2b00      	cmp	r3, #0
     95a:	d14d      	bne.n	9f8 <__udivmoddi4+0xac>
     95c:	428a      	cmp	r2, r1
     95e:	4694      	mov	ip, r2
     960:	d968      	bls.n	a34 <__udivmoddi4+0xe8>
     962:	fab2 f282 	clz	r2, r2
     966:	b152      	cbz	r2, 97e <__udivmoddi4+0x32>
     968:	fa01 f302 	lsl.w	r3, r1, r2
     96c:	f1c2 0120 	rsb	r1, r2, #32
     970:	fa20 f101 	lsr.w	r1, r0, r1
     974:	fa0c fc02 	lsl.w	ip, ip, r2
     978:	ea41 0803 	orr.w	r8, r1, r3
     97c:	4094      	lsls	r4, r2
     97e:	ea4f 451c 	mov.w	r5, ip, lsr #16
     982:	0c21      	lsrs	r1, r4, #16
     984:	fbb8 fef5 	udiv	lr, r8, r5
     988:	fa1f f78c 	uxth.w	r7, ip
     98c:	fb05 831e 	mls	r3, r5, lr, r8
     990:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     994:	fb0e f107 	mul.w	r1, lr, r7
     998:	4299      	cmp	r1, r3
     99a:	d90b      	bls.n	9b4 <__udivmoddi4+0x68>
     99c:	eb1c 0303 	adds.w	r3, ip, r3
     9a0:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
     9a4:	f080 811e 	bcs.w	be4 <__udivmoddi4+0x298>
     9a8:	4299      	cmp	r1, r3
     9aa:	f240 811b 	bls.w	be4 <__udivmoddi4+0x298>
     9ae:	f1ae 0e02 	sub.w	lr, lr, #2
     9b2:	4463      	add	r3, ip
     9b4:	1a5b      	subs	r3, r3, r1
     9b6:	b2a4      	uxth	r4, r4
     9b8:	fbb3 f0f5 	udiv	r0, r3, r5
     9bc:	fb05 3310 	mls	r3, r5, r0, r3
     9c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     9c4:	fb00 f707 	mul.w	r7, r0, r7
     9c8:	42a7      	cmp	r7, r4
     9ca:	d90a      	bls.n	9e2 <__udivmoddi4+0x96>
     9cc:	eb1c 0404 	adds.w	r4, ip, r4
     9d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     9d4:	f080 8108 	bcs.w	be8 <__udivmoddi4+0x29c>
     9d8:	42a7      	cmp	r7, r4
     9da:	f240 8105 	bls.w	be8 <__udivmoddi4+0x29c>
     9de:	4464      	add	r4, ip
     9e0:	3802      	subs	r0, #2
     9e2:	1be4      	subs	r4, r4, r7
     9e4:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     9e8:	2100      	movs	r1, #0
     9ea:	b11e      	cbz	r6, 9f4 <__udivmoddi4+0xa8>
     9ec:	40d4      	lsrs	r4, r2
     9ee:	2300      	movs	r3, #0
     9f0:	e9c6 4300 	strd	r4, r3, [r6]
     9f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     9f8:	428b      	cmp	r3, r1
     9fa:	d908      	bls.n	a0e <__udivmoddi4+0xc2>
     9fc:	2e00      	cmp	r6, #0
     9fe:	f000 80ee 	beq.w	bde <__udivmoddi4+0x292>
     a02:	2100      	movs	r1, #0
     a04:	e9c6 0500 	strd	r0, r5, [r6]
     a08:	4608      	mov	r0, r1
     a0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     a0e:	fab3 f183 	clz	r1, r3
     a12:	2900      	cmp	r1, #0
     a14:	d14a      	bne.n	aac <__udivmoddi4+0x160>
     a16:	42ab      	cmp	r3, r5
     a18:	d302      	bcc.n	a20 <__udivmoddi4+0xd4>
     a1a:	4282      	cmp	r2, r0
     a1c:	f200 80f9 	bhi.w	c12 <__udivmoddi4+0x2c6>
     a20:	1a84      	subs	r4, r0, r2
     a22:	eb65 0303 	sbc.w	r3, r5, r3
     a26:	2001      	movs	r0, #1
     a28:	4698      	mov	r8, r3
     a2a:	2e00      	cmp	r6, #0
     a2c:	d0e2      	beq.n	9f4 <__udivmoddi4+0xa8>
     a2e:	e9c6 4800 	strd	r4, r8, [r6]
     a32:	e7df      	b.n	9f4 <__udivmoddi4+0xa8>
     a34:	b902      	cbnz	r2, a38 <__udivmoddi4+0xec>
     a36:	deff      	udf	#255	; 0xff
     a38:	fab2 f282 	clz	r2, r2
     a3c:	2a00      	cmp	r2, #0
     a3e:	f040 8091 	bne.w	b64 <__udivmoddi4+0x218>
     a42:	eba1 050c 	sub.w	r5, r1, ip
     a46:	ea4f 471c 	mov.w	r7, ip, lsr #16
     a4a:	fa1f fe8c 	uxth.w	lr, ip
     a4e:	2101      	movs	r1, #1
     a50:	fbb5 f3f7 	udiv	r3, r5, r7
     a54:	fb07 5013 	mls	r0, r7, r3, r5
     a58:	0c25      	lsrs	r5, r4, #16
     a5a:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
     a5e:	fb0e f003 	mul.w	r0, lr, r3
     a62:	42a8      	cmp	r0, r5
     a64:	d908      	bls.n	a78 <__udivmoddi4+0x12c>
     a66:	eb1c 0505 	adds.w	r5, ip, r5
     a6a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
     a6e:	d202      	bcs.n	a76 <__udivmoddi4+0x12a>
     a70:	42a8      	cmp	r0, r5
     a72:	f200 80cb 	bhi.w	c0c <__udivmoddi4+0x2c0>
     a76:	4643      	mov	r3, r8
     a78:	1a2d      	subs	r5, r5, r0
     a7a:	b2a4      	uxth	r4, r4
     a7c:	fbb5 f0f7 	udiv	r0, r5, r7
     a80:	fb07 5510 	mls	r5, r7, r0, r5
     a84:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     a88:	fb0e fe00 	mul.w	lr, lr, r0
     a8c:	45a6      	cmp	lr, r4
     a8e:	d908      	bls.n	aa2 <__udivmoddi4+0x156>
     a90:	eb1c 0404 	adds.w	r4, ip, r4
     a94:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
     a98:	d202      	bcs.n	aa0 <__udivmoddi4+0x154>
     a9a:	45a6      	cmp	lr, r4
     a9c:	f200 80bb 	bhi.w	c16 <__udivmoddi4+0x2ca>
     aa0:	4628      	mov	r0, r5
     aa2:	eba4 040e 	sub.w	r4, r4, lr
     aa6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
     aaa:	e79e      	b.n	9ea <__udivmoddi4+0x9e>
     aac:	f1c1 0720 	rsb	r7, r1, #32
     ab0:	408b      	lsls	r3, r1
     ab2:	fa22 fc07 	lsr.w	ip, r2, r7
     ab6:	ea4c 0c03 	orr.w	ip, ip, r3
     aba:	fa20 f407 	lsr.w	r4, r0, r7
     abe:	fa05 f301 	lsl.w	r3, r5, r1
     ac2:	431c      	orrs	r4, r3
     ac4:	40fd      	lsrs	r5, r7
     ac6:	ea4f 491c 	mov.w	r9, ip, lsr #16
     aca:	fa00 f301 	lsl.w	r3, r0, r1
     ace:	fbb5 f8f9 	udiv	r8, r5, r9
     ad2:	0c20      	lsrs	r0, r4, #16
     ad4:	fa1f fe8c 	uxth.w	lr, ip
     ad8:	fb09 5518 	mls	r5, r9, r8, r5
     adc:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
     ae0:	fb08 f00e 	mul.w	r0, r8, lr
     ae4:	42a8      	cmp	r0, r5
     ae6:	fa02 f201 	lsl.w	r2, r2, r1
     aea:	d90b      	bls.n	b04 <__udivmoddi4+0x1b8>
     aec:	eb1c 0505 	adds.w	r5, ip, r5
     af0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
     af4:	f080 8088 	bcs.w	c08 <__udivmoddi4+0x2bc>
     af8:	42a8      	cmp	r0, r5
     afa:	f240 8085 	bls.w	c08 <__udivmoddi4+0x2bc>
     afe:	f1a8 0802 	sub.w	r8, r8, #2
     b02:	4465      	add	r5, ip
     b04:	1a2d      	subs	r5, r5, r0
     b06:	b2a4      	uxth	r4, r4
     b08:	fbb5 f0f9 	udiv	r0, r5, r9
     b0c:	fb09 5510 	mls	r5, r9, r0, r5
     b10:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
     b14:	fb00 fe0e 	mul.w	lr, r0, lr
     b18:	45ae      	cmp	lr, r5
     b1a:	d908      	bls.n	b2e <__udivmoddi4+0x1e2>
     b1c:	eb1c 0505 	adds.w	r5, ip, r5
     b20:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
     b24:	d26c      	bcs.n	c00 <__udivmoddi4+0x2b4>
     b26:	45ae      	cmp	lr, r5
     b28:	d96a      	bls.n	c00 <__udivmoddi4+0x2b4>
     b2a:	3802      	subs	r0, #2
     b2c:	4465      	add	r5, ip
     b2e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     b32:	fba0 9402 	umull	r9, r4, r0, r2
     b36:	eba5 050e 	sub.w	r5, r5, lr
     b3a:	42a5      	cmp	r5, r4
     b3c:	46c8      	mov	r8, r9
     b3e:	46a6      	mov	lr, r4
     b40:	d356      	bcc.n	bf0 <__udivmoddi4+0x2a4>
     b42:	d053      	beq.n	bec <__udivmoddi4+0x2a0>
     b44:	b15e      	cbz	r6, b5e <__udivmoddi4+0x212>
     b46:	ebb3 0208 	subs.w	r2, r3, r8
     b4a:	eb65 050e 	sbc.w	r5, r5, lr
     b4e:	fa05 f707 	lsl.w	r7, r5, r7
     b52:	fa22 f301 	lsr.w	r3, r2, r1
     b56:	40cd      	lsrs	r5, r1
     b58:	431f      	orrs	r7, r3
     b5a:	e9c6 7500 	strd	r7, r5, [r6]
     b5e:	2100      	movs	r1, #0
     b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     b64:	f1c2 0320 	rsb	r3, r2, #32
     b68:	fa20 f103 	lsr.w	r1, r0, r3
     b6c:	fa0c fc02 	lsl.w	ip, ip, r2
     b70:	fa25 f303 	lsr.w	r3, r5, r3
     b74:	4095      	lsls	r5, r2
     b76:	430d      	orrs	r5, r1
     b78:	ea4f 471c 	mov.w	r7, ip, lsr #16
     b7c:	fa1f fe8c 	uxth.w	lr, ip
     b80:	fbb3 f1f7 	udiv	r1, r3, r7
     b84:	fb07 3011 	mls	r0, r7, r1, r3
     b88:	0c2b      	lsrs	r3, r5, #16
     b8a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     b8e:	fb01 f00e 	mul.w	r0, r1, lr
     b92:	4298      	cmp	r0, r3
     b94:	fa04 f402 	lsl.w	r4, r4, r2
     b98:	d908      	bls.n	bac <__udivmoddi4+0x260>
     b9a:	eb1c 0303 	adds.w	r3, ip, r3
     b9e:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
     ba2:	d22f      	bcs.n	c04 <__udivmoddi4+0x2b8>
     ba4:	4298      	cmp	r0, r3
     ba6:	d92d      	bls.n	c04 <__udivmoddi4+0x2b8>
     ba8:	3902      	subs	r1, #2
     baa:	4463      	add	r3, ip
     bac:	1a1b      	subs	r3, r3, r0
     bae:	b2ad      	uxth	r5, r5
     bb0:	fbb3 f0f7 	udiv	r0, r3, r7
     bb4:	fb07 3310 	mls	r3, r7, r0, r3
     bb8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     bbc:	fb00 f30e 	mul.w	r3, r0, lr
     bc0:	42ab      	cmp	r3, r5
     bc2:	d908      	bls.n	bd6 <__udivmoddi4+0x28a>
     bc4:	eb1c 0505 	adds.w	r5, ip, r5
     bc8:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
     bcc:	d216      	bcs.n	bfc <__udivmoddi4+0x2b0>
     bce:	42ab      	cmp	r3, r5
     bd0:	d914      	bls.n	bfc <__udivmoddi4+0x2b0>
     bd2:	3802      	subs	r0, #2
     bd4:	4465      	add	r5, ip
     bd6:	1aed      	subs	r5, r5, r3
     bd8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     bdc:	e738      	b.n	a50 <__udivmoddi4+0x104>
     bde:	4631      	mov	r1, r6
     be0:	4630      	mov	r0, r6
     be2:	e707      	b.n	9f4 <__udivmoddi4+0xa8>
     be4:	4686      	mov	lr, r0
     be6:	e6e5      	b.n	9b4 <__udivmoddi4+0x68>
     be8:	4618      	mov	r0, r3
     bea:	e6fa      	b.n	9e2 <__udivmoddi4+0x96>
     bec:	454b      	cmp	r3, r9
     bee:	d2a9      	bcs.n	b44 <__udivmoddi4+0x1f8>
     bf0:	ebb9 0802 	subs.w	r8, r9, r2
     bf4:	eb64 0e0c 	sbc.w	lr, r4, ip
     bf8:	3801      	subs	r0, #1
     bfa:	e7a3      	b.n	b44 <__udivmoddi4+0x1f8>
     bfc:	4640      	mov	r0, r8
     bfe:	e7ea      	b.n	bd6 <__udivmoddi4+0x28a>
     c00:	4620      	mov	r0, r4
     c02:	e794      	b.n	b2e <__udivmoddi4+0x1e2>
     c04:	4641      	mov	r1, r8
     c06:	e7d1      	b.n	bac <__udivmoddi4+0x260>
     c08:	46d0      	mov	r8, sl
     c0a:	e77b      	b.n	b04 <__udivmoddi4+0x1b8>
     c0c:	3b02      	subs	r3, #2
     c0e:	4465      	add	r5, ip
     c10:	e732      	b.n	a78 <__udivmoddi4+0x12c>
     c12:	4608      	mov	r0, r1
     c14:	e709      	b.n	a2a <__udivmoddi4+0xde>
     c16:	4464      	add	r4, ip
     c18:	3802      	subs	r0, #2
     c1a:	e742      	b.n	aa2 <__udivmoddi4+0x156>

00000c1c <__aeabi_idiv0>:
     c1c:	4770      	bx	lr
     c1e:	bf00      	nop

00000c20 <process_sample_temp_hum>:
#include <sys/util.h>

#include "temp_humidity_sensor.h"

extern void process_sample_temp_hum(const struct device *dev)
{
     c20:	b530      	push	{r4, r5, lr}
     c22:	4604      	mov	r4, r0
     c24:	b085      	sub	sp, #20
static inline int z_impl_sensor_sample_fetch(const struct device *dev)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->sample_fetch(dev, SENSOR_CHAN_ALL);
     c26:	6883      	ldr	r3, [r0, #8]
     c28:	2139      	movs	r1, #57	; 0x39
     c2a:	68db      	ldr	r3, [r3, #12]
     c2c:	4798      	blx	r3
	static unsigned int obs;
	struct sensor_value temp, hum;
	if (sensor_sample_fetch(dev) < 0) {
     c2e:	2800      	cmp	r0, #0
     c30:	da05      	bge.n	c3e <process_sample_temp_hum+0x1e>
		printf("Sensor sample update error\n");
     c32:	482d      	ldr	r0, [pc, #180]	; (ce8 <process_sample_temp_hum+0xc8>)
	printf("Temperature:%.1f C\n", sensor_value_to_double(&temp));

	/* display humidity */
	printf("Relative Humidity:%.1f%%\n",
	       sensor_value_to_double(&hum));
}
     c34:	b005      	add	sp, #20
     c36:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		printf("Sensor sample update error\n");
     c3a:	f001 bd65 	b.w	2708 <printf>
					    struct sensor_value *val)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->channel_get(dev, chan, val);
     c3e:	68a3      	ldr	r3, [r4, #8]
     c40:	466a      	mov	r2, sp
     c42:	691b      	ldr	r3, [r3, #16]
     c44:	210d      	movs	r1, #13
     c46:	4620      	mov	r0, r4
     c48:	4798      	blx	r3
	if (sensor_channel_get(dev, SENSOR_CHAN_AMBIENT_TEMP, &temp) < 0) {
     c4a:	2800      	cmp	r0, #0
     c4c:	da04      	bge.n	c58 <process_sample_temp_hum+0x38>
		printf("Cannot read HTS221 temperature channel\n");
     c4e:	4827      	ldr	r0, [pc, #156]	; (cec <process_sample_temp_hum+0xcc>)
		printf("Cannot read HTS221 humidity channel\n");
     c50:	f001 fd5a 	bl	2708 <printf>
}
     c54:	b005      	add	sp, #20
     c56:	bd30      	pop	{r4, r5, pc}
     c58:	68a3      	ldr	r3, [r4, #8]
     c5a:	aa02      	add	r2, sp, #8
     c5c:	691b      	ldr	r3, [r3, #16]
     c5e:	2110      	movs	r1, #16
     c60:	4620      	mov	r0, r4
     c62:	4798      	blx	r3
	if (sensor_channel_get(dev, SENSOR_CHAN_HUMIDITY, &hum) < 0) {
     c64:	2800      	cmp	r0, #0
     c66:	da01      	bge.n	c6c <process_sample_temp_hum+0x4c>
		printf("Cannot read HTS221 humidity channel\n");
     c68:	4821      	ldr	r0, [pc, #132]	; (cf0 <process_sample_temp_hum+0xd0>)
     c6a:	e7f1      	b.n	c50 <process_sample_temp_hum+0x30>
	++obs;
     c6c:	4b21      	ldr	r3, [pc, #132]	; (cf4 <process_sample_temp_hum+0xd4>)
	printf("Observation:%u\n", obs);
     c6e:	4822      	ldr	r0, [pc, #136]	; (cf8 <process_sample_temp_hum+0xd8>)
	++obs;
     c70:	6819      	ldr	r1, [r3, #0]
     c72:	3101      	adds	r1, #1
     c74:	6019      	str	r1, [r3, #0]
	printf("Observation:%u\n", obs);
     c76:	f001 fd47 	bl	2708 <printf>
 * @param val A pointer to a sensor_value struct.
 * @return The converted value.
 */
static inline double sensor_value_to_double(const struct sensor_value *val)
{
	return (double)val->val1 + (double)val->val2 / 1000000;
     c7a:	9801      	ldr	r0, [sp, #4]
     c7c:	f7ff fb82 	bl	384 <__aeabi_i2d>
     c80:	a317      	add	r3, pc, #92	; (adr r3, ce0 <process_sample_temp_hum+0xc0>)
     c82:	e9d3 2300 	ldrd	r2, r3, [r3]
     c86:	f7ff fd11 	bl	6ac <__aeabi_ddiv>
     c8a:	4604      	mov	r4, r0
     c8c:	9800      	ldr	r0, [sp, #0]
     c8e:	460d      	mov	r5, r1
     c90:	f7ff fb78 	bl	384 <__aeabi_i2d>
     c94:	4602      	mov	r2, r0
     c96:	460b      	mov	r3, r1
     c98:	4620      	mov	r0, r4
     c9a:	4629      	mov	r1, r5
     c9c:	f7ff fa26 	bl	ec <__adddf3>
     ca0:	4602      	mov	r2, r0
     ca2:	460b      	mov	r3, r1
	printf("Temperature:%.1f C\n", sensor_value_to_double(&temp));
     ca4:	4815      	ldr	r0, [pc, #84]	; (cfc <process_sample_temp_hum+0xdc>)
     ca6:	f001 fd2f 	bl	2708 <printf>
     caa:	9803      	ldr	r0, [sp, #12]
     cac:	f7ff fb6a 	bl	384 <__aeabi_i2d>
     cb0:	a30b      	add	r3, pc, #44	; (adr r3, ce0 <process_sample_temp_hum+0xc0>)
     cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
     cb6:	f7ff fcf9 	bl	6ac <__aeabi_ddiv>
     cba:	4604      	mov	r4, r0
     cbc:	9802      	ldr	r0, [sp, #8]
     cbe:	460d      	mov	r5, r1
     cc0:	f7ff fb60 	bl	384 <__aeabi_i2d>
     cc4:	4602      	mov	r2, r0
     cc6:	460b      	mov	r3, r1
     cc8:	4620      	mov	r0, r4
     cca:	4629      	mov	r1, r5
     ccc:	f7ff fa0e 	bl	ec <__adddf3>
     cd0:	4602      	mov	r2, r0
     cd2:	460b      	mov	r3, r1
	printf("Relative Humidity:%.1f%%\n",
     cd4:	480a      	ldr	r0, [pc, #40]	; (d00 <process_sample_temp_hum+0xe0>)
     cd6:	f001 fd17 	bl	2708 <printf>
     cda:	e7bb      	b.n	c54 <process_sample_temp_hum+0x34>
     cdc:	f3af 8000 	nop.w
     ce0:	00000000 	.word	0x00000000
     ce4:	412e8480 	.word	0x412e8480
     ce8:	000080d0 	.word	0x000080d0
     cec:	000080ec 	.word	0x000080ec
     cf0:	00008114 	.word	0x00008114
     cf4:	2000051c 	.word	0x2000051c
     cf8:	00008139 	.word	0x00008139
     cfc:	00008149 	.word	0x00008149
     d00:	0000815d 	.word	0x0000815d
     d04:	00000000 	.word	0x00000000

00000d08 <lis2dh_attr_set>:

static int lis2dh_attr_set(const struct device *dev, enum sensor_channel chan,
			   enum sensor_attribute attr,
			   const struct sensor_value *val)
{
	switch (chan) {
     d08:	2903      	cmp	r1, #3
{
     d0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
     d0c:	4614      	mov	r4, r2
     d0e:	4605      	mov	r5, r0
     d10:	461a      	mov	r2, r3
	switch (chan) {
     d12:	d85d      	bhi.n	dd0 <lis2dh_attr_set+0xc8>
	switch (attr) {
     d14:	2c00      	cmp	r4, #0
     d16:	d03c      	beq.n	d92 <lis2dh_attr_set+0x8a>
     d18:	2c07      	cmp	r4, #7
     d1a:	d159      	bne.n	dd0 <lis2dh_attr_set+0xc8>
	int64_t micro_ms2 = ms2->val1 * 1000000LL + ms2->val2;
     d1c:	685b      	ldr	r3, [r3, #4]
     d1e:	6810      	ldr	r0, [r2, #0]
     d20:	4a37      	ldr	r2, [pc, #220]	; (e00 <lis2dh_attr_set+0xf8>)
     d22:	17d9      	asrs	r1, r3, #31
     d24:	fbc0 3102 	smlal	r3, r1, r0, r2
	if (micro_ms2 > 0) {
     d28:	2b01      	cmp	r3, #1
     d2a:	f171 0200 	sbcs.w	r2, r1, #0
     d2e:	db22      	blt.n	d76 <lis2dh_attr_set+0x6e>
		return (micro_ms2 + SENSOR_G / 2) / SENSOR_G;
     d30:	4834      	ldr	r0, [pc, #208]	; (e04 <lis2dh_attr_set+0xfc>)
     d32:	1818      	adds	r0, r3, r0
     d34:	a330      	add	r3, pc, #192	; (adr r3, df8 <lis2dh_attr_set+0xf0>)
     d36:	e9d3 2300 	ldrd	r2, r3, [r3]
     d3a:	f141 0100 	adc.w	r1, r1, #0
		return (micro_ms2 - SENSOR_G / 2) / SENSOR_G;
     d3e:	f7ff fd9d 	bl	87c <__aeabi_ldivmod>
		if (range == LIS2DH_RANGE_IDX_TO_VALUE(i)) {
     d42:	b280      	uxth	r0, r0
     d44:	2802      	cmp	r0, #2
     d46:	d01e      	beq.n	d86 <lis2dh_attr_set+0x7e>
     d48:	2804      	cmp	r0, #4
     d4a:	d01e      	beq.n	d8a <lis2dh_attr_set+0x82>
     d4c:	2808      	cmp	r0, #8
     d4e:	d01e      	beq.n	d8e <lis2dh_attr_set+0x86>
     d50:	2810      	cmp	r0, #16
     d52:	d133      	bne.n	dbc <lis2dh_attr_set+0xb4>
     d54:	2303      	movs	r3, #3
	lis2dh->scale = lis2dh_reg_val_to_scale[fs];
     d56:	492c      	ldr	r1, [pc, #176]	; (e08 <lis2dh_attr_set+0x100>)
	struct lis2dh_data *lis2dh = dev->data;
     d58:	692a      	ldr	r2, [r5, #16]
	lis2dh->scale = lis2dh_reg_val_to_scale[fs];
     d5a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
     d5e:	6111      	str	r1, [r2, #16]
	return lis2dh->hw_tf->update_reg(dev, LIS2DH_REG_CTRL4,
     d60:	6852      	ldr	r2, [r2, #4]
     d62:	6914      	ldr	r4, [r2, #16]
     d64:	011b      	lsls	r3, r3, #4
     d66:	2230      	movs	r2, #48	; 0x30
     d68:	2123      	movs	r1, #35	; 0x23
     d6a:	4628      	mov	r0, r5
     d6c:	46a4      	mov	ip, r4
		LOG_WRN("attr_set() not supported on this channel.");
		return -ENOTSUP;
	}

	return 0;
}
     d6e:	b002      	add	sp, #8
     d70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return lis2dh->hw_tf->update_reg(dev, LIS2DH_REG_CTRL4,
     d74:	4760      	bx	ip
     d76:	4825      	ldr	r0, [pc, #148]	; (e0c <lis2dh_attr_set+0x104>)
     d78:	1818      	adds	r0, r3, r0
     d7a:	f161 0100 	sbc.w	r1, r1, #0
     d7e:	a31e      	add	r3, pc, #120	; (adr r3, df8 <lis2dh_attr_set+0xf0>)
     d80:	e9d3 2300 	ldrd	r2, r3, [r3]
     d84:	e7db      	b.n	d3e <lis2dh_attr_set+0x36>
	for (i = 0; i < LIS2DH_NUM_RANGES; i++) {
     d86:	2300      	movs	r3, #0
     d88:	e7e5      	b.n	d56 <lis2dh_attr_set+0x4e>
		if (range == LIS2DH_RANGE_IDX_TO_VALUE(i)) {
     d8a:	2301      	movs	r3, #1
     d8c:	e7e3      	b.n	d56 <lis2dh_attr_set+0x4e>
     d8e:	2302      	movs	r3, #2
     d90:	e7e1      	b.n	d56 <lis2dh_attr_set+0x4e>
		return lis2dh_acc_odr_set(dev, val->val1);
     d92:	881a      	ldrh	r2, [r3, #0]
	for (i = 0; i < ARRAY_SIZE(lis2dh_odr_map); i++) {
     d94:	4b1e      	ldr	r3, [pc, #120]	; (e10 <lis2dh_attr_set+0x108>)
		if (freq == lis2dh_odr_map[i]) {
     d96:	f833 1b02 	ldrh.w	r1, [r3], #2
     d9a:	428a      	cmp	r2, r1
     d9c:	d10b      	bne.n	db6 <lis2dh_attr_set+0xae>
	struct lis2dh_data *data = dev->data;
     d9e:	692e      	ldr	r6, [r5, #16]
	status = data->hw_tf->read_reg(dev, LIS2DH_REG_CTRL1, &value);
     da0:	6873      	ldr	r3, [r6, #4]
     da2:	f10d 0207 	add.w	r2, sp, #7
     da6:	689b      	ldr	r3, [r3, #8]
     da8:	2120      	movs	r1, #32
     daa:	4628      	mov	r0, r5
     dac:	4798      	blx	r3
	if (status < 0) {
     dae:	2800      	cmp	r0, #0
     db0:	da07      	bge.n	dc2 <lis2dh_attr_set+0xba>
}
     db2:	b002      	add	sp, #8
     db4:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < ARRAY_SIZE(lis2dh_odr_map); i++) {
     db6:	3401      	adds	r4, #1
     db8:	2c0b      	cmp	r4, #11
     dba:	d1ec      	bne.n	d96 <lis2dh_attr_set+0x8e>
	return -EINVAL;
     dbc:	f06f 0015 	mvn.w	r0, #21
     dc0:	e7f7      	b.n	db2 <lis2dh_attr_set+0xaa>
	if ((value & LIS2DH_LP_EN_BIT_MASK) == 0U && odr == LIS2DH_ODR_8) {
     dc2:	f89d 2007 	ldrb.w	r2, [sp, #7]
     dc6:	0711      	lsls	r1, r2, #28
			return i;
     dc8:	4623      	mov	r3, r4
	if ((value & LIS2DH_LP_EN_BIT_MASK) == 0U && odr == LIS2DH_ODR_8) {
     dca:	d404      	bmi.n	dd6 <lis2dh_attr_set+0xce>
     dcc:	2c08      	cmp	r4, #8
     dce:	d105      	bne.n	ddc <lis2dh_attr_set+0xd4>
	switch (attr) {
     dd0:	f06f 0085 	mvn.w	r0, #133	; 0x85
     dd4:	e7ed      	b.n	db2 <lis2dh_attr_set+0xaa>
		odr--;
     dd6:	2c0a      	cmp	r4, #10
     dd8:	bf08      	it	eq
     dda:	2309      	moveq	r3, #9
				      (value & ~LIS2DH_ODR_MASK) |
     ddc:	f002 020f 	and.w	r2, r2, #15
	return data->hw_tf->write_reg(dev, LIS2DH_REG_CTRL1,
     de0:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
     de4:	6873      	ldr	r3, [r6, #4]
     de6:	b2d2      	uxtb	r2, r2
     de8:	68db      	ldr	r3, [r3, #12]
     dea:	2120      	movs	r1, #32
     dec:	4628      	mov	r0, r5
     dee:	4798      	blx	r3
     df0:	e7df      	b.n	db2 <lis2dh_attr_set+0xaa>
     df2:	bf00      	nop
     df4:	f3af 8000 	nop.w
     df8:	0095a33a 	.word	0x0095a33a
     dfc:	00000000 	.word	0x00000000
     e00:	000f4240 	.word	0x000f4240
     e04:	004ad19d 	.word	0x004ad19d
     e08:	200000b0 	.word	0x200000b0
     e0c:	ffb52e63 	.word	0xffb52e63
     e10:	000080b0 	.word	0x000080b0

00000e14 <thread_get_temp>:

void init_mutex() {
	k_mutex_init(&sensor_mutex);
}

void thread_get_temp(void *a, void *b, void *c) {
     e14:	b510      	push	{r4, lr}
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&mutex, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
     e16:	480d      	ldr	r0, [pc, #52]	; (e4c <thread_get_temp+0x38>)
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
     e18:	4c0c      	ldr	r4, [pc, #48]	; (e4c <thread_get_temp+0x38>)
	return z_impl_k_mutex_lock(mutex, timeout);
     e1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     e1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     e22:	f004 fadb 	bl	53dc <z_impl_k_mutex_lock>
	return z_impl_k_mutex_unlock(mutex);
     e26:	4620      	mov	r0, r4
     e28:	f004 fb50 	bl	54cc <z_impl_k_mutex_unlock>

	k_mutex_lock(&sensor_mutex, K_FOREVER);

	while(1) {
		k_mutex_unlock(&sensor_mutex);
		get_temp_humidity_sen();
     e2c:	f000 f810 	bl	e50 <get_temp_humidity_sen>
	return z_impl_k_sleep(timeout);
     e30:	2100      	movs	r1, #0
     e32:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     e36:	f004 fff7 	bl	5e28 <z_impl_k_sleep>
	return z_impl_k_mutex_lock(mutex, timeout);
     e3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     e3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     e42:	4620      	mov	r0, r4
     e44:	f004 faca 	bl	53dc <z_impl_k_mutex_lock>
	while(1) {
     e48:	e7ed      	b.n	e26 <thread_get_temp+0x12>
     e4a:	bf00      	nop
     e4c:	20000508 	.word	0x20000508

00000e50 <get_temp_humidity_sen>:
			   const struct sensor_trigger *trig)
{
	process_sample_temp_hum(dev);
}

void get_temp_humidity_sen(void) {
     e50:	b510      	push	{r4, lr}
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     e52:	4809      	ldr	r0, [pc, #36]	; (e78 <get_temp_humidity_sen+0x28>)
     e54:	f004 f8fe 	bl	5054 <z_impl_device_get_binding>
	const struct device *dev = device_get_binding("HTS221");

	if (dev == NULL) {
     e58:	4604      	mov	r4, r0
     e5a:	b920      	cbnz	r0, e66 <get_temp_humidity_sen+0x16>
	while (!IS_ENABLED(CONFIG_HTS221_TRIGGER)) {
		process_sample_temp_hum(dev);
		k_sleep(K_MSEC(2000));
	}
	k_sleep(K_FOREVER);
     e5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printf("Could not get HTS221 device\n");
     e60:	4806      	ldr	r0, [pc, #24]	; (e7c <get_temp_humidity_sen+0x2c>)
     e62:	f001 bc51 	b.w	2708 <printf>
		process_sample_temp_hum(dev);
     e66:	4620      	mov	r0, r4
     e68:	f7ff feda 	bl	c20 <process_sample_temp_hum>
	return z_impl_k_sleep(timeout);
     e6c:	2100      	movs	r1, #0
     e6e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
     e72:	f004 ffd9 	bl	5e28 <z_impl_k_sleep>
	while (!IS_ENABLED(CONFIG_HTS221_TRIGGER)) {
     e76:	e7f6      	b.n	e66 <get_temp_humidity_sen+0x16>
     e78:	00008177 	.word	0x00008177
     e7c:	0000817e 	.word	0x0000817e

00000e80 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     e80:	680b      	ldr	r3, [r1, #0]
     e82:	3301      	adds	r3, #1
     e84:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     e86:	4b01      	ldr	r3, [pc, #4]	; (e8c <char_out+0xc>)
     e88:	681b      	ldr	r3, [r3, #0]
     e8a:	4718      	bx	r3
     e8c:	20000000 	.word	0x20000000

00000e90 <__printk_hook_install>:
	_char_out = fn;
     e90:	4b01      	ldr	r3, [pc, #4]	; (e98 <__printk_hook_install+0x8>)
     e92:	6018      	str	r0, [r3, #0]
}
     e94:	4770      	bx	lr
     e96:	bf00      	nop
     e98:	20000000 	.word	0x20000000

00000e9c <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
     e9c:	b507      	push	{r0, r1, r2, lr}
     e9e:	460b      	mov	r3, r1

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
     ea0:	2100      	movs	r1, #0
{
     ea2:	4602      	mov	r2, r0
		struct out_context ctx = { 0 };
     ea4:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
     ea6:	4803      	ldr	r0, [pc, #12]	; (eb4 <vprintk+0x18>)
     ea8:	a901      	add	r1, sp, #4
     eaa:	f000 f8e5 	bl	1078 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
     eae:	b003      	add	sp, #12
     eb0:	f85d fb04 	ldr.w	pc, [sp], #4
     eb4:	00000e81 	.word	0x00000e81

00000eb8 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     eb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     ebc:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     ec0:	f019 0808 	ands.w	r8, r9, #8
{
     ec4:	4604      	mov	r4, r0
     ec6:	4693      	mov	fp, r2
	if (processing) {
     ec8:	d00d      	beq.n	ee6 <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
     eca:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     ecc:	bf0c      	ite	eq
     ece:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     ed2:	f049 0920 	orrne.w	r9, r9, #32
     ed6:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     eda:	f38b 8811 	msr	BASEPRI, fp
     ede:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     ee2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     ee6:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
     eea:	2902      	cmp	r1, #2
     eec:	d107      	bne.n	efe <process_event+0x46>
			evt = process_recheck(mgr);
     eee:	4620      	mov	r0, r4
     ef0:	f005 f9c6 	bl	6280 <process_recheck>
		if (evt == EVT_NOP) {
     ef4:	2800      	cmp	r0, #0
     ef6:	d0f0      	beq.n	eda <process_event+0x22>
		if (evt == EVT_COMPLETE) {
     ef8:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     efa:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
     efc:	d14e      	bne.n	f9c <process_event+0xe4>
			res = mgr->last_res;
     efe:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     f00:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
     f02:	2f00      	cmp	r7, #0
     f04:	da15      	bge.n	f32 <process_event+0x7a>
		*clients = mgr->clients;
     f06:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     f08:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
     f0c:	e9c4 8800 	strd	r8, r8, [r4]
     f10:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
     f14:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
     f16:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     f18:	8b21      	ldrh	r1, [r4, #24]
     f1a:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     f1e:	45ca      	cmp	sl, r9
     f20:	d002      	beq.n	f28 <process_event+0x70>
		if (do_monitors
     f22:	68a3      	ldr	r3, [r4, #8]
     f24:	2b00      	cmp	r3, #0
     f26:	d15a      	bne.n	fde <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
     f28:	b90d      	cbnz	r5, f2e <process_event+0x76>
		    || (transit != NULL)) {
     f2a:	2e00      	cmp	r6, #0
     f2c:	d071      	beq.n	1012 <process_event+0x15a>
     f2e:	2300      	movs	r3, #0
     f30:	e056      	b.n	fe0 <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     f32:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     f36:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     f38:	2a01      	cmp	r2, #1
     f3a:	d81e      	bhi.n	f7a <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     f3c:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
     f40:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
     f42:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     f44:	b289      	uxth	r1, r1
     f46:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     f4a:	d10a      	bne.n	f62 <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     f4c:	b13d      	cbz	r5, f5e <process_event+0xa6>
     f4e:	8b63      	ldrh	r3, [r4, #26]
     f50:	462a      	mov	r2, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
     f52:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
     f54:	3301      	adds	r3, #1
     f56:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     f58:	2a00      	cmp	r2, #0
     f5a:	d1fa      	bne.n	f52 <process_event+0x9a>
     f5c:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     f5e:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
     f62:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     f64:	4620      	mov	r0, r4
     f66:	f005 f98b 	bl	6280 <process_recheck>
     f6a:	4606      	mov	r6, r0
     f6c:	2800      	cmp	r0, #0
     f6e:	d0d3      	beq.n	f18 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     f70:	8b23      	ldrh	r3, [r4, #24]
     f72:	f043 0320 	orr.w	r3, r3, #32
     f76:	8323      	strh	r3, [r4, #24]
     f78:	e7cd      	b.n	f16 <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
     f7a:	2b04      	cmp	r3, #4
     f7c:	d10c      	bne.n	f98 <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     f7e:	f021 0107 	bic.w	r1, r1, #7
     f82:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
     f84:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     f86:	4620      	mov	r0, r4
     f88:	f005 f97a 	bl	6280 <process_recheck>
     f8c:	4605      	mov	r5, r0
     f8e:	2800      	cmp	r0, #0
     f90:	d0c1      	beq.n	f16 <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     f92:	f041 0120 	orr.w	r1, r1, #32
     f96:	8321      	strh	r1, [r4, #24]
     f98:	2500      	movs	r5, #0
     f9a:	e7bc      	b.n	f16 <process_event+0x5e>
		} else if (evt == EVT_START) {
     f9c:	2803      	cmp	r0, #3
     f9e:	d109      	bne.n	fb4 <process_event+0xfc>
			transit = mgr->transitions->start;
     fa0:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     fa2:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
     fa6:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     fa8:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
     fac:	8323      	strh	r3, [r4, #24]
}
     fae:	2500      	movs	r5, #0
		res = 0;
     fb0:	462f      	mov	r7, r5
     fb2:	e7b1      	b.n	f18 <process_event+0x60>
		} else if (evt == EVT_STOP) {
     fb4:	2804      	cmp	r0, #4
     fb6:	d106      	bne.n	fc6 <process_event+0x10e>
			transit = mgr->transitions->stop;
     fb8:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     fba:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
     fbe:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     fc0:	f043 0304 	orr.w	r3, r3, #4
     fc4:	e7f2      	b.n	fac <process_event+0xf4>
		} else if (evt == EVT_RESET) {
     fc6:	2805      	cmp	r0, #5
     fc8:	d106      	bne.n	fd8 <process_event+0x120>
			transit = mgr->transitions->reset;
     fca:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     fcc:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
     fd0:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     fd2:	f043 0305 	orr.w	r3, r3, #5
     fd6:	e7e9      	b.n	fac <process_event+0xf4>
     fd8:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
     fda:	462e      	mov	r6, r5
     fdc:	e7e8      	b.n	fb0 <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
     fde:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     fe0:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     fe4:	8321      	strh	r1, [r4, #24]
     fe6:	f38b 8811 	msr	BASEPRI, fp
     fea:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     fee:	b9fb      	cbnz	r3, 1030 <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
     ff0:	bb85      	cbnz	r5, 1054 <process_event+0x19c>
			if (transit != NULL) {
     ff2:	b116      	cbz	r6, ffa <process_event+0x142>
				transit(mgr, transition_complete);
     ff4:	491f      	ldr	r1, [pc, #124]	; (1074 <process_event+0x1bc>)
     ff6:	4620      	mov	r0, r4
     ff8:	47b0      	blx	r6
	__asm__ volatile(
     ffa:	f04f 0320 	mov.w	r3, #32
     ffe:	f3ef 8b11 	mrs	fp, BASEPRI
    1002:	f383 8812 	msr	BASEPRI_MAX, r3
    1006:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    100a:	8b23      	ldrh	r3, [r4, #24]
    100c:	f023 0308 	bic.w	r3, r3, #8
    1010:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    1012:	8b23      	ldrh	r3, [r4, #24]
    1014:	06da      	lsls	r2, r3, #27
    1016:	d525      	bpl.n	1064 <process_event+0x1ac>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1018:	f023 0310 	bic.w	r3, r3, #16
    101c:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    101e:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    1020:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    1024:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    1028:	2900      	cmp	r1, #0
    102a:	f47f af5e 	bne.w	eea <process_event+0x32>
out:
    102e:	e754      	b.n	eda <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    1030:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1032:	2900      	cmp	r1, #0
    1034:	d0dc      	beq.n	ff0 <process_event+0x138>
	return node->next;
    1036:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
    103a:	f8d1 b004 	ldr.w	fp, [r1, #4]
    103e:	463b      	mov	r3, r7
    1040:	4652      	mov	r2, sl
    1042:	4620      	mov	r0, r4
    1044:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1046:	f1b9 0f00 	cmp.w	r9, #0
    104a:	d0d1      	beq.n	ff0 <process_event+0x138>
    104c:	4649      	mov	r1, r9
    104e:	f8d9 9000 	ldr.w	r9, [r9]
    1052:	e7f2      	b.n	103a <process_event+0x182>
    1054:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    1056:	463b      	mov	r3, r7
    1058:	4652      	mov	r2, sl
    105a:	4620      	mov	r0, r4
    105c:	682d      	ldr	r5, [r5, #0]
    105e:	f005 f92b 	bl	62b8 <notify_one>
    1062:	e7c5      	b.n	ff0 <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    1064:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    1068:	bf1e      	ittt	ne
    106a:	f023 0320 	bicne.w	r3, r3, #32
    106e:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    1070:	2102      	movne	r1, #2
    1072:	e7d5      	b.n	1020 <process_event+0x168>
    1074:	000062e5 	.word	0x000062e5

00001078 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    1078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    107c:	4681      	mov	r9, r0
    107e:	b09b      	sub	sp, #108	; 0x6c
    1080:	468a      	mov	sl, r1
    1082:	4615      	mov	r5, r2
    1084:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    1086:	2600      	movs	r6, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    1088:	7828      	ldrb	r0, [r5, #0]
    108a:	b910      	cbnz	r0, 1092 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    108c:	4630      	mov	r0, r6
    108e:	f000 bdee 	b.w	1c6e <cbvprintf+0xbf6>
			OUTC(*fp++);
    1092:	1c6b      	adds	r3, r5, #1
		if (*fp != '%') {
    1094:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    1096:	9302      	str	r3, [sp, #8]
		if (*fp != '%') {
    1098:	d006      	beq.n	10a8 <cbvprintf+0x30>
			OUTC(*fp++);
    109a:	4651      	mov	r1, sl
			OUTC('%');
    109c:	47c8      	blx	r9
    109e:	2800      	cmp	r0, #0
    10a0:	f2c0 85e5 	blt.w	1c6e <cbvprintf+0xbf6>
    10a4:	3601      	adds	r6, #1
		if (bps == NULL) {
    10a6:	e24c      	b.n	1542 <cbvprintf+0x4ca>
		} state = {
    10a8:	2218      	movs	r2, #24
    10aa:	2100      	movs	r1, #0
    10ac:	a80c      	add	r0, sp, #48	; 0x30
    10ae:	f005 fb11 	bl	66d4 <memset>
	if (*sp == '%') {
    10b2:	786b      	ldrb	r3, [r5, #1]
    10b4:	2b25      	cmp	r3, #37	; 0x25
    10b6:	d07c      	beq.n	11b2 <cbvprintf+0x13a>
    10b8:	2200      	movs	r2, #0
    10ba:	1c68      	adds	r0, r5, #1
    10bc:	4696      	mov	lr, r2
    10be:	4690      	mov	r8, r2
    10c0:	4694      	mov	ip, r2
    10c2:	4617      	mov	r7, r2
    10c4:	4601      	mov	r1, r0
		switch (*sp) {
    10c6:	f810 3b01 	ldrb.w	r3, [r0], #1
    10ca:	2b2b      	cmp	r3, #43	; 0x2b
    10cc:	f000 80a0 	beq.w	1210 <cbvprintf+0x198>
    10d0:	f200 8097 	bhi.w	1202 <cbvprintf+0x18a>
    10d4:	2b20      	cmp	r3, #32
    10d6:	f000 809e 	beq.w	1216 <cbvprintf+0x19e>
    10da:	2b23      	cmp	r3, #35	; 0x23
    10dc:	f000 809e 	beq.w	121c <cbvprintf+0x1a4>
    10e0:	b12f      	cbz	r7, 10ee <cbvprintf+0x76>
    10e2:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    10e6:	f040 0004 	orr.w	r0, r0, #4
    10ea:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
    10ee:	f1bc 0f00 	cmp.w	ip, #0
    10f2:	d005      	beq.n	1100 <cbvprintf+0x88>
    10f4:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    10f8:	f040 0008 	orr.w	r0, r0, #8
    10fc:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
    1100:	f1b8 0f00 	cmp.w	r8, #0
    1104:	d005      	beq.n	1112 <cbvprintf+0x9a>
    1106:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    110a:	f040 0010 	orr.w	r0, r0, #16
    110e:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
    1112:	f1be 0f00 	cmp.w	lr, #0
    1116:	d005      	beq.n	1124 <cbvprintf+0xac>
    1118:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    111c:	f040 0020 	orr.w	r0, r0, #32
    1120:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
    1124:	b12a      	cbz	r2, 1132 <cbvprintf+0xba>
    1126:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    112a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    112e:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	if (conv->flag_zero && conv->flag_dash) {
    1132:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    1136:	f002 0044 	and.w	r0, r2, #68	; 0x44
    113a:	2844      	cmp	r0, #68	; 0x44
    113c:	d103      	bne.n	1146 <cbvprintf+0xce>
		conv->flag_zero = false;
    113e:	f36f 1286 	bfc	r2, #6, #1
    1142:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	conv->width_present = true;
    1146:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
	if (*sp == '*') {
    114a:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
    114c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    1150:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	if (*sp == '*') {
    1154:	d17e      	bne.n	1254 <cbvprintf+0x1dc>
		conv->width_star = true;
    1156:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    115a:	f042 0201 	orr.w	r2, r2, #1
			++sp;
    115e:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    1160:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	conv->prec_present = (*sp == '.');
    1164:	781a      	ldrb	r2, [r3, #0]
    1166:	2a2e      	cmp	r2, #46	; 0x2e
    1168:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    116c:	bf0c      	ite	eq
    116e:	2101      	moveq	r1, #1
    1170:	2100      	movne	r1, #0
    1172:	f361 0241 	bfi	r2, r1, #1, #1
    1176:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	if (!conv->prec_present) {
    117a:	d177      	bne.n	126c <cbvprintf+0x1f4>
	if (*sp == '*') {
    117c:	785a      	ldrb	r2, [r3, #1]
    117e:	2a2a      	cmp	r2, #42	; 0x2a
    1180:	d06d      	beq.n	125e <cbvprintf+0x1e6>
	++sp;
    1182:	3301      	adds	r3, #1
	size_t val = 0;
    1184:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    1186:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    118a:	4618      	mov	r0, r3
    118c:	f810 2b01 	ldrb.w	r2, [r0], #1
    1190:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    1194:	2f09      	cmp	r7, #9
    1196:	f240 80ab 	bls.w	12f0 <cbvprintf+0x278>
	conv->unsupported |= ((conv->prec_value < 0)
    119a:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
	conv->prec_value = prec;
    119e:	9110      	str	r1, [sp, #64]	; 0x40
	conv->unsupported |= ((conv->prec_value < 0)
    11a0:	f3c2 0040 	ubfx	r0, r2, #1, #1
    11a4:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
    11a8:	f361 0241 	bfi	r2, r1, #1, #1
    11ac:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
    11b0:	e05c      	b.n	126c <cbvprintf+0x1f4>
		conv->specifier = *sp++;
    11b2:	1caa      	adds	r2, r5, #2
    11b4:	9202      	str	r2, [sp, #8]
    11b6:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
		if (conv->width_star) {
    11ba:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    11be:	07df      	lsls	r7, r3, #31
    11c0:	f140 8173 	bpl.w	14aa <cbvprintf+0x432>
			width = va_arg(ap, int);
    11c4:	f854 bb04 	ldr.w	fp, [r4], #4
			if (width < 0) {
    11c8:	f1bb 0f00 	cmp.w	fp, #0
    11cc:	da07      	bge.n	11de <cbvprintf+0x166>
				conv->flag_dash = true;
    11ce:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    11d2:	f042 0204 	orr.w	r2, r2, #4
    11d6:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				width = -width;
    11da:	f1cb 0b00 	rsb	fp, fp, #0
		if (conv->prec_star) {
    11de:	0758      	lsls	r0, r3, #29
    11e0:	f140 816c 	bpl.w	14bc <cbvprintf+0x444>
			int arg = va_arg(ap, int);
    11e4:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
    11e8:	f1b8 0f00 	cmp.w	r8, #0
    11ec:	f280 816b 	bge.w	14c6 <cbvprintf+0x44e>
				conv->prec_present = false;
    11f0:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    11f4:	f36f 0341 	bfc	r3, #1, #1
    11f8:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		int precision = -1;
    11fc:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    1200:	e161      	b.n	14c6 <cbvprintf+0x44e>
		switch (*sp) {
    1202:	2b2d      	cmp	r3, #45	; 0x2d
    1204:	d00d      	beq.n	1222 <cbvprintf+0x1aa>
    1206:	2b30      	cmp	r3, #48	; 0x30
    1208:	f47f af6a 	bne.w	10e0 <cbvprintf+0x68>
			conv->flag_zero = true;
    120c:	2201      	movs	r2, #1
	} while (loop);
    120e:	e759      	b.n	10c4 <cbvprintf+0x4c>
			conv->flag_plus = true;
    1210:	f04f 0c01 	mov.w	ip, #1
    1214:	e756      	b.n	10c4 <cbvprintf+0x4c>
			conv->flag_space = true;
    1216:	f04f 0801 	mov.w	r8, #1
    121a:	e753      	b.n	10c4 <cbvprintf+0x4c>
			conv->flag_hash = true;
    121c:	f04f 0e01 	mov.w	lr, #1
    1220:	e750      	b.n	10c4 <cbvprintf+0x4c>
		switch (*sp) {
    1222:	2701      	movs	r7, #1
    1224:	e74e      	b.n	10c4 <cbvprintf+0x4c>
		val = 10U * val + *sp++ - '0';
    1226:	fb0c 7202 	mla	r2, ip, r2, r7
    122a:	3a30      	subs	r2, #48	; 0x30
    122c:	4603      	mov	r3, r0
    122e:	4618      	mov	r0, r3
    1230:	f810 7b01 	ldrb.w	r7, [r0], #1
    1234:	f1a7 0e30 	sub.w	lr, r7, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    1238:	f1be 0f09 	cmp.w	lr, #9
    123c:	d9f3      	bls.n	1226 <cbvprintf+0x1ae>
	if (sp != wp) {
    123e:	4299      	cmp	r1, r3
    1240:	d090      	beq.n	1164 <cbvprintf+0xec>
		conv->unsupported |= ((conv->width_value < 0)
    1242:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		conv->width_value = width;
    1246:	920f      	str	r2, [sp, #60]	; 0x3c
				      || (width != (size_t)conv->width_value));
    1248:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    124a:	f362 0141 	bfi	r1, r2, #1, #1
    124e:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
    1252:	e787      	b.n	1164 <cbvprintf+0xec>
    1254:	460b      	mov	r3, r1
	size_t val = 0;
    1256:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    1258:	f04f 0c0a 	mov.w	ip, #10
    125c:	e7e7      	b.n	122e <cbvprintf+0x1b6>
		conv->prec_star = true;
    125e:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    1262:	f042 0204 	orr.w	r2, r2, #4
    1266:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		return ++sp;
    126a:	3302      	adds	r3, #2
	switch (*sp) {
    126c:	4619      	mov	r1, r3
    126e:	f811 2b01 	ldrb.w	r2, [r1], #1
    1272:	2a6c      	cmp	r2, #108	; 0x6c
    1274:	d05c      	beq.n	1330 <cbvprintf+0x2b8>
    1276:	d840      	bhi.n	12fa <cbvprintf+0x282>
    1278:	2a68      	cmp	r2, #104	; 0x68
    127a:	d046      	beq.n	130a <cbvprintf+0x292>
    127c:	2a6a      	cmp	r2, #106	; 0x6a
    127e:	d061      	beq.n	1344 <cbvprintf+0x2cc>
    1280:	2a4c      	cmp	r2, #76	; 0x4c
    1282:	d067      	beq.n	1354 <cbvprintf+0x2dc>
    1284:	4619      	mov	r1, r3
	conv->specifier = *sp++;
    1286:	460b      	mov	r3, r1
    1288:	f813 2b01 	ldrb.w	r2, [r3], #1
    128c:	9302      	str	r3, [sp, #8]
	switch (conv->specifier) {
    128e:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
    1290:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	switch (conv->specifier) {
    1294:	f200 80df 	bhi.w	1456 <cbvprintf+0x3de>
    1298:	2a57      	cmp	r2, #87	; 0x57
    129a:	d868      	bhi.n	136e <cbvprintf+0x2f6>
    129c:	2a41      	cmp	r2, #65	; 0x41
    129e:	d004      	beq.n	12aa <cbvprintf+0x232>
    12a0:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
    12a4:	2b02      	cmp	r3, #2
    12a6:	f200 80d6 	bhi.w	1456 <cbvprintf+0x3de>
		conv->specifier_cat = SPECIFIER_FP;
    12aa:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
			|| (conv->specifier == 'A');
    12ae:	f002 02df 	and.w	r2, r2, #223	; 0xdf
		conv->specifier_cat = SPECIFIER_FP;
    12b2:	2104      	movs	r1, #4
			|| (conv->specifier == 'A');
    12b4:	f1a2 0841 	sub.w	r8, r2, #65	; 0x41
		conv->specifier_cat = SPECIFIER_FP;
    12b8:	f361 0302 	bfi	r3, r1, #0, #3
			|| (conv->specifier == 'A');
    12bc:	f1d8 0200 	rsbs	r2, r8, #0
		conv->specifier_a = (conv->specifier == 'a')
    12c0:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
		conv->specifier_cat = SPECIFIER_FP;
    12c4:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
			|| (conv->specifier == 'A');
    12c8:	eb42 0208 	adc.w	r2, r2, r8
		conv->specifier_a = (conv->specifier == 'a')
    12cc:	f362 11c7 	bfi	r1, r2, #7, #1
		if (conv->specifier_a
    12d0:	060a      	lsls	r2, r1, #24
		conv->specifier_a = (conv->specifier == 'a')
    12d2:	f88d 1039 	strb.w	r1, [sp, #57]	; 0x39
		if (conv->specifier_a
    12d6:	b2cb      	uxtb	r3, r1
    12d8:	f100 80e5 	bmi.w	14a6 <cbvprintf+0x42e>
		if (conv->length_mod == LENGTH_L) {
    12dc:	f003 0278 	and.w	r2, r3, #120	; 0x78
    12e0:	2a18      	cmp	r2, #24
    12e2:	f040 80b5 	bne.w	1450 <cbvprintf+0x3d8>
			conv->length_mod = LENGTH_NONE;
    12e6:	f36f 03c6 	bfc	r3, #3, #4
    12ea:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    12ee:	e09c      	b.n	142a <cbvprintf+0x3b2>
		val = 10U * val + *sp++ - '0';
    12f0:	fb0c 2101 	mla	r1, ip, r1, r2
    12f4:	3930      	subs	r1, #48	; 0x30
    12f6:	4603      	mov	r3, r0
    12f8:	e747      	b.n	118a <cbvprintf+0x112>
	switch (*sp) {
    12fa:	2a74      	cmp	r2, #116	; 0x74
    12fc:	d026      	beq.n	134c <cbvprintf+0x2d4>
    12fe:	2a7a      	cmp	r2, #122	; 0x7a
    1300:	d1c0      	bne.n	1284 <cbvprintf+0x20c>
		conv->length_mod = LENGTH_Z;
    1302:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    1306:	2206      	movs	r2, #6
    1308:	e00d      	b.n	1326 <cbvprintf+0x2ae>
		if (*++sp == 'h') {
    130a:	785a      	ldrb	r2, [r3, #1]
    130c:	2a68      	cmp	r2, #104	; 0x68
    130e:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    1312:	d106      	bne.n	1322 <cbvprintf+0x2aa>
			conv->length_mod = LENGTH_HH;
    1314:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    1316:	f361 02c6 	bfi	r2, r1, #3, #4
    131a:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
			++sp;
    131e:	1c99      	adds	r1, r3, #2
    1320:	e7b1      	b.n	1286 <cbvprintf+0x20e>
			conv->length_mod = LENGTH_H;
    1322:	4613      	mov	r3, r2
    1324:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    1326:	f362 03c6 	bfi	r3, r2, #3, #4
    132a:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		break;
    132e:	e7aa      	b.n	1286 <cbvprintf+0x20e>
		if (*++sp == 'l') {
    1330:	785a      	ldrb	r2, [r3, #1]
    1332:	2a6c      	cmp	r2, #108	; 0x6c
    1334:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    1338:	d101      	bne.n	133e <cbvprintf+0x2c6>
			conv->length_mod = LENGTH_LL;
    133a:	2104      	movs	r1, #4
    133c:	e7eb      	b.n	1316 <cbvprintf+0x29e>
			conv->length_mod = LENGTH_L;
    133e:	4613      	mov	r3, r2
    1340:	2203      	movs	r2, #3
    1342:	e7f0      	b.n	1326 <cbvprintf+0x2ae>
		conv->length_mod = LENGTH_J;
    1344:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    1348:	2205      	movs	r2, #5
    134a:	e7ec      	b.n	1326 <cbvprintf+0x2ae>
		conv->length_mod = LENGTH_T;
    134c:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    1350:	2207      	movs	r2, #7
    1352:	e7e8      	b.n	1326 <cbvprintf+0x2ae>
		conv->unsupported = true;
    1354:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    1358:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    135c:	f023 0302 	bic.w	r3, r3, #2
    1360:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1364:	f043 0302 	orr.w	r3, r3, #2
    1368:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		break;
    136c:	e78b      	b.n	1286 <cbvprintf+0x20e>
	switch (conv->specifier) {
    136e:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
    1372:	2b20      	cmp	r3, #32
    1374:	d86f      	bhi.n	1456 <cbvprintf+0x3de>
    1376:	a101      	add	r1, pc, #4	; (adr r1, 137c <cbvprintf+0x304>)
    1378:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    137c:	0000142f 	.word	0x0000142f
    1380:	00001457 	.word	0x00001457
    1384:	00001457 	.word	0x00001457
    1388:	00001457 	.word	0x00001457
    138c:	00001457 	.word	0x00001457
    1390:	00001457 	.word	0x00001457
    1394:	00001457 	.word	0x00001457
    1398:	00001457 	.word	0x00001457
    139c:	00001457 	.word	0x00001457
    13a0:	000012ab 	.word	0x000012ab
    13a4:	00001457 	.word	0x00001457
    13a8:	0000142f 	.word	0x0000142f
    13ac:	00001401 	.word	0x00001401
    13b0:	000012ab 	.word	0x000012ab
    13b4:	000012ab 	.word	0x000012ab
    13b8:	000012ab 	.word	0x000012ab
    13bc:	00001457 	.word	0x00001457
    13c0:	00001401 	.word	0x00001401
    13c4:	00001457 	.word	0x00001457
    13c8:	00001457 	.word	0x00001457
    13cc:	00001457 	.word	0x00001457
    13d0:	00001457 	.word	0x00001457
    13d4:	00001465 	.word	0x00001465
    13d8:	0000142f 	.word	0x0000142f
    13dc:	00001489 	.word	0x00001489
    13e0:	00001457 	.word	0x00001457
    13e4:	00001457 	.word	0x00001457
    13e8:	00001489 	.word	0x00001489
    13ec:	00001457 	.word	0x00001457
    13f0:	0000142f 	.word	0x0000142f
    13f4:	00001457 	.word	0x00001457
    13f8:	00001457 	.word	0x00001457
    13fc:	0000142f 	.word	0x0000142f
		conv->specifier_cat = SPECIFIER_SINT;
    1400:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    1404:	2101      	movs	r1, #1
		conv->specifier_cat = SPECIFIER_UINT;
    1406:	f361 0302 	bfi	r3, r1, #0, #3
    140a:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    140e:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    1412:	f003 0378 	and.w	r3, r3, #120	; 0x78
    1416:	2b40      	cmp	r3, #64	; 0x40
			conv->invalid = true;
    1418:	bf02      	ittt	eq
    141a:	f89d 1038 	ldrbeq.w	r1, [sp, #56]	; 0x38
    141e:	f041 0101 	orreq.w	r1, r1, #1
    1422:	f88d 1038 	strbeq.w	r1, [sp, #56]	; 0x38
		if (conv->specifier == 'c') {
    1426:	2a63      	cmp	r2, #99	; 0x63
    1428:	d005      	beq.n	1436 <cbvprintf+0x3be>
	bool unsupported = false;
    142a:	2300      	movs	r3, #0
    142c:	e006      	b.n	143c <cbvprintf+0x3c4>
		conv->specifier_cat = SPECIFIER_UINT;
    142e:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    1432:	2102      	movs	r1, #2
    1434:	e7e7      	b.n	1406 <cbvprintf+0x38e>
			unsupported = (conv->length_mod != LENGTH_NONE);
    1436:	3b00      	subs	r3, #0
    1438:	bf18      	it	ne
    143a:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    143c:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    1440:	f3c2 0140 	ubfx	r1, r2, #1, #1
    1444:	430b      	orrs	r3, r1
    1446:	f363 0241 	bfi	r2, r3, #1, #1
    144a:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
    144e:	e6b4      	b.n	11ba <cbvprintf+0x142>
		} else if ((conv->length_mod != LENGTH_NONE)
    1450:	f013 0f38 	tst.w	r3, #56	; 0x38
    1454:	d0e9      	beq.n	142a <cbvprintf+0x3b2>
			conv->invalid = true;
    1456:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    145a:	f043 0301 	orr.w	r3, r3, #1
    145e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    1462:	e7e2      	b.n	142a <cbvprintf+0x3b2>
		conv->specifier_cat = SPECIFIER_PTR;
    1464:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    1468:	2203      	movs	r2, #3
    146a:	f362 0302 	bfi	r3, r2, #0, #3
    146e:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    1472:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    1476:	f003 0378 	and.w	r3, r3, #120	; 0x78
    147a:	f1a3 0c40 	sub.w	ip, r3, #64	; 0x40
    147e:	f1dc 0300 	rsbs	r3, ip, #0
    1482:	eb43 030c 	adc.w	r3, r3, ip
    1486:	e7d9      	b.n	143c <cbvprintf+0x3c4>
		conv->specifier_cat = SPECIFIER_PTR;
    1488:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    148c:	2203      	movs	r2, #3
    148e:	f362 0302 	bfi	r3, r2, #0, #3
    1492:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
    1496:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    149a:	f013 0f78 	tst.w	r3, #120	; 0x78
    149e:	bf14      	ite	ne
    14a0:	2301      	movne	r3, #1
    14a2:	2300      	moveq	r3, #0
    14a4:	e7ca      	b.n	143c <cbvprintf+0x3c4>
			unsupported = true;
    14a6:	2301      	movs	r3, #1
    14a8:	e7c8      	b.n	143c <cbvprintf+0x3c4>
		} else if (conv->width_present) {
    14aa:	f99d 2038 	ldrsb.w	r2, [sp, #56]	; 0x38
    14ae:	2a00      	cmp	r2, #0
			width = conv->width_value;
    14b0:	bfb4      	ite	lt
    14b2:	f8dd b03c 	ldrlt.w	fp, [sp, #60]	; 0x3c
		int width = -1;
    14b6:	f04f 3bff 	movge.w	fp, #4294967295	; 0xffffffff
    14ba:	e690      	b.n	11de <cbvprintf+0x166>
		} else if (conv->prec_present) {
    14bc:	0799      	lsls	r1, r3, #30
    14be:	f57f ae9d 	bpl.w	11fc <cbvprintf+0x184>
			precision = conv->prec_value;
    14c2:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
		conv->pad0_value = 0;
    14c6:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
    14ca:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    14cc:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
		    && (conv->specifier_cat == SPECIFIER_FP)
    14d0:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
    14d4:	f003 0207 	and.w	r2, r3, #7
    14d8:	2a04      	cmp	r2, #4
    14da:	d109      	bne.n	14f0 <cbvprintf+0x478>
		    && !conv->prec_present) {
    14dc:	078a      	lsls	r2, r1, #30
    14de:	d407      	bmi.n	14f0 <cbvprintf+0x478>
			if (conv->specifier_a) {
    14e0:	f99d 2039 	ldrsb.w	r2, [sp, #57]	; 0x39
				precision = 6;
    14e4:	2a00      	cmp	r2, #0
    14e6:	bfb4      	ite	lt
    14e8:	f04f 080d 	movlt.w	r8, #13
    14ec:	f04f 0806 	movge.w	r8, #6
		enum specifier_cat_enum specifier_cat
    14f0:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    14f4:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    14f6:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    14fa:	d137      	bne.n	156c <cbvprintf+0x4f4>
			switch (length_mod) {
    14fc:	1ecb      	subs	r3, r1, #3
    14fe:	2b04      	cmp	r3, #4
    1500:	d821      	bhi.n	1546 <cbvprintf+0x4ce>
    1502:	e8df f003 	tbb	[pc, r3]
    1506:	0903      	.short	0x0903
    1508:	2009      	.short	0x2009
    150a:	20          	.byte	0x20
    150b:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    150c:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
    1510:	17da      	asrs	r2, r3, #31
    1512:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
    1516:	e006      	b.n	1526 <cbvprintf+0x4ae>
					(sint_value_type)va_arg(ap, intmax_t);
    1518:	3407      	adds	r4, #7
    151a:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    151e:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    1522:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		if (conv->invalid || conv->unsupported) {
    1526:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
    152a:	07bb      	lsls	r3, r7, #30
    152c:	d056      	beq.n	15dc <cbvprintf+0x564>
			OUTS(sp, fp);
    152e:	9b02      	ldr	r3, [sp, #8]
    1530:	462a      	mov	r2, r5
    1532:	4651      	mov	r1, sl
    1534:	4648      	mov	r0, r9
    1536:	f005 f81e 	bl	6576 <outs>
    153a:	2800      	cmp	r0, #0
    153c:	f2c0 8397 	blt.w	1c6e <cbvprintf+0xbf6>
    1540:	4406      	add	r6, r0
			while (pad_len-- > 0) {
    1542:	9d02      	ldr	r5, [sp, #8]
    1544:	e5a0      	b.n	1088 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1546:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    154a:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    154c:	ea4f 72e3 	mov.w	r2, r3, asr #31
    1550:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
    1554:	d105      	bne.n	1562 <cbvprintf+0x4ea>
				value->uint = (unsigned char)value->uint;
    1556:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
				value->uint = (unsigned short)value->uint;
    155a:	930c      	str	r3, [sp, #48]	; 0x30
    155c:	2300      	movs	r3, #0
    155e:	930d      	str	r3, [sp, #52]	; 0x34
    1560:	e7e1      	b.n	1526 <cbvprintf+0x4ae>
			} else if (length_mod == LENGTH_H) {
    1562:	2902      	cmp	r1, #2
    1564:	d1df      	bne.n	1526 <cbvprintf+0x4ae>
				value->sint = (short)value->sint;
    1566:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
    156a:	e7d1      	b.n	1510 <cbvprintf+0x498>
		} else if (specifier_cat == SPECIFIER_UINT) {
    156c:	2b02      	cmp	r3, #2
    156e:	d123      	bne.n	15b8 <cbvprintf+0x540>
			switch (length_mod) {
    1570:	1ecb      	subs	r3, r1, #3
    1572:	2b04      	cmp	r3, #4
    1574:	d813      	bhi.n	159e <cbvprintf+0x526>
    1576:	e8df f003 	tbb	[pc, r3]
    157a:	0a03      	.short	0x0a03
    157c:	120a      	.short	0x120a
    157e:	12          	.byte	0x12
    157f:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    1580:	6822      	ldr	r2, [r4, #0]
    1582:	920c      	str	r2, [sp, #48]	; 0x30
    1584:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
    1586:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
    1588:	930d      	str	r3, [sp, #52]	; 0x34
					(uint_value_type)va_arg(ap, size_t);
    158a:	4604      	mov	r4, r0
    158c:	e7cb      	b.n	1526 <cbvprintf+0x4ae>
					(uint_value_type)va_arg(ap,
    158e:	1de0      	adds	r0, r4, #7
    1590:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
    1594:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    1598:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				break;
    159c:	e7f5      	b.n	158a <cbvprintf+0x512>
					(uint_value_type)va_arg(ap, size_t);
    159e:	f854 3b04 	ldr.w	r3, [r4], #4
    15a2:	930c      	str	r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
    15a4:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    15a6:	f04f 0300 	mov.w	r3, #0
    15aa:	930d      	str	r3, [sp, #52]	; 0x34
			if (length_mod == LENGTH_HH) {
    15ac:	d0d3      	beq.n	1556 <cbvprintf+0x4de>
			} else if (length_mod == LENGTH_H) {
    15ae:	2902      	cmp	r1, #2
    15b0:	d1b9      	bne.n	1526 <cbvprintf+0x4ae>
				value->uint = (unsigned short)value->uint;
    15b2:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    15b6:	e7d0      	b.n	155a <cbvprintf+0x4e2>
		} else if (specifier_cat == SPECIFIER_FP) {
    15b8:	2b04      	cmp	r3, #4
    15ba:	d109      	bne.n	15d0 <cbvprintf+0x558>
					(sint_value_type)va_arg(ap, long long);
    15bc:	1de3      	adds	r3, r4, #7
    15be:	f023 0307 	bic.w	r3, r3, #7
    15c2:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
    15c6:	e9d3 2300 	ldrd	r2, r3, [r3]
    15ca:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    15ce:	e7aa      	b.n	1526 <cbvprintf+0x4ae>
		} else if (specifier_cat == SPECIFIER_PTR) {
    15d0:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    15d2:	bf04      	itt	eq
    15d4:	f854 3b04 	ldreq.w	r3, [r4], #4
    15d8:	930c      	streq	r3, [sp, #48]	; 0x30
    15da:	e7a4      	b.n	1526 <cbvprintf+0x4ae>
		switch (conv->specifier) {
    15dc:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
    15e0:	2a78      	cmp	r2, #120	; 0x78
    15e2:	d8ae      	bhi.n	1542 <cbvprintf+0x4ca>
    15e4:	2a57      	cmp	r2, #87	; 0x57
    15e6:	f200 808c 	bhi.w	1702 <cbvprintf+0x68a>
    15ea:	2a25      	cmp	r2, #37	; 0x25
    15ec:	f000 80d4 	beq.w	1798 <cbvprintf+0x720>
    15f0:	2a24      	cmp	r2, #36	; 0x24
    15f2:	d9a6      	bls.n	1542 <cbvprintf+0x4ca>
    15f4:	2a41      	cmp	r2, #65	; 0x41
    15f6:	d003      	beq.n	1600 <cbvprintf+0x588>
    15f8:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
    15fc:	2b02      	cmp	r3, #2
    15fe:	d8a0      	bhi.n	1542 <cbvprintf+0x4ca>
	} u = {
    1600:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
	if ((u.u64 & SIGN_MASK) != 0U) {
    1604:	2b00      	cmp	r3, #0
    1606:	f2c0 81be 	blt.w	1986 <cbvprintf+0x90e>
	} else if (conv->flag_plus) {
    160a:	0738      	lsls	r0, r7, #28
    160c:	f100 81bd 	bmi.w	198a <cbvprintf+0x912>
		*sign = ' ';
    1610:	f017 0710 	ands.w	r7, r7, #16
    1614:	bf18      	it	ne
    1616:	2720      	movne	r7, #32
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
    1618:	f3c3 550a 	ubfx	r5, r3, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
    161c:	f3c3 0313 	ubfx	r3, r3, #0, #20
    1620:	e9cd 1308 	strd	r1, r3, [sp, #32]
	bool is_subnormal = (expo == 0) && (fract != 0);
    1624:	2d00      	cmp	r5, #0
    1626:	f040 81b2 	bne.w	198e <cbvprintf+0x916>
    162a:	ea51 0003 	orrs.w	r0, r1, r3
    162e:	bf14      	ite	ne
    1630:	2001      	movne	r0, #1
    1632:	2000      	moveq	r0, #0
	fract <<= EXPONENT_BITS;
    1634:	02db      	lsls	r3, r3, #11
    1636:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
    163a:	02c9      	lsls	r1, r1, #11
		c = 'f';
    163c:	2a46      	cmp	r2, #70	; 0x46
	if ((expo | fract) != 0) {
    163e:	ea45 0e01 	orr.w	lr, r5, r1
    1642:	ea43 7ce5 	orr.w	ip, r3, r5, asr #31
		c = 'f';
    1646:	bf08      	it	eq
    1648:	2266      	moveq	r2, #102	; 0x66
	if ((expo | fract) != 0) {
    164a:	ea5e 0c0c 	orrs.w	ip, lr, ip
	fract &= ~SIGN_MASK;
    164e:	e9cd 1308 	strd	r1, r3, [sp, #32]
	if ((expo | fract) != 0) {
    1652:	f000 8206 	beq.w	1a62 <cbvprintf+0x9ea>
		if (is_subnormal) {
    1656:	2800      	cmp	r0, #0
    1658:	f040 81ce 	bne.w	19f8 <cbvprintf+0x980>
		fract |= BIT_63;
    165c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    1660:	f04f 0c00 	mov.w	ip, #0
    1664:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
    1668:	f2a5 35fe 	subw	r5, r5, #1022	; 0x3fe
		fract |= BIT_63;
    166c:	9109      	str	r1, [sp, #36]	; 0x24
    166e:	4663      	mov	r3, ip
		fract *= 5U;
    1670:	f04f 0e05 	mov.w	lr, #5
	while (expo < -2) {
    1674:	f115 0f02 	cmn.w	r5, #2
    1678:	f2c0 81c5 	blt.w	1a06 <cbvprintf+0x98e>
    167c:	f1bc 0f00 	cmp.w	ip, #0
    1680:	d001      	beq.n	1686 <cbvprintf+0x60e>
    1682:	e9cd 0108 	strd	r0, r1, [sp, #32]
	while (expo > 0) {
    1686:	2d00      	cmp	r5, #0
		fract += 2;
    1688:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
	while (expo > 0) {
    168c:	f300 81d0 	bgt.w	1a30 <cbvprintf+0x9b8>
	fract >>= (4 - expo);
    1690:	9809      	ldr	r0, [sp, #36]	; 0x24
    1692:	9908      	ldr	r1, [sp, #32]
    1694:	f1c5 0c04 	rsb	ip, r5, #4
    1698:	351c      	adds	r5, #28
    169a:	fa00 f505 	lsl.w	r5, r0, r5
    169e:	f1ac 0e20 	sub.w	lr, ip, #32
    16a2:	fa21 f10c 	lsr.w	r1, r1, ip
    16a6:	fa20 fe0e 	lsr.w	lr, r0, lr
    16aa:	4329      	orrs	r1, r5
    16ac:	ea41 010e 	orr.w	r1, r1, lr
    16b0:	fa20 f00c 	lsr.w	r0, r0, ip
    16b4:	e9cd 1008 	strd	r1, r0, [sp, #32]
	if ((c == 'g') || (c == 'G')) {
    16b8:	f002 01df 	and.w	r1, r2, #223	; 0xdf
    16bc:	2947      	cmp	r1, #71	; 0x47
    16be:	f040 81d7 	bne.w	1a70 <cbvprintf+0x9f8>
		if (decexp < (-4 + 1) || decexp > precision) {
    16c2:	1cdd      	adds	r5, r3, #3
    16c4:	db02      	blt.n	16cc <cbvprintf+0x654>
    16c6:	4598      	cmp	r8, r3
    16c8:	f280 81ce 	bge.w	1a68 <cbvprintf+0x9f0>
			c += 'e' - 'g';  /* e or E */
    16cc:	3a02      	subs	r2, #2
			if (precision > 0) {
    16ce:	f1b8 0f00 	cmp.w	r8, #0
			c += 'e' - 'g';  /* e or E */
    16d2:	b2d2      	uxtb	r2, r2
			if (precision > 0) {
    16d4:	dd01      	ble.n	16da <cbvprintf+0x662>
				precision--;
    16d6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		if (!conv->flag_hash && (precision > 0)) {
    16da:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    16de:	0688      	lsls	r0, r1, #26
    16e0:	f100 81c6 	bmi.w	1a70 <cbvprintf+0x9f8>
    16e4:	f1b8 0f00 	cmp.w	r8, #0
    16e8:	bfd4      	ite	le
    16ea:	2100      	movle	r1, #0
    16ec:	2101      	movgt	r1, #1
	if (c == 'f') {
    16ee:	2a66      	cmp	r2, #102	; 0x66
	bool prune_zero = false;
    16f0:	9103      	str	r1, [sp, #12]
	if (c == 'f') {
    16f2:	f040 81bf 	bne.w	1a74 <cbvprintf+0x9fc>
		if (decimals < 0) {
    16f6:	eb18 0503 	adds.w	r5, r8, r3
    16fa:	f140 81bd 	bpl.w	1a78 <cbvprintf+0xa00>
			decimals = 0;
    16fe:	2500      	movs	r5, #0
    1700:	e1bd      	b.n	1a7e <cbvprintf+0xa06>
		switch (conv->specifier) {
    1702:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
    1706:	2b20      	cmp	r3, #32
    1708:	f63f af1b 	bhi.w	1542 <cbvprintf+0x4ca>
    170c:	a001      	add	r0, pc, #4	; (adr r0, 1714 <cbvprintf+0x69c>)
    170e:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
    1712:	bf00      	nop
    1714:	00001929 	.word	0x00001929
    1718:	00001543 	.word	0x00001543
    171c:	00001543 	.word	0x00001543
    1720:	00001543 	.word	0x00001543
    1724:	00001543 	.word	0x00001543
    1728:	00001543 	.word	0x00001543
    172c:	00001543 	.word	0x00001543
    1730:	00001543 	.word	0x00001543
    1734:	00001543 	.word	0x00001543
    1738:	00001601 	.word	0x00001601
    173c:	00001543 	.word	0x00001543
    1740:	000017c5 	.word	0x000017c5
    1744:	000018c9 	.word	0x000018c9
    1748:	00001601 	.word	0x00001601
    174c:	00001601 	.word	0x00001601
    1750:	00001601 	.word	0x00001601
    1754:	00001543 	.word	0x00001543
    1758:	000018c9 	.word	0x000018c9
    175c:	00001543 	.word	0x00001543
    1760:	00001543 	.word	0x00001543
    1764:	00001543 	.word	0x00001543
    1768:	00001543 	.word	0x00001543
    176c:	0000195f 	.word	0x0000195f
    1770:	00001929 	.word	0x00001929
    1774:	0000192d 	.word	0x0000192d
    1778:	00001543 	.word	0x00001543
    177c:	00001543 	.word	0x00001543
    1780:	0000179f 	.word	0x0000179f
    1784:	00001543 	.word	0x00001543
    1788:	00001929 	.word	0x00001929
    178c:	00001543 	.word	0x00001543
    1790:	00001543 	.word	0x00001543
    1794:	00001929 	.word	0x00001929
			OUTC('%');
    1798:	4651      	mov	r1, sl
    179a:	4610      	mov	r0, r2
    179c:	e47e      	b.n	109c <cbvprintf+0x24>
			if (precision >= 0) {
    179e:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    17a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
			if (precision >= 0) {
    17a4:	db09      	blt.n	17ba <cbvprintf+0x742>
				len = strnlen(bps, precision);
    17a6:	4641      	mov	r1, r8
    17a8:	4610      	mov	r0, r2
    17aa:	9203      	str	r2, [sp, #12]
    17ac:	f004 ff72 	bl	6694 <strnlen>
				len = strlen(bps);
    17b0:	9a03      	ldr	r2, [sp, #12]
		char sign = 0;
    17b2:	2700      	movs	r7, #0
			bpe = bps + len;
    17b4:	1815      	adds	r5, r2, r0
		if (bps == NULL) {
    17b6:	b962      	cbnz	r2, 17d2 <cbvprintf+0x75a>
    17b8:	e6c3      	b.n	1542 <cbvprintf+0x4ca>
				len = strlen(bps);
    17ba:	4610      	mov	r0, r2
    17bc:	9203      	str	r2, [sp, #12]
    17be:	f004 ff62 	bl	6686 <strlen>
    17c2:	e7f5      	b.n	17b0 <cbvprintf+0x738>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    17c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    17c6:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
		char sign = 0;
    17ca:	2700      	movs	r7, #0
			bpe = buf + 1;
    17cc:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
				bps = encode_float(value->dbl, conv, precision,
    17d0:	aa13      	add	r2, sp, #76	; 0x4c
		size_t nj_len = (bpe - bps);
    17d2:	1aab      	subs	r3, r5, r2
		if (sign != 0) {
    17d4:	b107      	cbz	r7, 17d8 <cbvprintf+0x760>
			nj_len += 1U;
    17d6:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    17d8:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
    17dc:	06c1      	lsls	r1, r0, #27
    17de:	f140 823a 	bpl.w	1c56 <cbvprintf+0xbde>
			nj_len += 2U;
    17e2:	3302      	adds	r3, #2
		nj_len += conv->pad0_value;
    17e4:	990f      	ldr	r1, [sp, #60]	; 0x3c
		if (conv->pad_fp) {
    17e6:	0640      	lsls	r0, r0, #25
		nj_len += conv->pad0_value;
    17e8:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    17ea:	bf44      	itt	mi
    17ec:	9910      	ldrmi	r1, [sp, #64]	; 0x40
    17ee:	185b      	addmi	r3, r3, r1
		if (width > 0) {
    17f0:	f1bb 0f00 	cmp.w	fp, #0
    17f4:	dd23      	ble.n	183e <cbvprintf+0x7c6>
			width -= (int)nj_len;
    17f6:	ebab 0b03 	sub.w	fp, fp, r3
			if (!conv->flag_dash) {
    17fa:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    17fe:	0759      	lsls	r1, r3, #29
    1800:	f3c3 0880 	ubfx	r8, r3, #2, #1
    1804:	d41b      	bmi.n	183e <cbvprintf+0x7c6>
				if (conv->flag_zero) {
    1806:	0658      	lsls	r0, r3, #25
    1808:	f140 8234 	bpl.w	1c74 <cbvprintf+0xbfc>
					if (sign != 0) {
    180c:	2f00      	cmp	r7, #0
    180e:	f000 8234 	beq.w	1c7a <cbvprintf+0xc02>
						OUTC(sign);
    1812:	4651      	mov	r1, sl
    1814:	4638      	mov	r0, r7
    1816:	9203      	str	r2, [sp, #12]
    1818:	47c8      	blx	r9
    181a:	2800      	cmp	r0, #0
    181c:	f2c0 8227 	blt.w	1c6e <cbvprintf+0xbf6>
    1820:	9a03      	ldr	r2, [sp, #12]
						sign = 0;
    1822:	4647      	mov	r7, r8
						OUTC(sign);
    1824:	3601      	adds	r6, #1
					pad = '0';
    1826:	f04f 0830 	mov.w	r8, #48	; 0x30
    182a:	445e      	add	r6, fp
    182c:	465b      	mov	r3, fp
				while (width-- > 0) {
    182e:	2b00      	cmp	r3, #0
    1830:	eba6 000b 	sub.w	r0, r6, fp
    1834:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    1838:	f300 8211 	bgt.w	1c5e <cbvprintf+0xbe6>
    183c:	4606      	mov	r6, r0
		if (sign != 0) {
    183e:	b147      	cbz	r7, 1852 <cbvprintf+0x7da>
			OUTC(sign);
    1840:	4651      	mov	r1, sl
    1842:	4638      	mov	r0, r7
    1844:	9203      	str	r2, [sp, #12]
    1846:	47c8      	blx	r9
    1848:	2800      	cmp	r0, #0
    184a:	f2c0 8210 	blt.w	1c6e <cbvprintf+0xbf6>
    184e:	9a03      	ldr	r2, [sp, #12]
    1850:	3601      	adds	r6, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
    1852:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    1856:	0659      	lsls	r1, r3, #25
    1858:	f140 8265 	bpl.w	1d26 <cbvprintf+0xcae>
			if (conv->specifier_a) {
    185c:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
    1860:	2b00      	cmp	r3, #0
    1862:	eba6 0302 	sub.w	r3, r6, r2
    1866:	9303      	str	r3, [sp, #12]
    1868:	f2c0 820a 	blt.w	1c80 <cbvprintf+0xc08>
    186c:	4617      	mov	r7, r2
				while (isdigit((int)*cp)) {
    186e:	7838      	ldrb	r0, [r7, #0]
    1870:	9b03      	ldr	r3, [sp, #12]
    1872:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
    1876:	2a09      	cmp	r2, #9
    1878:	46b8      	mov	r8, r7
    187a:	eb03 0607 	add.w	r6, r3, r7
    187e:	f107 0701 	add.w	r7, r7, #1
    1882:	f240 8229 	bls.w	1cd8 <cbvprintf+0xc60>
				if (!conv->pad_postdp) {
    1886:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
				pad_len = conv->pad0_value;
    188a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
				if (!conv->pad_postdp) {
    188c:	0693      	lsls	r3, r2, #26
    188e:	d408      	bmi.n	18a2 <cbvprintf+0x82a>
    1890:	443e      	add	r6, r7
					while (pad_len-- > 0) {
    1892:	2f00      	cmp	r7, #0
    1894:	eba6 0307 	sub.w	r3, r6, r7
    1898:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
    189c:	f300 8222 	bgt.w	1ce4 <cbvprintf+0xc6c>
    18a0:	461e      	mov	r6, r3
				if (*cp == '.') {
    18a2:	f898 0000 	ldrb.w	r0, [r8]
    18a6:	282e      	cmp	r0, #46	; 0x2e
    18a8:	d10b      	bne.n	18c2 <cbvprintf+0x84a>
					OUTC(*cp++);
    18aa:	4651      	mov	r1, sl
    18ac:	47c8      	blx	r9
						OUTC('0');
    18ae:	2800      	cmp	r0, #0
    18b0:	f2c0 81dd 	blt.w	1c6e <cbvprintf+0xbf6>
					while (pad_len-- > 0) {
    18b4:	2f00      	cmp	r7, #0
						OUTC('0');
    18b6:	f106 0601 	add.w	r6, r6, #1
					while (pad_len-- > 0) {
    18ba:	f300 821a 	bgt.w	1cf2 <cbvprintf+0xc7a>
					OUTC(*cp++);
    18be:	f108 0801 	add.w	r8, r8, #1
    18c2:	eba6 0608 	sub.w	r6, r6, r8
    18c6:	e21d      	b.n	1d04 <cbvprintf+0xc8c>
			if (conv->flag_plus) {
    18c8:	073d      	lsls	r5, r7, #28
    18ca:	d42b      	bmi.n	1924 <cbvprintf+0x8ac>
				sign = ' ';
    18cc:	f017 0710 	ands.w	r7, r7, #16
    18d0:	bf18      	it	ne
    18d2:	2720      	movne	r7, #32
			sint = value->sint;
    18d4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
			if (sint < 0) {
    18d8:	2b00      	cmp	r3, #0
    18da:	da05      	bge.n	18e8 <cbvprintf+0x870>
				value->uint = (uint_value_type)-sint;
    18dc:	4252      	negs	r2, r2
    18de:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    18e2:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				sign = '-';
    18e6:	272d      	movs	r7, #45	; 0x2d
			bps = encode_uint(value->uint, conv, buf, bpe);
    18e8:	f10d 0365 	add.w	r3, sp, #101	; 0x65
    18ec:	9300      	str	r3, [sp, #0]
    18ee:	aa0e      	add	r2, sp, #56	; 0x38
    18f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    18f4:	ab13      	add	r3, sp, #76	; 0x4c
    18f6:	f004 fdf8 	bl	64ea <encode_uint>
    18fa:	4602      	mov	r2, r0
			if (precision >= 0) {
    18fc:	f1b8 0f00 	cmp.w	r8, #0
    1900:	f10d 0565 	add.w	r5, sp, #101	; 0x65
    1904:	f6ff af57 	blt.w	17b6 <cbvprintf+0x73e>
				conv->flag_zero = false;
    1908:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
				size_t len = bpe - bps;
    190c:	1aab      	subs	r3, r5, r2
				conv->flag_zero = false;
    190e:	f36f 1186 	bfc	r1, #6, #1
				if (len < (size_t)precision) {
    1912:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    1914:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
				if (len < (size_t)precision) {
    1918:	f67f af4d 	bls.w	17b6 <cbvprintf+0x73e>
					conv->pad0_value = precision - (int)len;
    191c:	eba8 0303 	sub.w	r3, r8, r3
    1920:	930f      	str	r3, [sp, #60]	; 0x3c
    1922:	e748      	b.n	17b6 <cbvprintf+0x73e>
				sign = '+';
    1924:	272b      	movs	r7, #43	; 0x2b
    1926:	e7d5      	b.n	18d4 <cbvprintf+0x85c>
		switch (conv->specifier) {
    1928:	2700      	movs	r7, #0
    192a:	e7dd      	b.n	18e8 <cbvprintf+0x870>
			if (value->ptr != NULL) {
    192c:	980c      	ldr	r0, [sp, #48]	; 0x30
    192e:	2800      	cmp	r0, #0
    1930:	f000 818d 	beq.w	1c4e <cbvprintf+0xbd6>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1934:	f10d 0365 	add.w	r3, sp, #101	; 0x65
    1938:	9300      	str	r3, [sp, #0]
    193a:	aa0e      	add	r2, sp, #56	; 0x38
    193c:	ab13      	add	r3, sp, #76	; 0x4c
    193e:	2100      	movs	r1, #0
    1940:	f004 fdd3 	bl	64ea <encode_uint>
				conv->altform_0c = true;
    1944:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
    1948:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    194c:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    1950:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1954:	4602      	mov	r2, r0
				conv->altform_0c = true;
    1956:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
		char sign = 0;
    195a:	2700      	movs	r7, #0
				goto prec_int_pad0;
    195c:	e7ce      	b.n	18fc <cbvprintf+0x884>
				store_count(conv, value->ptr, count);
    195e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	switch ((enum length_mod_enum)conv->length_mod) {
    1960:	2907      	cmp	r1, #7
    1962:	f63f adee 	bhi.w	1542 <cbvprintf+0x4ca>
    1966:	e8df f001 	tbb	[pc, r1]
    196a:	040c      	.short	0x040c
    196c:	08080c06 	.word	0x08080c06
    1970:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    1972:	701e      	strb	r6, [r3, #0]
		break;
    1974:	e5e5      	b.n	1542 <cbvprintf+0x4ca>
		*(short *)dp = (short)count;
    1976:	801e      	strh	r6, [r3, #0]
		break;
    1978:	e5e3      	b.n	1542 <cbvprintf+0x4ca>
		*(intmax_t *)dp = (intmax_t)count;
    197a:	17f2      	asrs	r2, r6, #31
    197c:	e9c3 6200 	strd	r6, r2, [r3]
		break;
    1980:	e5df      	b.n	1542 <cbvprintf+0x4ca>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    1982:	601e      	str	r6, [r3, #0]
		break;
    1984:	e5dd      	b.n	1542 <cbvprintf+0x4ca>
		*sign = '-';
    1986:	272d      	movs	r7, #45	; 0x2d
    1988:	e646      	b.n	1618 <cbvprintf+0x5a0>
		*sign = '+';
    198a:	272b      	movs	r7, #43	; 0x2b
    198c:	e644      	b.n	1618 <cbvprintf+0x5a0>
	if (expo == BIT_MASK(EXPONENT_BITS)) {
    198e:	f240 70ff 	movw	r0, #2047	; 0x7ff
    1992:	4285      	cmp	r5, r0
    1994:	d12d      	bne.n	19f2 <cbvprintf+0x97a>
		if (fract == 0) {
    1996:	430b      	orrs	r3, r1
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    1998:	f1a2 0241 	sub.w	r2, r2, #65	; 0x41
    199c:	d11b      	bne.n	19d6 <cbvprintf+0x95e>
			if (isupper((int)c)) {
    199e:	2a19      	cmp	r2, #25
    19a0:	d811      	bhi.n	19c6 <cbvprintf+0x94e>
				*buf++ = 'I';
    19a2:	2349      	movs	r3, #73	; 0x49
    19a4:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'N';
    19a8:	234e      	movs	r3, #78	; 0x4e
    19aa:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
				*buf++ = 'F';
    19ae:	2346      	movs	r3, #70	; 0x46
				*buf++ = 'n';
    19b0:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
		conv->flag_zero = false;
    19b4:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    19b8:	f36f 1386 	bfc	r3, #6, #1
    19bc:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
		*bpe = buf;
    19c0:	f10d 054f 	add.w	r5, sp, #79	; 0x4f
		return bps;
    19c4:	e704      	b.n	17d0 <cbvprintf+0x758>
				*buf++ = 'i';
    19c6:	2369      	movs	r3, #105	; 0x69
    19c8:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'n';
    19cc:	236e      	movs	r3, #110	; 0x6e
    19ce:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
				*buf++ = 'f';
    19d2:	2366      	movs	r3, #102	; 0x66
    19d4:	e7ec      	b.n	19b0 <cbvprintf+0x938>
			if (isupper((int)c)) {
    19d6:	2a19      	cmp	r2, #25
				*buf++ = 'N';
    19d8:	bf99      	ittee	ls
    19da:	234e      	movls	r3, #78	; 0x4e
				*buf++ = 'A';
    19dc:	2241      	movls	r2, #65	; 0x41
				*buf++ = 'n';
    19de:	236e      	movhi	r3, #110	; 0x6e
				*buf++ = 'a';
    19e0:	2261      	movhi	r2, #97	; 0x61
				*buf++ = 'N';
    19e2:	bf94      	ite	ls
    19e4:	f88d 304c 	strbls.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'n';
    19e8:	f88d 304c 	strbhi.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'a';
    19ec:	f88d 204d 	strb.w	r2, [sp, #77]	; 0x4d
    19f0:	e7de      	b.n	19b0 <cbvprintf+0x938>
	bool is_subnormal = (expo == 0) && (fract != 0);
    19f2:	2000      	movs	r0, #0
    19f4:	e61e      	b.n	1634 <cbvprintf+0x5bc>
				expo--;
    19f6:	3d01      	subs	r5, #1
			while (((fract <<= 1) & BIT_63) == 0) {
    19f8:	1849      	adds	r1, r1, r1
    19fa:	415b      	adcs	r3, r3
    19fc:	2b00      	cmp	r3, #0
    19fe:	dafa      	bge.n	19f6 <cbvprintf+0x97e>
    1a00:	e9cd 1308 	strd	r1, r3, [sp, #32]
    1a04:	e62a      	b.n	165c <cbvprintf+0x5e4>
			fract >>= 1;
    1a06:	0840      	lsrs	r0, r0, #1
    1a08:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
    1a0c:	0849      	lsrs	r1, r1, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    1a0e:	f1b1 3f33 	cmp.w	r1, #858993459	; 0x33333333
    1a12:	46ac      	mov	ip, r5
			expo++;
    1a14:	f105 0501 	add.w	r5, r5, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    1a18:	d2f5      	bcs.n	1a06 <cbvprintf+0x98e>
		fract *= 5U;
    1a1a:	fb0e f501 	mul.w	r5, lr, r1
    1a1e:	fba0 010e 	umull	r0, r1, r0, lr
    1a22:	4429      	add	r1, r5
		decexp--;
    1a24:	3b01      	subs	r3, #1
		expo++;
    1a26:	f10c 0502 	add.w	r5, ip, #2
		decexp--;
    1a2a:	f04f 0c01 	mov.w	ip, #1
    1a2e:	e621      	b.n	1674 <cbvprintf+0x5fc>
		fract += 2;
    1a30:	3102      	adds	r1, #2
    1a32:	f140 0000 	adc.w	r0, r0, #0
    1a36:	e9cd 1008 	strd	r1, r0, [sp, #32]
		_ldiv5(&fract);
    1a3a:	a808      	add	r0, sp, #32
    1a3c:	e9cd 2303 	strd	r2, r3, [sp, #12]
    1a40:	f004 fd24 	bl	648c <_ldiv5>
		decexp++;
    1a44:	9b04      	ldr	r3, [sp, #16]
    1a46:	9a03      	ldr	r2, [sp, #12]
    1a48:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
		expo--;
    1a4c:	3d01      	subs	r5, #1
		decexp++;
    1a4e:	3301      	adds	r3, #1
			fract <<= 1;
    1a50:	1849      	adds	r1, r1, r1
    1a52:	4140      	adcs	r0, r0
		} while (!(fract & BIT_63));
    1a54:	2800      	cmp	r0, #0
			expo--;
    1a56:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
		} while (!(fract & BIT_63));
    1a5a:	daf9      	bge.n	1a50 <cbvprintf+0x9d8>
    1a5c:	e9cd 1008 	strd	r1, r0, [sp, #32]
    1a60:	e611      	b.n	1686 <cbvprintf+0x60e>
    1a62:	2300      	movs	r3, #0
    1a64:	461d      	mov	r5, r3
    1a66:	e613      	b.n	1690 <cbvprintf+0x618>
			precision -= decexp;
    1a68:	eba8 0803 	sub.w	r8, r8, r3
			c = 'f';
    1a6c:	2266      	movs	r2, #102	; 0x66
    1a6e:	e634      	b.n	16da <cbvprintf+0x662>
	bool prune_zero = false;
    1a70:	2100      	movs	r1, #0
    1a72:	e63c      	b.n	16ee <cbvprintf+0x676>
		decimals = precision + 1;
    1a74:	f108 0501 	add.w	r5, r8, #1
	if (decimals > 16) {
    1a78:	2d10      	cmp	r5, #16
    1a7a:	bfa8      	it	ge
    1a7c:	2510      	movge	r5, #16
    1a7e:	2110      	movs	r1, #16
    1a80:	9107      	str	r1, [sp, #28]
	uint64_t round = BIT64(59); /* 0.5 */
    1a82:	2000      	movs	r0, #0
    1a84:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    1a88:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
	*v >>= 1;
    1a8c:	e9dd 100a 	ldrd	r1, r0, [sp, #40]	; 0x28
	while (decimals--) {
    1a90:	b9a5      	cbnz	r5, 1abc <cbvprintf+0xa44>
	fract += round;
    1a92:	9d08      	ldr	r5, [sp, #32]
    1a94:	1949      	adds	r1, r1, r5
    1a96:	9d09      	ldr	r5, [sp, #36]	; 0x24
    1a98:	eb40 0505 	adc.w	r5, r0, r5
	if (fract >= BIT64(60)) {
    1a9c:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
    1aa0:	d21b      	bcs.n	1ada <cbvprintf+0xa62>
	fract += round;
    1aa2:	e9cd 1508 	strd	r1, r5, [sp, #32]
	if (c == 'f') {
    1aa6:	2a66      	cmp	r2, #102	; 0x66
    1aa8:	f040 8099 	bne.w	1bde <cbvprintf+0xb66>
		if (decexp > 0) {
    1aac:	2b00      	cmp	r3, #0
    1aae:	dc23      	bgt.n	1af8 <cbvprintf+0xa80>
			*buf++ = '0';
    1ab0:	2130      	movs	r1, #48	; 0x30
    1ab2:	f88d 104c 	strb.w	r1, [sp, #76]	; 0x4c
    1ab6:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
    1aba:	e02f      	b.n	1b1c <cbvprintf+0xaa4>
	*v >>= 1;
    1abc:	0849      	lsrs	r1, r1, #1
    1abe:	ea41 71c0 	orr.w	r1, r1, r0, lsl #31
    1ac2:	0840      	lsrs	r0, r0, #1
    1ac4:	e9cd 100a 	strd	r1, r0, [sp, #40]	; 0x28
	_ldiv5(v);
    1ac8:	a80a      	add	r0, sp, #40	; 0x28
    1aca:	e9cd 2304 	strd	r2, r3, [sp, #16]
    1ace:	3d01      	subs	r5, #1
    1ad0:	f004 fcdc 	bl	648c <_ldiv5>
    1ad4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
}
    1ad8:	e7d8      	b.n	1a8c <cbvprintf+0xa14>
	*v >>= 1;
    1ada:	0849      	lsrs	r1, r1, #1
    1adc:	ea41 71c5 	orr.w	r1, r1, r5, lsl #31
	_ldiv5(v);
    1ae0:	a808      	add	r0, sp, #32
	*v >>= 1;
    1ae2:	086d      	lsrs	r5, r5, #1
    1ae4:	e9cd 2304 	strd	r2, r3, [sp, #16]
    1ae8:	e9cd 1508 	strd	r1, r5, [sp, #32]
	_ldiv5(v);
    1aec:	f004 fcce 	bl	648c <_ldiv5>
		decexp++;
    1af0:	9b05      	ldr	r3, [sp, #20]
    1af2:	9a04      	ldr	r2, [sp, #16]
    1af4:	3301      	adds	r3, #1
    1af6:	e7d6      	b.n	1aa6 <cbvprintf+0xa2e>
	char *buf = bps;
    1af8:	ad13      	add	r5, sp, #76	; 0x4c
			while (decexp > 0 && digit_count > 0) {
    1afa:	9907      	ldr	r1, [sp, #28]
    1afc:	2900      	cmp	r1, #0
    1afe:	dd0b      	ble.n	1b18 <cbvprintf+0xaa0>
				*buf++ = _get_digit(&fract, &digit_count);
    1b00:	a907      	add	r1, sp, #28
    1b02:	a808      	add	r0, sp, #32
    1b04:	e9cd 2304 	strd	r2, r3, [sp, #16]
    1b08:	f004 fcd8 	bl	64bc <_get_digit>
			while (decexp > 0 && digit_count > 0) {
    1b0c:	9b05      	ldr	r3, [sp, #20]
				*buf++ = _get_digit(&fract, &digit_count);
    1b0e:	f805 0b01 	strb.w	r0, [r5], #1
			while (decexp > 0 && digit_count > 0) {
    1b12:	3b01      	subs	r3, #1
    1b14:	9a04      	ldr	r2, [sp, #16]
    1b16:	d1f0      	bne.n	1afa <cbvprintf+0xa82>
			conv->pad0_value = decexp;
    1b18:	930f      	str	r3, [sp, #60]	; 0x3c
			decexp = 0;
    1b1a:	2300      	movs	r3, #0
		if (conv->flag_hash || (precision > 0)) {
    1b1c:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    1b20:	0689      	lsls	r1, r1, #26
    1b22:	d402      	bmi.n	1b2a <cbvprintf+0xab2>
    1b24:	f1b8 0f00 	cmp.w	r8, #0
    1b28:	dd1d      	ble.n	1b66 <cbvprintf+0xaee>
			*buf++ = '.';
    1b2a:	212e      	movs	r1, #46	; 0x2e
    1b2c:	f805 1b01 	strb.w	r1, [r5], #1
		if (decexp < 0 && precision > 0) {
    1b30:	b19b      	cbz	r3, 1b5a <cbvprintf+0xae2>
    1b32:	f1b8 0f00 	cmp.w	r8, #0
    1b36:	dd16      	ble.n	1b66 <cbvprintf+0xaee>
			conv->pad0_value = -decexp;
    1b38:	4259      	negs	r1, r3
    1b3a:	4541      	cmp	r1, r8
    1b3c:	bfa8      	it	ge
    1b3e:	4641      	movge	r1, r8
			conv->pad_postdp = (conv->pad0_value > 0);
    1b40:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
			conv->pad0_value = -decexp;
    1b44:	910f      	str	r1, [sp, #60]	; 0x3c
			conv->pad_postdp = (conv->pad0_value > 0);
    1b46:	2900      	cmp	r1, #0
			precision -= conv->pad0_value;
    1b48:	eba8 0801 	sub.w	r8, r8, r1
			conv->pad_postdp = (conv->pad0_value > 0);
    1b4c:	bfd4      	ite	le
    1b4e:	2100      	movle	r1, #0
    1b50:	2101      	movgt	r1, #1
    1b52:	f361 1045 	bfi	r0, r1, #5, #1
    1b56:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
	while (precision > 0 && digit_count > 0) {
    1b5a:	f1b8 0f00 	cmp.w	r8, #0
    1b5e:	dd02      	ble.n	1b66 <cbvprintf+0xaee>
    1b60:	9907      	ldr	r1, [sp, #28]
    1b62:	2900      	cmp	r1, #0
    1b64:	dc56      	bgt.n	1c14 <cbvprintf+0xb9c>
	if (prune_zero) {
    1b66:	9903      	ldr	r1, [sp, #12]
    1b68:	2900      	cmp	r1, #0
    1b6a:	d163      	bne.n	1c34 <cbvprintf+0xbbc>
	conv->pad0_pre_exp = precision;
    1b6c:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
	if ((c == 'e') || (c == 'E')) {
    1b70:	f002 01df 	and.w	r1, r2, #223	; 0xdf
    1b74:	2945      	cmp	r1, #69	; 0x45
    1b76:	d121      	bne.n	1bbc <cbvprintf+0xb44>
		if (decexp < 0) {
    1b78:	2b00      	cmp	r3, #0
		*buf++ = c;
    1b7a:	4629      	mov	r1, r5
			decexp = -decexp;
    1b7c:	bfb8      	it	lt
    1b7e:	425b      	neglt	r3, r3
		*buf++ = c;
    1b80:	f801 2b02 	strb.w	r2, [r1], #2
			*buf++ = '-';
    1b84:	bfb4      	ite	lt
    1b86:	222d      	movlt	r2, #45	; 0x2d
			*buf++ = '+';
    1b88:	222b      	movge	r2, #43	; 0x2b
		if (decexp >= 100) {
    1b8a:	2b63      	cmp	r3, #99	; 0x63
    1b8c:	706a      	strb	r2, [r5, #1]
    1b8e:	dd09      	ble.n	1ba4 <cbvprintf+0xb2c>
			*buf++ = (decexp / 100) + '0';
    1b90:	2064      	movs	r0, #100	; 0x64
    1b92:	fbb3 f2f0 	udiv	r2, r3, r0
    1b96:	f102 0c30 	add.w	ip, r2, #48	; 0x30
    1b9a:	1ce9      	adds	r1, r5, #3
    1b9c:	f885 c002 	strb.w	ip, [r5, #2]
			decexp %= 100;
    1ba0:	fb00 3312 	mls	r3, r0, r2, r3
		*buf++ = (decexp / 10) + '0';
    1ba4:	200a      	movs	r0, #10
    1ba6:	460d      	mov	r5, r1
    1ba8:	fbb3 f2f0 	udiv	r2, r3, r0
		*buf++ = (decexp % 10) + '0';
    1bac:	fb00 3312 	mls	r3, r0, r2, r3
		*buf++ = (decexp / 10) + '0';
    1bb0:	f102 0c30 	add.w	ip, r2, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
    1bb4:	3330      	adds	r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    1bb6:	f805 cb02 	strb.w	ip, [r5], #2
		*buf++ = (decexp % 10) + '0';
    1bba:	704b      	strb	r3, [r1, #1]
		|| (conv->pad0_pre_exp > 0);
    1bbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1bbe:	2b00      	cmp	r3, #0
    1bc0:	dc43      	bgt.n	1c4a <cbvprintf+0xbd2>
    1bc2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    1bc4:	2b00      	cmp	r3, #0
    1bc6:	bfd4      	ite	le
    1bc8:	2300      	movle	r3, #0
    1bca:	2301      	movgt	r3, #1
	conv->pad_fp = (conv->pad0_value > 0)
    1bcc:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
    1bd0:	f363 1286 	bfi	r2, r3, #6, #1
	*buf = 0;
    1bd4:	2300      	movs	r3, #0
	conv->pad_fp = (conv->pad0_value > 0)
    1bd6:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
	*buf = 0;
    1bda:	702b      	strb	r3, [r5, #0]
	return bps;
    1bdc:	e5f8      	b.n	17d0 <cbvprintf+0x758>
		*buf = _get_digit(&fract, &digit_count);
    1bde:	a907      	add	r1, sp, #28
    1be0:	a808      	add	r0, sp, #32
    1be2:	e9cd 2304 	strd	r2, r3, [sp, #16]
    1be6:	f004 fc69 	bl	64bc <_get_digit>
		if (*buf++ != '0') {
    1bea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
		if (conv->flag_hash || (precision > 0)) {
    1bee:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		*buf = _get_digit(&fract, &digit_count);
    1bf2:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
		if (*buf++ != '0') {
    1bf6:	2830      	cmp	r0, #48	; 0x30
			decexp--;
    1bf8:	bf18      	it	ne
    1bfa:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
		if (conv->flag_hash || (precision > 0)) {
    1bfe:	0688      	lsls	r0, r1, #26
    1c00:	d402      	bmi.n	1c08 <cbvprintf+0xb90>
    1c02:	f1b8 0f00 	cmp.w	r8, #0
    1c06:	dd12      	ble.n	1c2e <cbvprintf+0xbb6>
			*buf++ = '.';
    1c08:	212e      	movs	r1, #46	; 0x2e
    1c0a:	f88d 104d 	strb.w	r1, [sp, #77]	; 0x4d
    1c0e:	f10d 054e 	add.w	r5, sp, #78	; 0x4e
    1c12:	e7a2      	b.n	1b5a <cbvprintf+0xae2>
		*buf++ = _get_digit(&fract, &digit_count);
    1c14:	a907      	add	r1, sp, #28
    1c16:	a808      	add	r0, sp, #32
    1c18:	e9cd 2304 	strd	r2, r3, [sp, #16]
    1c1c:	f004 fc4e 	bl	64bc <_get_digit>
		precision--;
    1c20:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    1c24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
		*buf++ = _get_digit(&fract, &digit_count);
    1c28:	f805 0b01 	strb.w	r0, [r5], #1
		precision--;
    1c2c:	e795      	b.n	1b5a <cbvprintf+0xae2>
		if (*buf++ != '0') {
    1c2e:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
    1c32:	e798      	b.n	1b66 <cbvprintf+0xaee>
		conv->pad0_pre_exp = 0;
    1c34:	2100      	movs	r1, #0
    1c36:	9110      	str	r1, [sp, #64]	; 0x40
		while (*--buf == '0') {
    1c38:	4628      	mov	r0, r5
    1c3a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
    1c3e:	2930      	cmp	r1, #48	; 0x30
    1c40:	d0fa      	beq.n	1c38 <cbvprintf+0xbc0>
		if (*buf != '.') {
    1c42:	292e      	cmp	r1, #46	; 0x2e
    1c44:	bf18      	it	ne
    1c46:	4605      	movne	r5, r0
    1c48:	e792      	b.n	1b70 <cbvprintf+0xaf8>
		|| (conv->pad0_pre_exp > 0);
    1c4a:	2301      	movs	r3, #1
    1c4c:	e7be      	b.n	1bcc <cbvprintf+0xb54>
			bpe = bps + 5;
    1c4e:	4d4b      	ldr	r5, [pc, #300]	; (1d7c <cbvprintf+0xd04>)
		char sign = 0;
    1c50:	4607      	mov	r7, r0
			bps = "(nil)";
    1c52:	1f6a      	subs	r2, r5, #5
    1c54:	e5bd      	b.n	17d2 <cbvprintf+0x75a>
		} else if (conv->altform_0) {
    1c56:	0701      	lsls	r1, r0, #28
			nj_len += 1U;
    1c58:	bf48      	it	mi
    1c5a:	3301      	addmi	r3, #1
    1c5c:	e5c2      	b.n	17e4 <cbvprintf+0x76c>
					OUTC(pad);
    1c5e:	4651      	mov	r1, sl
    1c60:	4640      	mov	r0, r8
    1c62:	9203      	str	r2, [sp, #12]
    1c64:	47c8      	blx	r9
    1c66:	2800      	cmp	r0, #0
    1c68:	9a03      	ldr	r2, [sp, #12]
    1c6a:	f6bf addf 	bge.w	182c <cbvprintf+0x7b4>
#undef OUTS
#undef OUTC
}
    1c6e:	b01b      	add	sp, #108	; 0x6c
    1c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    1c74:	f04f 0820 	mov.w	r8, #32
    1c78:	e5d7      	b.n	182a <cbvprintf+0x7b2>
					pad = '0';
    1c7a:	f04f 0830 	mov.w	r8, #48	; 0x30
    1c7e:	e5d4      	b.n	182a <cbvprintf+0x7b2>
			if (conv->specifier_a) {
    1c80:	4690      	mov	r8, r2
    1c82:	9b03      	ldr	r3, [sp, #12]
    1c84:	4647      	mov	r7, r8
    1c86:	4443      	add	r3, r8
				while (*cp != 'p') {
    1c88:	f818 0b01 	ldrb.w	r0, [r8], #1
    1c8c:	2870      	cmp	r0, #112	; 0x70
    1c8e:	d11e      	bne.n	1cce <cbvprintf+0xc56>
			while (pad_len-- > 0) {
    1c90:	461e      	mov	r6, r3
    1c92:	9b10      	ldr	r3, [sp, #64]	; 0x40
    1c94:	eb03 0806 	add.w	r8, r3, r6
    1c98:	eba8 0306 	sub.w	r3, r8, r6
    1c9c:	2b00      	cmp	r3, #0
    1c9e:	dc3b      	bgt.n	1d18 <cbvprintf+0xca0>
			OUTS(cp, bpe);
    1ca0:	462b      	mov	r3, r5
    1ca2:	463a      	mov	r2, r7
			OUTS(bps, bpe);
    1ca4:	4651      	mov	r1, sl
    1ca6:	4648      	mov	r0, r9
    1ca8:	f004 fc65 	bl	6576 <outs>
    1cac:	2800      	cmp	r0, #0
    1cae:	dbde      	blt.n	1c6e <cbvprintf+0xbf6>
    1cb0:	4430      	add	r0, r6
			while (pad_len-- > 0) {
    1cb2:	4606      	mov	r6, r0
    1cb4:	4483      	add	fp, r0
		while (width > 0) {
    1cb6:	ebab 0306 	sub.w	r3, fp, r6
    1cba:	2b00      	cmp	r3, #0
    1cbc:	f77f ac41 	ble.w	1542 <cbvprintf+0x4ca>
			OUTC(' ');
    1cc0:	4651      	mov	r1, sl
    1cc2:	2020      	movs	r0, #32
    1cc4:	47c8      	blx	r9
    1cc6:	2800      	cmp	r0, #0
    1cc8:	dbd1      	blt.n	1c6e <cbvprintf+0xbf6>
    1cca:	3601      	adds	r6, #1
			--width;
    1ccc:	e7f3      	b.n	1cb6 <cbvprintf+0xc3e>
					OUTC(*cp++);
    1cce:	4651      	mov	r1, sl
    1cd0:	47c8      	blx	r9
    1cd2:	2800      	cmp	r0, #0
    1cd4:	dad5      	bge.n	1c82 <cbvprintf+0xc0a>
    1cd6:	e7ca      	b.n	1c6e <cbvprintf+0xbf6>
					OUTC(*cp++);
    1cd8:	4651      	mov	r1, sl
    1cda:	47c8      	blx	r9
    1cdc:	2800      	cmp	r0, #0
    1cde:	f6bf adc6 	bge.w	186e <cbvprintf+0x7f6>
    1ce2:	e7c4      	b.n	1c6e <cbvprintf+0xbf6>
						OUTC('0');
    1ce4:	4651      	mov	r1, sl
    1ce6:	2030      	movs	r0, #48	; 0x30
    1ce8:	47c8      	blx	r9
    1cea:	2800      	cmp	r0, #0
    1cec:	f6bf add1 	bge.w	1892 <cbvprintf+0x81a>
    1cf0:	e7bd      	b.n	1c6e <cbvprintf+0xbf6>
						OUTC('0');
    1cf2:	4651      	mov	r1, sl
    1cf4:	2030      	movs	r0, #48	; 0x30
    1cf6:	47c8      	blx	r9
    1cf8:	3f01      	subs	r7, #1
    1cfa:	e5d8      	b.n	18ae <cbvprintf+0x836>
					OUTC(*cp++);
    1cfc:	4651      	mov	r1, sl
    1cfe:	47c8      	blx	r9
    1d00:	2800      	cmp	r0, #0
    1d02:	dbb4      	blt.n	1c6e <cbvprintf+0xbf6>
    1d04:	4647      	mov	r7, r8
    1d06:	eb06 0308 	add.w	r3, r6, r8
				while (isdigit((int)*cp)) {
    1d0a:	f818 0b01 	ldrb.w	r0, [r8], #1
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    1d0e:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
    1d12:	2a09      	cmp	r2, #9
    1d14:	d9f2      	bls.n	1cfc <cbvprintf+0xc84>
    1d16:	e7bb      	b.n	1c90 <cbvprintf+0xc18>
				OUTC('0');
    1d18:	4651      	mov	r1, sl
    1d1a:	2030      	movs	r0, #48	; 0x30
    1d1c:	47c8      	blx	r9
    1d1e:	2800      	cmp	r0, #0
    1d20:	dba5      	blt.n	1c6e <cbvprintf+0xbf6>
    1d22:	3601      	adds	r6, #1
    1d24:	e7b8      	b.n	1c98 <cbvprintf+0xc20>
			if (conv->altform_0c | conv->altform_0) {
    1d26:	06d8      	lsls	r0, r3, #27
    1d28:	d401      	bmi.n	1d2e <cbvprintf+0xcb6>
    1d2a:	0719      	lsls	r1, r3, #28
    1d2c:	d507      	bpl.n	1d3e <cbvprintf+0xcc6>
				OUTC('0');
    1d2e:	4651      	mov	r1, sl
    1d30:	2030      	movs	r0, #48	; 0x30
    1d32:	9203      	str	r2, [sp, #12]
    1d34:	47c8      	blx	r9
    1d36:	2800      	cmp	r0, #0
    1d38:	db99      	blt.n	1c6e <cbvprintf+0xbf6>
    1d3a:	9a03      	ldr	r2, [sp, #12]
    1d3c:	3601      	adds	r6, #1
			if (conv->altform_0c) {
    1d3e:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    1d42:	06db      	lsls	r3, r3, #27
    1d44:	d508      	bpl.n	1d58 <cbvprintf+0xce0>
				OUTC(conv->specifier);
    1d46:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
    1d4a:	9203      	str	r2, [sp, #12]
    1d4c:	4651      	mov	r1, sl
    1d4e:	47c8      	blx	r9
    1d50:	2800      	cmp	r0, #0
    1d52:	db8c      	blt.n	1c6e <cbvprintf+0xbf6>
    1d54:	9a03      	ldr	r2, [sp, #12]
    1d56:	3601      	adds	r6, #1
			while (pad_len-- > 0) {
    1d58:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    1d5a:	4437      	add	r7, r6
    1d5c:	1bbb      	subs	r3, r7, r6
    1d5e:	2b00      	cmp	r3, #0
    1d60:	dc01      	bgt.n	1d66 <cbvprintf+0xcee>
			OUTS(bps, bpe);
    1d62:	462b      	mov	r3, r5
    1d64:	e79e      	b.n	1ca4 <cbvprintf+0xc2c>
				OUTC('0');
    1d66:	4651      	mov	r1, sl
    1d68:	2030      	movs	r0, #48	; 0x30
    1d6a:	9203      	str	r2, [sp, #12]
    1d6c:	47c8      	blx	r9
    1d6e:	2800      	cmp	r0, #0
    1d70:	f6ff af7d 	blt.w	1c6e <cbvprintf+0xbf6>
    1d74:	9a03      	ldr	r2, [sp, #12]
    1d76:	3601      	adds	r6, #1
    1d78:	e7f0      	b.n	1d5c <cbvprintf+0xce4>
    1d7a:	bf00      	nop
    1d7c:	000081a0 	.word	0x000081a0

00001d80 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    1d80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1d84:	4605      	mov	r5, r0
    1d86:	f04f 0320 	mov.w	r3, #32
    1d8a:	f3ef 8611 	mrs	r6, BASEPRI
    1d8e:	f383 8812 	msr	BASEPRI_MAX, r3
    1d92:	f3bf 8f6f 	isb	sy
	return list->head;
    1d96:	4b0e      	ldr	r3, [pc, #56]	; (1dd0 <pm_state_notify+0x50>)
    1d98:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    1d9a:	b19c      	cbz	r4, 1dc4 <pm_state_notify+0x44>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    1d9c:	4f0d      	ldr	r7, [pc, #52]	; (1dd4 <pm_state_notify+0x54>)
    1d9e:	f8df 8038 	ldr.w	r8, [pc, #56]	; 1dd8 <pm_state_notify+0x58>
    1da2:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
    1da6:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    1daa:	2d00      	cmp	r5, #0
    1dac:	bf08      	it	eq
    1dae:	4613      	moveq	r3, r2
		if (callback) {
    1db0:	b12b      	cbz	r3, 1dbe <pm_state_notify+0x3e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    1db2:	f898 2014 	ldrb.w	r2, [r8, #20]
    1db6:	fb09 f202 	mul.w	r2, r9, r2
    1dba:	5cb8      	ldrb	r0, [r7, r2]
    1dbc:	4798      	blx	r3
	return node->next;
    1dbe:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    1dc0:	2c00      	cmp	r4, #0
    1dc2:	d1f0      	bne.n	1da6 <pm_state_notify+0x26>
	__asm__ volatile(
    1dc4:	f386 8811 	msr	BASEPRI, r6
    1dc8:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    1dcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1dd0:	20000520 	.word	0x20000520
    1dd4:	20000528 	.word	0x20000528
    1dd8:	20000740 	.word	0x20000740

00001ddc <atomic_clear_bit.constprop.0>:
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1ddc:	0942      	lsrs	r2, r0, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
    1dde:	2301      	movs	r3, #1
    1de0:	f000 001f 	and.w	r0, r0, #31
    1de4:	fa03 f000 	lsl.w	r0, r3, r0
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1de8:	4b07      	ldr	r3, [pc, #28]	; (1e08 <atomic_clear_bit.constprop.0+0x2c>)
    1dea:	f3bf 8f5b 	dmb	ish
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1dee:	43c0      	mvns	r0, r0
    1df0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1df4:	e853 2f00 	ldrex	r2, [r3]
    1df8:	4002      	ands	r2, r0
    1dfa:	e843 2100 	strex	r1, r2, [r3]
    1dfe:	2900      	cmp	r1, #0
    1e00:	d1f8      	bne.n	1df4 <atomic_clear_bit.constprop.0+0x18>
    1e02:	f3bf 8f5b 	dmb	ish
}
    1e06:	4770      	bx	lr
    1e08:	20000534 	.word	0x20000534

00001e0c <pm_system_resume>:

void pm_system_resume(void)
{
    1e0c:	b530      	push	{r4, r5, lr}
	uint8_t id = _current_cpu->id;
    1e0e:	4b1d      	ldr	r3, [pc, #116]	; (1e84 <pm_system_resume+0x78>)
    1e10:	7d1c      	ldrb	r4, [r3, #20]
    1e12:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    1e16:	f004 031f 	and.w	r3, r4, #31
    1e1a:	2201      	movs	r2, #1
    1e1c:	409a      	lsls	r2, r3
    1e1e:	4b1a      	ldr	r3, [pc, #104]	; (1e88 <pm_system_resume+0x7c>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1e20:	0961      	lsrs	r1, r4, #5
{
    1e22:	b085      	sub	sp, #20
    1e24:	43d0      	mvns	r0, r2
    1e26:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    1e2a:	e853 1f00 	ldrex	r1, [r3]
    1e2e:	ea01 0500 	and.w	r5, r1, r0
    1e32:	e843 5c00 	strex	ip, r5, [r3]
    1e36:	f1bc 0f00 	cmp.w	ip, #0
    1e3a:	d1f6      	bne.n	1e2a <pm_system_resume+0x1e>
    1e3c:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    1e40:	4211      	tst	r1, r2
    1e42:	d017      	beq.n	1e74 <pm_system_resume+0x68>
		exit_pos_ops(z_cpus_pm_state[id]);
    1e44:	4d11      	ldr	r5, [pc, #68]	; (1e8c <pm_system_resume+0x80>)
    1e46:	220c      	movs	r2, #12
    1e48:	fb02 5204 	mla	r2, r2, r4, r5
    1e4c:	ca07      	ldmia	r2, {r0, r1, r2}
    1e4e:	ab01      	add	r3, sp, #4
    1e50:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    1e54:	4a0e      	ldr	r2, [pc, #56]	; (1e90 <pm_system_resume+0x84>)
    1e56:	b17a      	cbz	r2, 1e78 <pm_system_resume+0x6c>
		pm_power_state_exit_post_ops(info);
    1e58:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    1e5c:	f004 fc5b 	bl	6716 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
    1e60:	2000      	movs	r0, #0
    1e62:	f7ff ff8d 	bl	1d80 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    1e66:	230c      	movs	r3, #12
    1e68:	435c      	muls	r4, r3
    1e6a:	192a      	adds	r2, r5, r4
    1e6c:	2300      	movs	r3, #0
    1e6e:	512b      	str	r3, [r5, r4]
    1e70:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    1e74:	b005      	add	sp, #20
    1e76:	bd30      	pop	{r4, r5, pc}
    1e78:	f382 8811 	msr	BASEPRI, r2
    1e7c:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    1e80:	e7ee      	b.n	1e60 <pm_system_resume+0x54>
    1e82:	bf00      	nop
    1e84:	20000740 	.word	0x20000740
    1e88:	20000538 	.word	0x20000538
    1e8c:	20000528 	.word	0x20000528
    1e90:	00006717 	.word	0x00006717

00001e94 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    1e94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    1e98:	4b35      	ldr	r3, [pc, #212]	; (1f70 <pm_system_suspend+0xdc>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1e9a:	4a36      	ldr	r2, [pc, #216]	; (1f74 <pm_system_suspend+0xe0>)
    1e9c:	7d1c      	ldrb	r4, [r3, #20]
    1e9e:	f3bf 8f5b 	dmb	ish
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    1ea2:	0963      	lsrs	r3, r4, #5
    1ea4:	ea4f 0983 	mov.w	r9, r3, lsl #2
    1ea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1eac:	4d32      	ldr	r5, [pc, #200]	; (1f78 <pm_system_suspend+0xe4>)
    1eae:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    1eb2:	f004 081f 	and.w	r8, r4, #31
    1eb6:	fa43 f308 	asr.w	r3, r3, r8

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    1eba:	f013 0f01 	tst.w	r3, #1
{
    1ebe:	b085      	sub	sp, #20
    1ec0:	4607      	mov	r7, r0
	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    1ec2:	d10a      	bne.n	1eda <pm_system_suspend+0x46>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
    1ec4:	4601      	mov	r1, r0
    1ec6:	4620      	mov	r0, r4
    1ec8:	f000 f876 	bl	1fb8 <pm_policy_next_state>
		if (info != NULL) {
    1ecc:	b128      	cbz	r0, 1eda <pm_system_suspend+0x46>
			z_cpus_pm_state[id] = *info;
    1ece:	c807      	ldmia	r0, {r0, r1, r2}
    1ed0:	230c      	movs	r3, #12
    1ed2:	fb03 5304 	mla	r3, r3, r4, r5
    1ed6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    1eda:	230c      	movs	r3, #12
    1edc:	4363      	muls	r3, r4
    1ede:	18ea      	adds	r2, r5, r3
    1ee0:	5cee      	ldrb	r6, [r5, r3]
    1ee2:	b936      	cbnz	r6, 1ef2 <pm_system_suspend+0x5e>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
    1ee4:	4620      	mov	r0, r4
    1ee6:	f7ff ff79 	bl	1ddc <atomic_clear_bit.constprop.0>
		ret = false;
    1eea:	4630      	mov	r0, r6
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    1eec:	b005      	add	sp, #20
    1eee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (ticks != K_TICKS_FOREVER) {
    1ef2:	1c7b      	adds	r3, r7, #1
    1ef4:	d00f      	beq.n	1f16 <pm_system_suspend+0x82>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    1ef6:	f8d2 c008 	ldr.w	ip, [r2, #8]
    1efa:	4820      	ldr	r0, [pc, #128]	; (1f7c <pm_system_suspend+0xe8>)
    1efc:	4a20      	ldr	r2, [pc, #128]	; (1f80 <pm_system_suspend+0xec>)
    1efe:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    1f02:	2100      	movs	r1, #0
    1f04:	2300      	movs	r3, #0
    1f06:	fbec 0106 	umlal	r0, r1, ip, r6
    1f0a:	f7fe fd07 	bl	91c <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    1f0e:	2101      	movs	r1, #1
    1f10:	1a38      	subs	r0, r7, r0
    1f12:	f005 fd3f 	bl	7994 <z_set_timeout_expiry>
	k_sched_lock();
    1f16:	f003 fd09 	bl	592c <k_sched_lock>
	pm_state_notify(true);
    1f1a:	2001      	movs	r0, #1
    1f1c:	f7ff ff30 	bl	1d80 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1f20:	f3bf 8f5b 	dmb	ish
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    1f24:	2301      	movs	r3, #1
    1f26:	fa03 f808 	lsl.w	r8, r3, r8
    1f2a:	4b16      	ldr	r3, [pc, #88]	; (1f84 <pm_system_suspend+0xf0>)
    1f2c:	4499      	add	r9, r3
    1f2e:	e859 3f00 	ldrex	r3, [r9]
    1f32:	ea43 0308 	orr.w	r3, r3, r8
    1f36:	e849 3200 	strex	r2, r3, [r9]
    1f3a:	2a00      	cmp	r2, #0
    1f3c:	d1f7      	bne.n	1f2e <pm_system_suspend+0x9a>
    1f3e:	f3bf 8f5b 	dmb	ish
	pm_state_set(z_cpus_pm_state[id]);
    1f42:	230c      	movs	r3, #12
    1f44:	fb03 5504 	mla	r5, r3, r4, r5
    1f48:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    1f4c:	ab01      	add	r3, sp, #4
    1f4e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    1f52:	4a0d      	ldr	r2, [pc, #52]	; (1f88 <pm_system_suspend+0xf4>)
    1f54:	b11a      	cbz	r2, 1f5e <pm_system_suspend+0xca>
		pm_power_state_set(info);
    1f56:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    1f5a:	f004 fbc9 	bl	66f0 <pm_power_state_set>
	pm_system_resume();
    1f5e:	f7ff ff55 	bl	1e0c <pm_system_resume>
	atomic_clear_bit(z_cpus_pm_state_forced, id);
    1f62:	4620      	mov	r0, r4
    1f64:	f7ff ff3a 	bl	1ddc <atomic_clear_bit.constprop.0>
	k_sched_unlock();
    1f68:	f003 feae 	bl	5cc8 <k_sched_unlock>
	bool ret = true;
    1f6c:	2001      	movs	r0, #1
    1f6e:	e7bd      	b.n	1eec <pm_system_suspend+0x58>
    1f70:	20000740 	.word	0x20000740
    1f74:	20000534 	.word	0x20000534
    1f78:	20000528 	.word	0x20000528
    1f7c:	000f423f 	.word	0x000f423f
    1f80:	000f4240 	.word	0x000f4240
    1f84:	20000538 	.word	0x20000538
    1f88:	000066f1 	.word	0x000066f1

00001f8c <pm_constraint_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1f8c:	4b05      	ldr	r3, [pc, #20]	; (1fa4 <pm_constraint_get+0x18>)
    1f8e:	f3bf 8f5b 	dmb	ish
    1f92:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    1f96:	f3bf 8f5b 	dmb	ish
__weak bool pm_constraint_get(enum pm_state state)
{
	__ASSERT(state < PM_STATE_COUNT, "Invalid power state!");

	return (atomic_get(&power_state_disable_count[state]) == 0);
}
    1f9a:	fab0 f080 	clz	r0, r0
    1f9e:	0940      	lsrs	r0, r0, #5
    1fa0:	4770      	bx	lr
    1fa2:	bf00      	nop
    1fa4:	2000053c 	.word	0x2000053c

00001fa8 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    1fa8:	b908      	cbnz	r0, 1fae <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    1faa:	4b02      	ldr	r3, [pc, #8]	; (1fb4 <pm_state_cpu_get_all+0xc>)
    1fac:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    1fae:	2000      	movs	r0, #0
    1fb0:	4770      	bx	lr
    1fb2:	bf00      	nop
    1fb4:	00007e28 	.word	0x00007e28

00001fb8 <pm_policy_next_state>:

#include <logging/log.h>
LOG_MODULE_DECLARE(pm, CONFIG_PM_LOG_LEVEL);

const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    1fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1fbc:	b085      	sub	sp, #20
    1fbe:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    1fc0:	a903      	add	r1, sp, #12
    1fc2:	f7ff fff1 	bl	1fa8 <pm_state_cpu_get_all>
    1fc6:	f8df a074 	ldr.w	sl, [pc, #116]	; 203c <pm_policy_next_state+0x84>
    1fca:	f8df 8074 	ldr.w	r8, [pc, #116]	; 2040 <pm_policy_next_state+0x88>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    1fce:	1e44      	subs	r4, r0, #1
    1fd0:	b224      	sxth	r4, r4
    1fd2:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    1fd6:	f04f 0900 	mov.w	r9, #0
    1fda:	1c63      	adds	r3, r4, #1
    1fdc:	d104      	bne.n	1fe8 <pm_policy_next_state+0x30>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    1fde:	2500      	movs	r5, #0
}
    1fe0:	4628      	mov	r0, r5
    1fe2:	b005      	add	sp, #20
    1fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
    1fe8:	9a03      	ldr	r2, [sp, #12]
    1fea:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    1fee:	eb02 0583 	add.w	r5, r2, r3, lsl #2
		if (!pm_constraint_get(state->state)) {
    1ff2:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
    1ff6:	f7ff ffc9 	bl	1f8c <pm_constraint_get>
    1ffa:	b1e0      	cbz	r0, 2036 <pm_policy_next_state+0x7e>
    1ffc:	6868      	ldr	r0, [r5, #4]
    1ffe:	f04f 0b00 	mov.w	fp, #0
    2002:	46d4      	mov	ip, sl
    2004:	4659      	mov	r1, fp
    2006:	fbe0 c107 	umlal	ip, r1, r0, r7
    200a:	4642      	mov	r2, r8
    200c:	464b      	mov	r3, r9
    200e:	4660      	mov	r0, ip
    2010:	f7fe fc84 	bl	91c <__aeabi_uldivmod>
    2014:	9001      	str	r0, [sp, #4]
    2016:	68a8      	ldr	r0, [r5, #8]
    2018:	46d4      	mov	ip, sl
    201a:	4659      	mov	r1, fp
    201c:	fbe0 c107 	umlal	ip, r1, r0, r7
    2020:	4642      	mov	r2, r8
    2022:	464b      	mov	r3, r9
    2024:	4660      	mov	r0, ip
    2026:	f7fe fc79 	bl	91c <__aeabi_uldivmod>
		if ((ticks == K_TICKS_FOREVER) ||
    202a:	1c72      	adds	r2, r6, #1
    202c:	d0d8      	beq.n	1fe0 <pm_policy_next_state+0x28>
		    (ticks >= (min_residency + exit_latency))) {
    202e:	9b01      	ldr	r3, [sp, #4]
    2030:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    2032:	42b0      	cmp	r0, r6
    2034:	d9d4      	bls.n	1fe0 <pm_policy_next_state+0x28>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    2036:	3c01      	subs	r4, #1
    2038:	b224      	sxth	r4, r4
    203a:	e7ce      	b.n	1fda <pm_policy_next_state+0x22>
    203c:	000f423f 	.word	0x000f423f
    2040:	000f4240 	.word	0x000f4240

00002044 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    2044:	4901      	ldr	r1, [pc, #4]	; (204c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    2046:	2210      	movs	r2, #16
	str	r2, [r1]
    2048:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    204a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    204c:	e000ed10 	.word	0xe000ed10

00002050 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    2050:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    2052:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    2054:	f380 8811 	msr	BASEPRI, r0
	isb
    2058:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    205c:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    2060:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    2062:	b662      	cpsie	i
	isb
    2064:	f3bf 8f6f 	isb	sy

	bx	lr
    2068:	4770      	bx	lr
    206a:	bf00      	nop

0000206c <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    206c:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    206e:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    2070:	f381 8811 	msr	BASEPRI, r1

	wfe
    2074:	bf20      	wfe

	msr	BASEPRI, r0
    2076:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    207a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    207c:	4770      	bx	lr
    207e:	bf00      	nop

00002080 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    2080:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    2082:	2b00      	cmp	r3, #0
    2084:	db08      	blt.n	2098 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2086:	2201      	movs	r2, #1
    2088:	f000 001f 	and.w	r0, r0, #31
    208c:	fa02 f000 	lsl.w	r0, r2, r0
    2090:	095b      	lsrs	r3, r3, #5
    2092:	4a02      	ldr	r2, [pc, #8]	; (209c <arch_irq_enable+0x1c>)
    2094:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    2098:	4770      	bx	lr
    209a:	bf00      	nop
    209c:	e000e100 	.word	0xe000e100

000020a0 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    20a0:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    20a2:	2b00      	cmp	r3, #0
    20a4:	db0d      	blt.n	20c2 <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    20a6:	2201      	movs	r2, #1
    20a8:	095b      	lsrs	r3, r3, #5
    20aa:	f000 001f 	and.w	r0, r0, #31
    20ae:	fa02 f000 	lsl.w	r0, r2, r0
    20b2:	3320      	adds	r3, #32
    20b4:	4a03      	ldr	r2, [pc, #12]	; (20c4 <arch_irq_disable+0x24>)
    20b6:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    20ba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    20be:	f3bf 8f6f 	isb	sy
}
    20c2:	4770      	bx	lr
    20c4:	e000e100 	.word	0xe000e100

000020c8 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    20c8:	4b05      	ldr	r3, [pc, #20]	; (20e0 <arch_irq_is_enabled+0x18>)
    20ca:	0942      	lsrs	r2, r0, #5
    20cc:	f000 001f 	and.w	r0, r0, #31
    20d0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    20d4:	2301      	movs	r3, #1
    20d6:	fa03 f000 	lsl.w	r0, r3, r0
}
    20da:	4010      	ands	r0, r2
    20dc:	4770      	bx	lr
    20de:	bf00      	nop
    20e0:	e000e100 	.word	0xe000e100

000020e4 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    20e4:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    20e6:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    20e8:	bfa8      	it	ge
    20ea:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    20ee:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    20f2:	bfb8      	it	lt
    20f4:	4b06      	ldrlt	r3, [pc, #24]	; (2110 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    20f6:	ea4f 1141 	mov.w	r1, r1, lsl #5
    20fa:	bfac      	ite	ge
    20fc:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2100:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2104:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2106:	bfb4      	ite	lt
    2108:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    210a:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    210e:	4770      	bx	lr
    2110:	e000ed14 	.word	0xe000ed14

00002114 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    2114:	bf30      	wfi
    b z_SysNmiOnReset
    2116:	f7ff bffd 	b.w	2114 <z_SysNmiOnReset>
    211a:	bf00      	nop

0000211c <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    211c:	4a0f      	ldr	r2, [pc, #60]	; (215c <z_arm_prep_c+0x40>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    211e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2120:	4b0f      	ldr	r3, [pc, #60]	; (2160 <z_arm_prep_c+0x44>)
    2122:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    2126:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    2128:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    212c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    2130:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    2134:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    2138:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
    213c:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    2140:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    2144:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
    2148:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    214c:	f002 fff2 	bl	5134 <z_bss_zero>
	z_data_copy();
    2150:	f003 feee 	bl	5f30 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    2154:	f000 f9ca 	bl	24ec <z_arm_interrupt_init>
	z_cstart();
    2158:	f002 fff6 	bl	5148 <z_cstart>
    215c:	00000000 	.word	0x00000000
    2160:	e000ed00 	.word	0xe000ed00

00002164 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    2164:	4a09      	ldr	r2, [pc, #36]	; (218c <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    2166:	490a      	ldr	r1, [pc, #40]	; (2190 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    2168:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    216a:	6809      	ldr	r1, [r1, #0]
    216c:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    216e:	4909      	ldr	r1, [pc, #36]	; (2194 <arch_swap+0x30>)
	_current->arch.basepri = key;
    2170:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2172:	684b      	ldr	r3, [r1, #4]
    2174:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2178:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    217a:	2300      	movs	r3, #0
    217c:	f383 8811 	msr	BASEPRI, r3
    2180:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    2184:	6893      	ldr	r3, [r2, #8]
}
    2186:	6f98      	ldr	r0, [r3, #120]	; 0x78
    2188:	4770      	bx	lr
    218a:	bf00      	nop
    218c:	20000740 	.word	0x20000740
    2190:	000080ac 	.word	0x000080ac
    2194:	e000ed00 	.word	0xe000ed00

00002198 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    2198:	4912      	ldr	r1, [pc, #72]	; (21e4 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    219a:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    219c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    21a0:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    21a2:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    21a6:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    21aa:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    21ac:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    21b0:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    21b4:	4f0c      	ldr	r7, [pc, #48]	; (21e8 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    21b6:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    21ba:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    21bc:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    21be:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    21c0:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    21c2:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    21c4:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    21c6:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    21ca:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    21cc:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    21ce:	f000 f9cf 	bl	2570 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    21d2:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    21d6:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    21da:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    21de:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    21e2:	4770      	bx	lr
    ldr r1, =_kernel
    21e4:	20000740 	.word	0x20000740
    ldr v4, =_SCS_ICSR
    21e8:	e000ed04 	.word	0xe000ed04

000021ec <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    21ec:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    21f0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    21f2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    21f6:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    21fa:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    21fc:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    2200:	2902      	cmp	r1, #2
    beq _oops
    2202:	d0ff      	beq.n	2204 <_oops>

00002204 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    2204:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    2206:	f004 fa25 	bl	6654 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    220a:	bd01      	pop	{r0, pc}

0000220c <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    220c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    2210:	9b00      	ldr	r3, [sp, #0]
    2212:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    2216:	490a      	ldr	r1, [pc, #40]	; (2240 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    2218:	9b01      	ldr	r3, [sp, #4]
    221a:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    221e:	9b02      	ldr	r3, [sp, #8]
    2220:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    2224:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    2228:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    222c:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    2230:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    2234:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    2236:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    2238:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    223a:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    223c:	4770      	bx	lr
    223e:	bf00      	nop
    2240:	00006479 	.word	0x00006479

00002244 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    2244:	4a09      	ldr	r2, [pc, #36]	; (226c <z_check_thread_stack_fail+0x28>)
{
    2246:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    2248:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    224a:	b170      	cbz	r0, 226a <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    224c:	f113 0f16 	cmn.w	r3, #22
    2250:	6e40      	ldr	r0, [r0, #100]	; 0x64
    2252:	d005      	beq.n	2260 <z_check_thread_stack_fail+0x1c>
    2254:	f1a0 0220 	sub.w	r2, r0, #32
    2258:	429a      	cmp	r2, r3
    225a:	d805      	bhi.n	2268 <z_check_thread_stack_fail+0x24>
    225c:	4283      	cmp	r3, r0
    225e:	d203      	bcs.n	2268 <z_check_thread_stack_fail+0x24>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    2260:	4281      	cmp	r1, r0
    2262:	bf28      	it	cs
    2264:	2000      	movcs	r0, #0
    2266:	4770      	bx	lr
    2268:	2000      	movs	r0, #0
}
    226a:	4770      	bx	lr
    226c:	20000740 	.word	0x20000740

00002270 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    2270:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    2272:	4b09      	ldr	r3, [pc, #36]	; (2298 <arch_switch_to_main_thread+0x28>)
    2274:	6098      	str	r0, [r3, #8]
{
    2276:	460d      	mov	r5, r1
    2278:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    227a:	f000 f979 	bl	2570 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    227e:	4620      	mov	r0, r4
    2280:	f385 8809 	msr	PSP, r5
    2284:	2100      	movs	r1, #0
    2286:	b663      	cpsie	if
    2288:	f381 8811 	msr	BASEPRI, r1
    228c:	f3bf 8f6f 	isb	sy
    2290:	2200      	movs	r2, #0
    2292:	2300      	movs	r3, #0
    2294:	f004 f8f0 	bl	6478 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    2298:	20000740 	.word	0x20000740

0000229c <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    229c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    229e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    22a0:	4a0b      	ldr	r2, [pc, #44]	; (22d0 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    22a2:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    22a4:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    22a6:	bf1e      	ittt	ne
	movne	r1, #0
    22a8:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    22aa:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    22ac:	f005 fa41 	blne	7732 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    22b0:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    22b2:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    22b6:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    22ba:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    22be:	4905      	ldr	r1, [pc, #20]	; (22d4 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    22c0:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    22c2:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    22c4:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    22c6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    22ca:	4903      	ldr	r1, [pc, #12]	; (22d8 <_isr_wrapper+0x3c>)
	bx r1
    22cc:	4708      	bx	r1
    22ce:	0000      	.short	0x0000
	ldr r2, =_kernel
    22d0:	20000740 	.word	0x20000740
	ldr r1, =_sw_isr_table
    22d4:	00007c2c 	.word	0x00007c2c
	ldr r1, =z_arm_int_exit
    22d8:	000022dd 	.word	0x000022dd

000022dc <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    22dc:	4b04      	ldr	r3, [pc, #16]	; (22f0 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    22de:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    22e0:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    22e2:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    22e4:	d003      	beq.n	22ee <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    22e6:	4903      	ldr	r1, [pc, #12]	; (22f4 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    22e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    22ec:	600a      	str	r2, [r1, #0]

000022ee <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    22ee:	4770      	bx	lr
	ldr r3, =_kernel
    22f0:	20000740 	.word	0x20000740
	ldr r1, =_SCS_ICSR
    22f4:	e000ed04 	.word	0xe000ed04

000022f8 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    22f8:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    22fa:	4b19      	ldr	r3, [pc, #100]	; (2360 <mem_manage_fault+0x68>)
{
    22fc:	4614      	mov	r4, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    22fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    2300:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    2302:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
    2304:	4605      	mov	r5, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    2306:	0790      	lsls	r0, r2, #30
    2308:	d519      	bpl.n	233e <mem_manage_fault+0x46>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    230a:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    230c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    230e:	0612      	lsls	r2, r2, #24
    2310:	d515      	bpl.n	233e <mem_manage_fault+0x46>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    2312:	b119      	cbz	r1, 231c <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    2314:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2316:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    231a:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    231c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    231e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    2320:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2322:	06d1      	lsls	r1, r2, #27
    2324:	d40e      	bmi.n	2344 <mem_manage_fault+0x4c>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    2326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    2328:	079a      	lsls	r2, r3, #30
    232a:	d40b      	bmi.n	2344 <mem_manage_fault+0x4c>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    232c:	2000      	movs	r0, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    232e:	4a0c      	ldr	r2, [pc, #48]	; (2360 <mem_manage_fault+0x68>)
    2330:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2332:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    2336:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    2338:	2300      	movs	r3, #0
    233a:	7023      	strb	r3, [r4, #0]

	return reason;
}
    233c:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t mmfar = -EINVAL;
    233e:	f06f 0015 	mvn.w	r0, #21
    2342:	e7eb      	b.n	231c <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    2344:	4b06      	ldr	r3, [pc, #24]	; (2360 <mem_manage_fault+0x68>)
    2346:	685b      	ldr	r3, [r3, #4]
    2348:	051b      	lsls	r3, r3, #20
    234a:	d5ef      	bpl.n	232c <mem_manage_fault+0x34>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    234c:	4629      	mov	r1, r5
    234e:	f7ff ff79 	bl	2244 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    2352:	2800      	cmp	r0, #0
    2354:	d0ea      	beq.n	232c <mem_manage_fault+0x34>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    2356:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    235a:	2002      	movs	r0, #2
    235c:	e7e7      	b.n	232e <mem_manage_fault+0x36>
    235e:	bf00      	nop
    2360:	e000ed00 	.word	0xe000ed00

00002364 <bus_fault.constprop.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    2364:	4b0d      	ldr	r3, [pc, #52]	; (239c <bus_fault.constprop.0+0x38>)
    2366:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    2368:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    236a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    236c:	0592      	lsls	r2, r2, #22
    236e:	d508      	bpl.n	2382 <bus_fault.constprop.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    2370:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    2372:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2374:	0412      	lsls	r2, r2, #16
    2376:	d504      	bpl.n	2382 <bus_fault.constprop.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    2378:	b118      	cbz	r0, 2382 <bus_fault.constprop.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    237a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    237c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    2380:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    2382:	4b06      	ldr	r3, [pc, #24]	; (239c <bus_fault.constprop.0+0x38>)
    2384:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    2386:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2388:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    238a:	bf58      	it	pl
    238c:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    238e:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    2390:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    2392:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    2396:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    2398:	7008      	strb	r0, [r1, #0]

	return reason;
}
    239a:	4770      	bx	lr
    239c:	e000ed00 	.word	0xe000ed00

000023a0 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    23a0:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    23a2:	4b48      	ldr	r3, [pc, #288]	; (24c4 <z_arm_fault+0x124>)
    23a4:	685b      	ldr	r3, [r3, #4]
{
    23a6:	b08a      	sub	sp, #40	; 0x28
    23a8:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    23aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
    23ae:	2600      	movs	r6, #0
    23b0:	f386 8811 	msr	BASEPRI, r6
    23b4:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    23b8:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
    23bc:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
    23c0:	d111      	bne.n	23e6 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    23c2:	f002 010c 	and.w	r1, r2, #12
    23c6:	2908      	cmp	r1, #8
    23c8:	d00d      	beq.n	23e6 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    23ca:	0711      	lsls	r1, r2, #28
    23cc:	d401      	bmi.n	23d2 <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
    23ce:	4605      	mov	r5, r0
			*nested_exc = true;
    23d0:	2601      	movs	r6, #1
	*recoverable = false;
    23d2:	2200      	movs	r2, #0
	switch (fault) {
    23d4:	3b03      	subs	r3, #3
	*recoverable = false;
    23d6:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    23da:	2b03      	cmp	r3, #3
    23dc:	d86b      	bhi.n	24b6 <z_arm_fault+0x116>
    23de:	e8df f003 	tbb	[pc, r3]
    23e2:	5504      	.short	0x5504
    23e4:	5d59      	.short	0x5d59
		return NULL;
    23e6:	4635      	mov	r5, r6
    23e8:	e7f3      	b.n	23d2 <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    23ea:	4b36      	ldr	r3, [pc, #216]	; (24c4 <z_arm_fault+0x124>)
    23ec:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    23ee:	f014 0402 	ands.w	r4, r4, #2
    23f2:	d160      	bne.n	24b6 <z_arm_fault+0x116>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    23f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    23f6:	2a00      	cmp	r2, #0
    23f8:	db15      	blt.n	2426 <z_arm_fault+0x86>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    23fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    23fc:	0052      	lsls	r2, r2, #1
    23fe:	d512      	bpl.n	2426 <z_arm_fault+0x86>
	uint16_t fault_insn = *(ret_addr - 1);
    2400:	69aa      	ldr	r2, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    2402:	f832 1c02 	ldrh.w	r1, [r2, #-2]
    2406:	f64d 7202 	movw	r2, #57090	; 0xdf02
    240a:	4291      	cmp	r1, r2
    240c:	d00a      	beq.n	2424 <z_arm_fault+0x84>
		} else if (SCB_MMFSR != 0) {
    240e:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    2412:	b30a      	cbz	r2, 2458 <z_arm_fault+0xb8>
			reason = mem_manage_fault(esf, 1, recoverable);
    2414:	f10d 0207 	add.w	r2, sp, #7
    2418:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    241a:	4628      	mov	r0, r5
    241c:	f7ff ff6c 	bl	22f8 <mem_manage_fault>
		reason = bus_fault(esf, 0, recoverable);
    2420:	4604      	mov	r4, r0
		break;
    2422:	e000      	b.n	2426 <z_arm_fault+0x86>
			reason = esf->basic.r0;
    2424:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    2426:	f89d 3007 	ldrb.w	r3, [sp, #7]
    242a:	b99b      	cbnz	r3, 2454 <z_arm_fault+0xb4>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    242c:	2220      	movs	r2, #32
    242e:	4629      	mov	r1, r5
    2430:	a802      	add	r0, sp, #8
    2432:	f004 f944 	bl	66be <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    2436:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2438:	2e00      	cmp	r6, #0
    243a:	d03e      	beq.n	24ba <z_arm_fault+0x11a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    243c:	f3c3 0208 	ubfx	r2, r3, #0, #9
    2440:	b922      	cbnz	r2, 244c <z_arm_fault+0xac>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    2442:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    2446:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    244a:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    244c:	a902      	add	r1, sp, #8
    244e:	4620      	mov	r0, r4
    2450:	f004 f8fe 	bl	6650 <z_arm_fatal_error>
}
    2454:	b00a      	add	sp, #40	; 0x28
    2456:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
    2458:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
    245c:	b12a      	cbz	r2, 246a <z_arm_fault+0xca>
			reason = bus_fault(esf, 1, recoverable);
    245e:	f10d 0107 	add.w	r1, sp, #7
    2462:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    2464:	f7ff ff7e 	bl	2364 <bus_fault.constprop.0>
    2468:	e7da      	b.n	2420 <z_arm_fault+0x80>
		} else if (SCB_UFSR != 0) {
    246a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    246c:	b292      	uxth	r2, r2
    246e:	2a00      	cmp	r2, #0
    2470:	d0d9      	beq.n	2426 <z_arm_fault+0x86>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    2472:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    2474:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    2476:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    2478:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    247a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    247c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    247e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2480:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    2484:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    2488:	629a      	str	r2, [r3, #40]	; 0x28
	return reason;
    248a:	e7cc      	b.n	2426 <z_arm_fault+0x86>
		reason = mem_manage_fault(esf, 0, recoverable);
    248c:	f10d 0207 	add.w	r2, sp, #7
    2490:	2100      	movs	r1, #0
    2492:	e7c2      	b.n	241a <z_arm_fault+0x7a>
		reason = bus_fault(esf, 0, recoverable);
    2494:	f10d 0107 	add.w	r1, sp, #7
    2498:	2000      	movs	r0, #0
    249a:	e7e3      	b.n	2464 <z_arm_fault+0xc4>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    249c:	4b09      	ldr	r3, [pc, #36]	; (24c4 <z_arm_fault+0x124>)
    249e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    24a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    24a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    24a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    24a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    24a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    24aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    24ac:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    24b0:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    24b4:	629a      	str	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    24b6:	2400      	movs	r4, #0
    24b8:	e7b5      	b.n	2426 <z_arm_fault+0x86>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    24ba:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    24be:	f023 0301 	bic.w	r3, r3, #1
    24c2:	e7c2      	b.n	244a <z_arm_fault+0xaa>
    24c4:	e000ed00 	.word	0xe000ed00

000024c8 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    24c8:	4a02      	ldr	r2, [pc, #8]	; (24d4 <z_arm_fault_init+0xc>)
    24ca:	6953      	ldr	r3, [r2, #20]
    24cc:	f043 0310 	orr.w	r3, r3, #16
    24d0:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    24d2:	4770      	bx	lr
    24d4:	e000ed00 	.word	0xe000ed00

000024d8 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    24d8:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    24dc:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    24e0:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    24e2:	4672      	mov	r2, lr
	bl z_arm_fault
    24e4:	f7ff ff5c 	bl	23a0 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    24e8:	bd01      	pop	{r0, pc}
    24ea:	bf00      	nop

000024ec <z_arm_interrupt_init>:
    24ec:	4804      	ldr	r0, [pc, #16]	; (2500 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    24ee:	2300      	movs	r3, #0
    24f0:	2120      	movs	r1, #32
    24f2:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    24f4:	3301      	adds	r3, #1
    24f6:	2b27      	cmp	r3, #39	; 0x27
    24f8:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    24fc:	d1f9      	bne.n	24f2 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    24fe:	4770      	bx	lr
    2500:	e000e100 	.word	0xe000e100

00002504 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    2504:	f005 fa68 	bl	79d8 <z_arm_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2508:	2020      	movs	r0, #32
    msr BASEPRI, r0
    250a:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    250e:	4808      	ldr	r0, [pc, #32]	; (2530 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    2510:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    2514:	1840      	adds	r0, r0, r1
    msr PSP, r0
    2516:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    251a:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    251e:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    2520:	4308      	orrs	r0, r1
    msr CONTROL, r0
    2522:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    2526:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    252a:	f7ff fdf7 	bl	211c <z_arm_prep_c>
    252e:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    2530:	20001580 	.word	0x20001580

00002534 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    2534:	4b06      	ldr	r3, [pc, #24]	; (2550 <z_impl_k_thread_abort+0x1c>)
    2536:	689b      	ldr	r3, [r3, #8]
    2538:	4283      	cmp	r3, r0
    253a:	d107      	bne.n	254c <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    253c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    2540:	b123      	cbz	r3, 254c <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2542:	4a04      	ldr	r2, [pc, #16]	; (2554 <z_impl_k_thread_abort+0x20>)
    2544:	6853      	ldr	r3, [r2, #4]
    2546:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    254a:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    254c:	f003 bc8c 	b.w	5e68 <z_thread_abort>
    2550:	20000740 	.word	0x20000740
    2554:	e000ed00 	.word	0xe000ed00

00002558 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    2558:	4b02      	ldr	r3, [pc, #8]	; (2564 <z_arm_configure_static_mpu_regions+0xc>)
    255a:	4a03      	ldr	r2, [pc, #12]	; (2568 <z_arm_configure_static_mpu_regions+0x10>)
    255c:	4803      	ldr	r0, [pc, #12]	; (256c <z_arm_configure_static_mpu_regions+0x14>)
    255e:	2101      	movs	r1, #1
    2560:	f000 b86e 	b.w	2640 <arm_core_mpu_configure_static_mpu_regions>
    2564:	20010000 	.word	0x20010000
    2568:	20000000 	.word	0x20000000
    256c:	00007e28 	.word	0x00007e28

00002570 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    2570:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    2572:	4b05      	ldr	r3, [pc, #20]	; (2588 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    2574:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    2576:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    2578:	4a04      	ldr	r2, [pc, #16]	; (258c <z_arm_configure_dynamic_mpu_regions+0x1c>)
    257a:	2120      	movs	r1, #32
    257c:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    2580:	4618      	mov	r0, r3
    2582:	2101      	movs	r1, #1
    2584:	f000 b866 	b.w	2654 <arm_core_mpu_configure_dynamic_mpu_regions>
    2588:	20000558 	.word	0x20000558
    258c:	150b0000 	.word	0x150b0000

00002590 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    2590:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    2592:	4f1f      	ldr	r7, [pc, #124]	; (2610 <mpu_configure_regions+0x80>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    2594:	2600      	movs	r6, #0
    2596:	428e      	cmp	r6, r1
    2598:	db01      	blt.n	259e <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    259a:	4610      	mov	r0, r2
    259c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
    259e:	6844      	ldr	r4, [r0, #4]
    25a0:	b39c      	cbz	r4, 260a <mpu_configure_regions+0x7a>
		if (do_sanity_check &&
    25a2:	b153      	cbz	r3, 25ba <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    25a4:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    25a8:	ea14 0f0c 	tst.w	r4, ip
    25ac:	d118      	bne.n	25e0 <mpu_configure_regions+0x50>
		&&
    25ae:	2c1f      	cmp	r4, #31
    25b0:	d916      	bls.n	25e0 <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
    25b2:	6805      	ldr	r5, [r0, #0]
		&&
    25b4:	ea1c 0f05 	tst.w	ip, r5
    25b8:	d112      	bne.n	25e0 <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    25ba:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    25bc:	6805      	ldr	r5, [r0, #0]
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    25be:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    25c2:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
    25c4:	d90f      	bls.n	25e6 <mpu_configure_regions+0x56>
	if (size > (1UL << 31)) {
    25c6:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    25ca:	d80e      	bhi.n	25ea <mpu_configure_regions+0x5a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    25cc:	3c01      	subs	r4, #1
    25ce:	fab4 f484 	clz	r4, r4
    25d2:	f1c4 041f 	rsb	r4, r4, #31
    25d6:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    25d8:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    25da:	ea4c 0404 	orr.w	r4, ip, r4
    25de:	d906      	bls.n	25ee <mpu_configure_regions+0x5e>
			return -EINVAL;
    25e0:	f06f 0215 	mvn.w	r2, #21
    25e4:	e7d9      	b.n	259a <mpu_configure_regions+0xa>
		return REGION_32B;
    25e6:	2408      	movs	r4, #8
    25e8:	e7f6      	b.n	25d8 <mpu_configure_regions+0x48>
		return REGION_4G;
    25ea:	243e      	movs	r4, #62	; 0x3e
    25ec:	e7f4      	b.n	25d8 <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    25ee:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    25f2:	4315      	orrs	r5, r2
    25f4:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    25f8:	f044 0401 	orr.w	r4, r4, #1
    25fc:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2600:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
		reg_index++;
    2604:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    2606:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
    260a:	3601      	adds	r6, #1
    260c:	300c      	adds	r0, #12
    260e:	e7c2      	b.n	2596 <mpu_configure_regions+0x6>
    2610:	e000ed00 	.word	0xe000ed00

00002614 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    2614:	4b04      	ldr	r3, [pc, #16]	; (2628 <arm_core_mpu_enable+0x14>)
    2616:	2205      	movs	r2, #5
    2618:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    261c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2620:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    2624:	4770      	bx	lr
    2626:	bf00      	nop
    2628:	e000ed00 	.word	0xe000ed00

0000262c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    262c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    2630:	4b02      	ldr	r3, [pc, #8]	; (263c <arm_core_mpu_disable+0x10>)
    2632:	2200      	movs	r2, #0
    2634:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    2638:	4770      	bx	lr
    263a:	bf00      	nop
    263c:	e000ed00 	.word	0xe000ed00

00002640 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    2640:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    2642:	4c03      	ldr	r4, [pc, #12]	; (2650 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    2644:	2301      	movs	r3, #1
    2646:	7822      	ldrb	r2, [r4, #0]
    2648:	f7ff ffa2 	bl	2590 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    264c:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    264e:	bd10      	pop	{r4, pc}
    2650:	20000792 	.word	0x20000792

00002654 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    2654:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    2656:	4a09      	ldr	r2, [pc, #36]	; (267c <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    2658:	2300      	movs	r3, #0
    265a:	7812      	ldrb	r2, [r2, #0]
    265c:	f7ff ff98 	bl	2590 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    2660:	f110 0f16 	cmn.w	r0, #22
    2664:	d002      	beq.n	266c <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    2666:	4a06      	ldr	r2, [pc, #24]	; (2680 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    2668:	2807      	cmp	r0, #7
    266a:	dd00      	ble.n	266e <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    266c:	bd08      	pop	{r3, pc}
    266e:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    2672:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
    2676:	3001      	adds	r0, #1
    2678:	e7f6      	b.n	2668 <arm_core_mpu_configure_dynamic_mpu_regions+0x14>
    267a:	bf00      	nop
    267c:	20000792 	.word	0x20000792
    2680:	e000ed00 	.word	0xe000ed00

00002684 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    2684:	4914      	ldr	r1, [pc, #80]	; (26d8 <z_arm_mpu_init+0x54>)
    2686:	6808      	ldr	r0, [r1, #0]
    2688:	2808      	cmp	r0, #8
{
    268a:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    268c:	d821      	bhi.n	26d2 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    268e:	f7ff ffcd 	bl	262c <arm_core_mpu_disable>
    2692:	4c12      	ldr	r4, [pc, #72]	; (26dc <z_arm_mpu_init+0x58>)
    2694:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2696:	2200      	movs	r2, #0
    2698:	4290      	cmp	r0, r2
    269a:	f101 010c 	add.w	r1, r1, #12
    269e:	d105      	bne.n	26ac <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    26a0:	4b0f      	ldr	r3, [pc, #60]	; (26e0 <z_arm_mpu_init+0x5c>)
    26a2:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    26a4:	f7ff ffb6 	bl	2614 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    26a8:	2000      	movs	r0, #0
}
    26aa:	bd10      	pop	{r4, pc}
    26ac:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    26b0:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    26b4:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    26b8:	4313      	orrs	r3, r2
    26ba:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    26be:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    26c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
    26c6:	f043 0301 	orr.w	r3, r3, #1
    26ca:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    26ce:	3201      	adds	r2, #1
    26d0:	e7e2      	b.n	2698 <z_arm_mpu_init+0x14>
		return -1;
    26d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    26d6:	e7e8      	b.n	26aa <z_arm_mpu_init+0x26>
    26d8:	00007e34 	.word	0x00007e34
    26dc:	e000ed00 	.word	0xe000ed00
    26e0:	20000792 	.word	0x20000792

000026e4 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    26e4:	4b01      	ldr	r3, [pc, #4]	; (26ec <__stdout_hook_install+0x8>)
    26e6:	6018      	str	r0, [r3, #0]
}
    26e8:	4770      	bx	lr
    26ea:	bf00      	nop
    26ec:	20000004 	.word	0x20000004

000026f0 <z_impl_zephyr_fputc>:

int z_impl_zephyr_fputc(int c, FILE *stream)
{
	return (stream == stdout || stream == stderr) ? _stdout_hook(c) : EOF;
    26f0:	3902      	subs	r1, #2
    26f2:	2901      	cmp	r1, #1
    26f4:	d802      	bhi.n	26fc <z_impl_zephyr_fputc+0xc>
    26f6:	4b03      	ldr	r3, [pc, #12]	; (2704 <z_impl_zephyr_fputc+0x14>)
    26f8:	681b      	ldr	r3, [r3, #0]
    26fa:	4718      	bx	r3
}
    26fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2700:	4770      	bx	lr
    2702:	bf00      	nop
    2704:	20000004 	.word	0x20000004

00002708 <printf>:

	return r;
}

int printf(const char *ZRESTRICT format, ...)
{
    2708:	b40f      	push	{r0, r1, r2, r3}
    270a:	b507      	push	{r0, r1, r2, lr}
    270c:	ab04      	add	r3, sp, #16
	va_list vargs;
	int     r;

	va_start(vargs, format);
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
    270e:	2102      	movs	r1, #2
{
    2710:	f853 2b04 	ldr.w	r2, [r3], #4
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
    2714:	4804      	ldr	r0, [pc, #16]	; (2728 <printf+0x20>)
	va_start(vargs, format);
    2716:	9301      	str	r3, [sp, #4]
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
    2718:	f7fe fcae 	bl	1078 <cbvprintf>
	va_end(vargs);

	return r;
}
    271c:	b003      	add	sp, #12
    271e:	f85d eb04 	ldr.w	lr, [sp], #4
    2722:	b004      	add	sp, #16
    2724:	4770      	bx	lr
    2726:	bf00      	nop
    2728:	000066ed 	.word	0x000066ed

0000272c <nordicsemi_nrf52_init>:
	__asm__ volatile(
    272c:	f04f 0220 	mov.w	r2, #32
    2730:	f3ef 8311 	mrs	r3, BASEPRI
    2734:	f382 8812 	msr	BASEPRI_MAX, r2
    2738:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    273c:	4a04      	ldr	r2, [pc, #16]	; (2750 <nordicsemi_nrf52_init+0x24>)
    273e:	2101      	movs	r1, #1
    2740:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
    2744:	f383 8811 	msr	BASEPRI, r3
    2748:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    274c:	2000      	movs	r0, #0
    274e:	4770      	bx	lr
    2750:	4001e000 	.word	0x4001e000

00002754 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    2754:	b120      	cbz	r0, 2760 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    2756:	4b03      	ldr	r3, [pc, #12]	; (2764 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    2758:	0180      	lsls	r0, r0, #6
    275a:	f043 0301 	orr.w	r3, r3, #1
    275e:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    2760:	4770      	bx	lr
    2762:	bf00      	nop
    2764:	00007e20 	.word	0x00007e20

00002768 <pwr_ctrl_init>:
	const char *port;
	uint32_t pin;
};

static int pwr_ctrl_init(const struct device *dev)
{
    2768:	b538      	push	{r3, r4, r5, lr}
	const struct pwr_ctrl_cfg *cfg = dev->config;
    276a:	6844      	ldr	r4, [r0, #4]
	const struct device *gpio;

	gpio = device_get_binding(cfg->port);
    276c:	6820      	ldr	r0, [r4, #0]
    276e:	f002 fc71 	bl	5054 <z_impl_device_get_binding>
	if (!gpio) {
    2772:	b930      	cbnz	r0, 2782 <pwr_ctrl_init+0x1a>
		printk("Could not bind device \"%s\"\n", cfg->port);
    2774:	480d      	ldr	r0, [pc, #52]	; (27ac <pwr_ctrl_init+0x44>)
    2776:	6821      	ldr	r1, [r4, #0]
    2778:	f003 fd75 	bl	6266 <printk>
		return -ENODEV;
    277c:	f06f 0012 	mvn.w	r0, #18
	gpio_pin_configure(gpio, cfg->pin, GPIO_OUTPUT_HIGH);

	k_sleep(K_MSEC(1)); /* Wait for the rail to come up and stabilize */

	return 0;
}
    2780:	bd38      	pop	{r3, r4, r5, pc}
	gpio_pin_configure(gpio, cfg->pin, GPIO_OUTPUT_HIGH);
    2782:	6861      	ldr	r1, [r4, #4]
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
    2784:	6904      	ldr	r4, [r0, #16]
	const struct gpio_driver_api *api =
    2786:	6885      	ldr	r5, [r0, #8]
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    2788:	b2c9      	uxtb	r1, r1
    278a:	2301      	movs	r3, #1
    278c:	fa03 f201 	lsl.w	r2, r3, r1
    2790:	6823      	ldr	r3, [r4, #0]
    2792:	ea23 0302 	bic.w	r3, r3, r2
    2796:	6023      	str	r3, [r4, #0]
	}

	return api->pin_configure(port, pin, flags);
    2798:	f44f 6220 	mov.w	r2, #2560	; 0xa00
    279c:	682b      	ldr	r3, [r5, #0]
    279e:	4798      	blx	r3
    27a0:	2021      	movs	r0, #33	; 0x21
    27a2:	2100      	movs	r1, #0
    27a4:	f003 fb40 	bl	5e28 <z_impl_k_sleep>
	return 0;
    27a8:	2000      	movs	r0, #0
    27aa:	e7e9      	b.n	2780 <pwr_ctrl_init+0x18>
    27ac:	000081b0 	.word	0x000081b0

000027b0 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    27b0:	4b08      	ldr	r3, [pc, #32]	; (27d4 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    27b2:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    27b4:	1ac3      	subs	r3, r0, r3
{
    27b6:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    27b8:	4907      	ldr	r1, [pc, #28]	; (27d8 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    27ba:	109b      	asrs	r3, r3, #2
{
    27bc:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    27be:	4359      	muls	r1, r3
    27c0:	4806      	ldr	r0, [pc, #24]	; (27dc <onoff_stop+0x2c>)
    27c2:	2240      	movs	r2, #64	; 0x40
    27c4:	f003 ffce 	bl	6764 <stop>
	notify(mgr, res);
    27c8:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    27ca:	4601      	mov	r1, r0
	notify(mgr, res);
    27cc:	4620      	mov	r0, r4
}
    27ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    27d2:	4718      	bx	r3
    27d4:	20000574 	.word	0x20000574
    27d8:	b6db6db7 	.word	0xb6db6db7
    27dc:	00007a94 	.word	0x00007a94

000027e0 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    27e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    27e2:	4c0c      	ldr	r4, [pc, #48]	; (2814 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    27e4:	4a0c      	ldr	r2, [pc, #48]	; (2818 <onoff_start+0x38>)
    27e6:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    27e8:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    27ea:	9300      	str	r3, [sp, #0]
{
    27ec:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    27ee:	460b      	mov	r3, r1
    27f0:	490a      	ldr	r1, [pc, #40]	; (281c <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    27f2:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    27f4:	4361      	muls	r1, r4
{
    27f6:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    27f8:	4809      	ldr	r0, [pc, #36]	; (2820 <onoff_start+0x40>)
    27fa:	f003 ffdf 	bl	67bc <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    27fe:	1e01      	subs	r1, r0, #0
    2800:	da05      	bge.n	280e <onoff_start+0x2e>
		notify(mgr, err);
    2802:	4630      	mov	r0, r6
    2804:	462b      	mov	r3, r5
	}
}
    2806:	b002      	add	sp, #8
    2808:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    280c:	4718      	bx	r3
}
    280e:	b002      	add	sp, #8
    2810:	bd70      	pop	{r4, r5, r6, pc}
    2812:	bf00      	nop
    2814:	20000574 	.word	0x20000574
    2818:	0000682d 	.word	0x0000682d
    281c:	b6db6db7 	.word	0xb6db6db7
    2820:	00007a94 	.word	0x00007a94

00002824 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2824:	2200      	movs	r2, #0
{
    2826:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2828:	2101      	movs	r1, #1
{
    282a:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    282c:	4610      	mov	r0, r2
    282e:	f7ff fc59 	bl	20e4 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    2832:	2000      	movs	r0, #0
    2834:	f7ff fc24 	bl	2080 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    2838:	480f      	ldr	r0, [pc, #60]	; (2878 <clk_init+0x54>)
    283a:	f001 fc4f 	bl	40dc <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    283e:	4b0f      	ldr	r3, [pc, #60]	; (287c <clk_init+0x58>)
    2840:	4298      	cmp	r0, r3
    2842:	d115      	bne.n	2870 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    2844:	f004 fe96 	bl	7574 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    2848:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    284a:	490d      	ldr	r1, [pc, #52]	; (2880 <clk_init+0x5c>)
    284c:	4630      	mov	r0, r6
    284e:	f003 fd66 	bl	631e <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    2852:	2800      	cmp	r0, #0
    2854:	db0b      	blt.n	286e <clk_init+0x4a>
	struct nrf_clock_control_data *data = dev->data;
    2856:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    2858:	4909      	ldr	r1, [pc, #36]	; (2880 <clk_init+0x5c>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    285a:	2501      	movs	r5, #1
    285c:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
    285e:	f104 001c 	add.w	r0, r4, #28
    2862:	f003 fd5c 	bl	631e <onoff_manager_init>
		if (err < 0) {
    2866:	2800      	cmp	r0, #0
    2868:	db01      	blt.n	286e <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    286a:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    286c:	2000      	movs	r0, #0
}
    286e:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    2870:	f06f 0004 	mvn.w	r0, #4
    2874:	e7fb      	b.n	286e <clk_init+0x4a>
    2876:	bf00      	nop
    2878:	000028b9 	.word	0x000028b9
    287c:	0bad0000 	.word	0x0bad0000
    2880:	00007e8c 	.word	0x00007e8c

00002884 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    2884:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    2886:	230c      	movs	r3, #12
    2888:	4809      	ldr	r0, [pc, #36]	; (28b0 <clkstarted_handle.constprop.0+0x2c>)
    288a:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    288c:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    288e:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    2890:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    2894:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    2896:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    2898:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    289a:	4418      	add	r0, r3
    289c:	f003 ff4f 	bl	673e <set_on_state>
	if (callback) {
    28a0:	b12d      	cbz	r5, 28ae <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    28a2:	4632      	mov	r2, r6
    28a4:	462b      	mov	r3, r5
    28a6:	4803      	ldr	r0, [pc, #12]	; (28b4 <clkstarted_handle.constprop.0+0x30>)
}
    28a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    28ac:	4718      	bx	r3
}
    28ae:	bd70      	pop	{r4, r5, r6, pc}
    28b0:	20000574 	.word	0x20000574
    28b4:	00007a94 	.word	0x00007a94

000028b8 <clock_event_handler>:
	switch (event) {
    28b8:	b110      	cbz	r0, 28c0 <clock_event_handler+0x8>
    28ba:	2801      	cmp	r0, #1
    28bc:	d004      	beq.n	28c8 <clock_event_handler+0x10>
    28be:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    28c0:	4b03      	ldr	r3, [pc, #12]	; (28d0 <clock_event_handler+0x18>)
    28c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    28c4:	075b      	lsls	r3, r3, #29
    28c6:	d101      	bne.n	28cc <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    28c8:	f7ff bfdc 	b.w	2884 <clkstarted_handle.constprop.0>
}
    28cc:	4770      	bx	lr
    28ce:	bf00      	nop
    28d0:	20000574 	.word	0x20000574

000028d4 <generic_hfclk_start>:
{
    28d4:	b508      	push	{r3, lr}
	__asm__ volatile(
    28d6:	f04f 0320 	mov.w	r3, #32
    28da:	f3ef 8111 	mrs	r1, BASEPRI
    28de:	f383 8812 	msr	BASEPRI_MAX, r3
    28e2:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    28e6:	4a12      	ldr	r2, [pc, #72]	; (2930 <generic_hfclk_start+0x5c>)
    28e8:	6813      	ldr	r3, [r2, #0]
    28ea:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    28ee:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    28f2:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    28f4:	d00c      	beq.n	2910 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    28f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    28fa:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    28fe:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    2902:	f013 0301 	ands.w	r3, r3, #1
    2906:	d003      	beq.n	2910 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    2908:	480a      	ldr	r0, [pc, #40]	; (2934 <generic_hfclk_start+0x60>)
    290a:	f003 ff18 	bl	673e <set_on_state>
			already_started = true;
    290e:	2301      	movs	r3, #1
	__asm__ volatile(
    2910:	f381 8811 	msr	BASEPRI, r1
    2914:	f3bf 8f6f 	isb	sy
	if (already_started) {
    2918:	b123      	cbz	r3, 2924 <generic_hfclk_start+0x50>
}
    291a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    291e:	2000      	movs	r0, #0
    2920:	f7ff bfb0 	b.w	2884 <clkstarted_handle.constprop.0>
}
    2924:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    2928:	2001      	movs	r0, #1
    292a:	f001 bbe7 	b.w	40fc <nrfx_clock_start>
    292e:	bf00      	nop
    2930:	200005c4 	.word	0x200005c4
    2934:	200005b4 	.word	0x200005b4

00002938 <api_blocking_start>:
{
    2938:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    293a:	2200      	movs	r2, #0
    293c:	2301      	movs	r3, #1
    293e:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    2942:	4a09      	ldr	r2, [pc, #36]	; (2968 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2944:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    2948:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    294a:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    294e:	f003 ff66 	bl	681e <api_start>
	if (err < 0) {
    2952:	2800      	cmp	r0, #0
    2954:	db05      	blt.n	2962 <api_blocking_start+0x2a>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    2956:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    295a:	2300      	movs	r3, #0
    295c:	4668      	mov	r0, sp
    295e:	f002 fe17 	bl	5590 <z_impl_k_sem_take>
}
    2962:	b005      	add	sp, #20
    2964:	f85d fb04 	ldr.w	pc, [sp], #4
    2968:	00006845 	.word	0x00006845

0000296c <lfclk_start>:
{
    296c:	b510      	push	{r4, lr}
	if (!once) {
    296e:	4c07      	ldr	r4, [pc, #28]	; (298c <lfclk_start+0x20>)
    2970:	7823      	ldrb	r3, [r4, #0]
    2972:	b92b      	cbnz	r3, 2980 <lfclk_start+0x14>
	z_impl_k_busy_wait(usec_to_wait);
    2974:	f44f 70a5 	mov.w	r0, #330	; 0x14a
    2978:	f005 f82a 	bl	79d0 <z_impl_k_busy_wait>
		once = true;
    297c:	2301      	movs	r3, #1
    297e:	7023      	strb	r3, [r4, #0]
}
    2980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    2984:	2000      	movs	r0, #0
    2986:	f001 bbb9 	b.w	40fc <nrfx_clock_start>
    298a:	bf00      	nop
    298c:	20000793 	.word	0x20000793

00002990 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2990:	4b09      	ldr	r3, [pc, #36]	; (29b8 <generic_hfclk_stop+0x28>)
    2992:	f3bf 8f5b 	dmb	ish
    2996:	e853 2f00 	ldrex	r2, [r3]
    299a:	f022 0102 	bic.w	r1, r2, #2
    299e:	e843 1000 	strex	r0, r1, [r3]
    29a2:	2800      	cmp	r0, #0
    29a4:	d1f7      	bne.n	2996 <generic_hfclk_stop+0x6>
    29a6:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    29aa:	07d3      	lsls	r3, r2, #31
    29ac:	d402      	bmi.n	29b4 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    29ae:	2001      	movs	r0, #1
    29b0:	f001 bbec 	b.w	418c <nrfx_clock_stop>
}
    29b4:	4770      	bx	lr
    29b6:	bf00      	nop
    29b8:	200005c4 	.word	0x200005c4

000029bc <z_nrf_clock_control_lf_on>:
{
    29bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    29c0:	4939      	ldr	r1, [pc, #228]	; (2aa8 <z_nrf_clock_control_lf_on+0xec>)
    29c2:	f3bf 8f5b 	dmb	ish
    29c6:	4607      	mov	r7, r0
    29c8:	2201      	movs	r2, #1
    29ca:	e851 3f00 	ldrex	r3, [r1]
    29ce:	e841 2000 	strex	r0, r2, [r1]
    29d2:	2800      	cmp	r0, #0
    29d4:	d1f9      	bne.n	29ca <z_nrf_clock_control_lf_on+0xe>
    29d6:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    29da:	b933      	cbnz	r3, 29ea <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    29dc:	4933      	ldr	r1, [pc, #204]	; (2aac <z_nrf_clock_control_lf_on+0xf0>)
		err = onoff_request(mgr, &cli);
    29de:	4834      	ldr	r0, [pc, #208]	; (2ab0 <z_nrf_clock_control_lf_on+0xf4>)
    29e0:	604b      	str	r3, [r1, #4]
    29e2:	60cb      	str	r3, [r1, #12]
    29e4:	608a      	str	r2, [r1, #8]
    29e6:	f003 fcad 	bl	6344 <onoff_request>
	switch (start_mode) {
    29ea:	1e7b      	subs	r3, r7, #1
    29ec:	2b01      	cmp	r3, #1
    29ee:	d82f      	bhi.n	2a50 <z_nrf_clock_control_lf_on+0x94>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    29f0:	2f01      	cmp	r7, #1
    29f2:	d107      	bne.n	2a04 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    29f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    29f8:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    29fc:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    2a00:	2b01      	cmp	r3, #1
    2a02:	d025      	beq.n	2a50 <z_nrf_clock_control_lf_on+0x94>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2a04:	f004 fe8a 	bl	771c <k_is_in_isr>
    2a08:	4604      	mov	r4, r0
    2a0a:	b918      	cbnz	r0, 2a14 <z_nrf_clock_control_lf_on+0x58>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    2a0c:	4b29      	ldr	r3, [pc, #164]	; (2ab4 <z_nrf_clock_control_lf_on+0xf8>)
	int key = isr_mode ? irq_lock() : 0;
    2a0e:	781b      	ldrb	r3, [r3, #0]
    2a10:	2b00      	cmp	r3, #0
    2a12:	d141      	bne.n	2a98 <z_nrf_clock_control_lf_on+0xdc>
	__asm__ volatile(
    2a14:	f04f 0320 	mov.w	r3, #32
    2a18:	f3ef 8611 	mrs	r6, BASEPRI
    2a1c:	f383 8812 	msr	BASEPRI_MAX, r3
    2a20:	f3bf 8f6f 	isb	sy
    2a24:	2401      	movs	r4, #1
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2a26:	f8df 8090 	ldr.w	r8, [pc, #144]	; 2ab8 <z_nrf_clock_control_lf_on+0xfc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2a2a:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    2a2e:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2a32:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    2a36:	03d2      	lsls	r2, r2, #15
    2a38:	d50c      	bpl.n	2a54 <z_nrf_clock_control_lf_on+0x98>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    2a3a:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    2a3e:	2b01      	cmp	r3, #1
    2a40:	d001      	beq.n	2a46 <z_nrf_clock_control_lf_on+0x8a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    2a42:	2f01      	cmp	r7, #1
    2a44:	d106      	bne.n	2a54 <z_nrf_clock_control_lf_on+0x98>
	if (isr_mode) {
    2a46:	b30c      	cbz	r4, 2a8c <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
    2a48:	f386 8811 	msr	BASEPRI, r6
    2a4c:	f3bf 8f6f 	isb	sy
}
    2a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    2a54:	b1ac      	cbz	r4, 2a82 <z_nrf_clock_control_lf_on+0xc6>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    2a56:	4630      	mov	r0, r6
    2a58:	f7ff fb08 	bl	206c <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    2a5c:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    2a60:	2b00      	cmp	r3, #0
    2a62:	d1e4      	bne.n	2a2e <z_nrf_clock_control_lf_on+0x72>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2a64:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    2a68:	2a00      	cmp	r2, #0
    2a6a:	d0e0      	beq.n	2a2e <z_nrf_clock_control_lf_on+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2a6c:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    2a70:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    2a74:	2301      	movs	r3, #1
    2a76:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
    2a7a:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2a7e:	60ab      	str	r3, [r5, #8]
}
    2a80:	e7d5      	b.n	2a2e <z_nrf_clock_control_lf_on+0x72>
	return z_impl_k_sleep(timeout);
    2a82:	2100      	movs	r1, #0
    2a84:	2021      	movs	r0, #33	; 0x21
    2a86:	f003 f9cf 	bl	5e28 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    2a8a:	e7e7      	b.n	2a5c <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENSET = mask;
    2a8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2a90:	2202      	movs	r2, #2
    2a92:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    2a96:	e7db      	b.n	2a50 <z_nrf_clock_control_lf_on+0x94>
    p_reg->INTENCLR = mask;
    2a98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2a9c:	2202      	movs	r2, #2
    2a9e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    2aa2:	4606      	mov	r6, r0
}
    2aa4:	e7bf      	b.n	2a26 <z_nrf_clock_control_lf_on+0x6a>
    2aa6:	bf00      	nop
    2aa8:	200005c8 	.word	0x200005c8
    2aac:	20000564 	.word	0x20000564
    2ab0:	20000590 	.word	0x20000590
    2ab4:	20000bc5 	.word	0x20000bc5
    2ab8:	e000e100 	.word	0xe000e100

00002abc <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
    2abc:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
    2abe:	4c04      	ldr	r4, [pc, #16]	; (2ad0 <rtt_console_init+0x14>)
    2ac0:	4620      	mov	r0, r4
    2ac2:	f7fe f9e5 	bl	e90 <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
    2ac6:	4620      	mov	r0, r4
    2ac8:	f7ff fe0c 	bl	26e4 <__stdout_hook_install>

	return 0;
}
    2acc:	2000      	movs	r0, #0
    2ace:	bd10      	pop	{r4, pc}
    2ad0:	00002ad5 	.word	0x00002ad5

00002ad4 <rtt_console_out>:
{
    2ad4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2ad6:	4e14      	ldr	r6, [pc, #80]	; (2b28 <rtt_console_out+0x54>)
	char c = (char)character;
    2ad8:	f88d 0007 	strb.w	r0, [sp, #7]
{
    2adc:	4604      	mov	r4, r0
	char c = (char)character;
    2ade:	2503      	movs	r5, #3
		SEGGER_RTT_LOCK();
    2ae0:	f3ef 8711 	mrs	r7, BASEPRI
    2ae4:	f04f 0120 	mov.w	r1, #32
    2ae8:	f381 8811 	msr	BASEPRI, r1
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
    2aec:	2201      	movs	r2, #1
    2aee:	f10d 0107 	add.w	r1, sp, #7
    2af2:	2000      	movs	r0, #0
    2af4:	f002 fa5e 	bl	4fb4 <SEGGER_RTT_WriteNoLock>
		SEGGER_RTT_UNLOCK();
    2af8:	f387 8811 	msr	BASEPRI, r7
		if (cnt) {
    2afc:	b120      	cbz	r0, 2b08 <rtt_console_out+0x34>
			host_present = true;
    2afe:	2301      	movs	r3, #1
    2b00:	7033      	strb	r3, [r6, #0]
}
    2b02:	4620      	mov	r0, r4
    2b04:	b003      	add	sp, #12
    2b06:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (host_present) {
    2b08:	7833      	ldrb	r3, [r6, #0]
    2b0a:	2b00      	cmp	r3, #0
    2b0c:	d0f9      	beq.n	2b02 <rtt_console_out+0x2e>
			if (max_cnt) {
    2b0e:	3d01      	subs	r5, #1
    2b10:	d008      	beq.n	2b24 <rtt_console_out+0x50>
	if (!IS_ENABLED(CONFIG_MULTITHREADING) || k_is_in_isr()) {
    2b12:	f004 fe03 	bl	771c <k_is_in_isr>
    2b16:	2800      	cmp	r0, #0
    2b18:	d1e2      	bne.n	2ae0 <rtt_console_out+0xc>
    2b1a:	2100      	movs	r1, #0
    2b1c:	2042      	movs	r0, #66	; 0x42
    2b1e:	f003 f983 	bl	5e28 <z_impl_k_sleep>
		SEGGER_RTT_LOCK();
    2b22:	e7dd      	b.n	2ae0 <rtt_console_out+0xc>
				host_present = false;
    2b24:	7035      	strb	r5, [r6, #0]
    2b26:	e7ec      	b.n	2b02 <rtt_console_out+0x2e>
    2b28:	20000794 	.word	0x20000794

00002b2c <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    2b2c:	b530      	push	{r4, r5, lr}
	return port->config;
    2b2e:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    2b30:	7b04      	ldrb	r4, [r0, #12]
    2b32:	f001 051f 	and.w	r5, r1, #31
	nrfx_err_t err;

	if (mode == GPIO_INT_MODE_DISABLED) {
    2b36:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    2b3a:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
    2b3e:	b085      	sub	sp, #20
    2b40:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
    2b44:	d104      	bne.n	2b50 <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
    2b46:	4628      	mov	r0, r5
    2b48:	f001 fdbe 	bl	46c8 <nrfx_gpiote_trigger_disable>
		return -EIO;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
    2b4c:	2000      	movs	r0, #0
    2b4e:	e02e      	b.n	2bae <gpio_nrfx_pin_interrupt_configure+0x82>
	if (mode == GPIO_INT_MODE_LEVEL) {
    2b50:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
	nrfx_gpiote_trigger_config_t trigger_config = {
    2b54:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    2b58:	d12b      	bne.n	2bb2 <gpio_nrfx_pin_interrupt_configure+0x86>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    2b5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    2b5e:	bf0c      	ite	eq
    2b60:	2304      	moveq	r3, #4
    2b62:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
    2b64:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    2b68:	6883      	ldr	r3, [r0, #8]
    2b6a:	fa23 f101 	lsr.w	r1, r3, r1
    2b6e:	07c9      	lsls	r1, r1, #31
    2b70:	d42b      	bmi.n	2bca <gpio_nrfx_pin_interrupt_configure+0x9e>
    2b72:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    2b76:	d128      	bne.n	2bca <gpio_nrfx_pin_interrupt_configure+0x9e>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    2b78:	f005 031f 	and.w	r3, r5, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    2b7c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    2b80:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    2b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    2b88:	07db      	lsls	r3, r3, #31
    2b8a:	d41e      	bmi.n	2bca <gpio_nrfx_pin_interrupt_configure+0x9e>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    2b8c:	f10d 0407 	add.w	r4, sp, #7
    2b90:	4621      	mov	r1, r4
    2b92:	4628      	mov	r0, r5
    2b94:	f001 fd00 	bl	4598 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    2b98:	4b14      	ldr	r3, [pc, #80]	; (2bec <gpio_nrfx_pin_interrupt_configure+0xc0>)
    2b9a:	4298      	cmp	r0, r3
    2b9c:	d114      	bne.n	2bc8 <gpio_nrfx_pin_interrupt_configure+0x9c>
			err = nrfx_gpiote_channel_alloc(&ch);
    2b9e:	4620      	mov	r0, r4
    2ba0:	f001 fd48 	bl	4634 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    2ba4:	4b12      	ldr	r3, [pc, #72]	; (2bf0 <gpio_nrfx_pin_interrupt_configure+0xc4>)
    2ba6:	4298      	cmp	r0, r3
    2ba8:	d00e      	beq.n	2bc8 <gpio_nrfx_pin_interrupt_configure+0x9c>
				return -ENOMEM;
    2baa:	f06f 000b 	mvn.w	r0, #11
}
    2bae:	b005      	add	sp, #20
    2bb0:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    2bb2:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    2bb6:	d005      	beq.n	2bc4 <gpio_nrfx_pin_interrupt_configure+0x98>
    2bb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    2bbc:	bf0c      	ite	eq
    2bbe:	2302      	moveq	r3, #2
    2bc0:	2301      	movne	r3, #1
    2bc2:	e7cf      	b.n	2b64 <gpio_nrfx_pin_interrupt_configure+0x38>
    2bc4:	2303      	movs	r3, #3
    2bc6:	e7cd      	b.n	2b64 <gpio_nrfx_pin_interrupt_configure+0x38>
		trigger_config.p_in_channel = &ch;
    2bc8:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2bca:	2300      	movs	r3, #0
    2bcc:	4619      	mov	r1, r3
    2bce:	aa02      	add	r2, sp, #8
    2bd0:	4628      	mov	r0, r5
    2bd2:	f001 fbb9 	bl	4348 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    2bd6:	4b06      	ldr	r3, [pc, #24]	; (2bf0 <gpio_nrfx_pin_interrupt_configure+0xc4>)
    2bd8:	4298      	cmp	r0, r3
    2bda:	d104      	bne.n	2be6 <gpio_nrfx_pin_interrupt_configure+0xba>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    2bdc:	2101      	movs	r1, #1
    2bde:	4628      	mov	r0, r5
    2be0:	f001 fd2e 	bl	4640 <nrfx_gpiote_trigger_enable>
    2be4:	e7b2      	b.n	2b4c <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EIO;
    2be6:	f06f 0004 	mvn.w	r0, #4
    2bea:	e7e0      	b.n	2bae <gpio_nrfx_pin_interrupt_configure+0x82>
    2bec:	0bad0004 	.word	0x0bad0004
    2bf0:	0bad0000 	.word	0x0bad0000

00002bf4 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    2bf4:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    2bf6:	f001 fd0d 	bl	4614 <nrfx_gpiote_is_init>
    2bfa:	4604      	mov	r4, r0
    2bfc:	b968      	cbnz	r0, 2c1a <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    2bfe:	f001 fce1 	bl	45c4 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    2c02:	4b08      	ldr	r3, [pc, #32]	; (2c24 <gpio_nrfx_init+0x30>)
    2c04:	4298      	cmp	r0, r3
    2c06:	d10a      	bne.n	2c1e <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    2c08:	4807      	ldr	r0, [pc, #28]	; (2c28 <gpio_nrfx_init+0x34>)
    2c0a:	4621      	mov	r1, r4
    2c0c:	f001 fcbe 	bl	458c <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    2c10:	4622      	mov	r2, r4
    2c12:	2105      	movs	r1, #5
    2c14:	2006      	movs	r0, #6
    2c16:	f7ff fa65 	bl	20e4 <z_arm_irq_priority_set>
		return 0;
    2c1a:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    2c1c:	bd10      	pop	{r4, pc}
		return -EIO;
    2c1e:	f06f 0004 	mvn.w	r0, #4
    2c22:	e7fb      	b.n	2c1c <gpio_nrfx_init+0x28>
    2c24:	0bad0000 	.word	0x0bad0000
    2c28:	00002c2d 	.word	0x00002c2d

00002c2c <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2c2c:	0943      	lsrs	r3, r0, #5
{
    2c2e:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2c30:	d110      	bne.n	2c54 <nrfx_gpio_handler+0x28>
	return list->head;
    2c32:	4b09      	ldr	r3, [pc, #36]	; (2c58 <nrfx_gpio_handler+0x2c>)
    2c34:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2c36:	b169      	cbz	r1, 2c54 <nrfx_gpio_handler+0x28>
	gpio_fire_callbacks(list, port, BIT(pin));
    2c38:	2501      	movs	r5, #1
	return node->next;
    2c3a:	680c      	ldr	r4, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    2c3c:	4e07      	ldr	r6, [pc, #28]	; (2c5c <nrfx_gpio_handler+0x30>)
    2c3e:	4085      	lsls	r5, r0
		if (cb->pin_mask & pins) {
    2c40:	688a      	ldr	r2, [r1, #8]
    2c42:	402a      	ands	r2, r5
    2c44:	d002      	beq.n	2c4c <nrfx_gpio_handler+0x20>
			cb->handler(port, cb, cb->pin_mask & pins);
    2c46:	684b      	ldr	r3, [r1, #4]
    2c48:	4630      	mov	r0, r6
    2c4a:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2c4c:	b114      	cbz	r4, 2c54 <nrfx_gpio_handler+0x28>
    2c4e:	4621      	mov	r1, r4
    2c50:	6824      	ldr	r4, [r4, #0]
    2c52:	e7f5      	b.n	2c40 <nrfx_gpio_handler+0x14>
}
    2c54:	bd70      	pop	{r4, r5, r6, pc}
    2c56:	bf00      	nop
    2c58:	200005cc 	.word	0x200005cc
    2c5c:	00007aac 	.word	0x00007aac

00002c60 <gpio_nrfx_pin_configure>:
{
    2c60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
    2c64:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2c66:	7b3b      	ldrb	r3, [r7, #12]
    2c68:	f001 051f 	and.w	r5, r1, #31
{
    2c6c:	b085      	sub	sp, #20
    2c6e:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2c70:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    2c74:	4614      	mov	r4, r2
    2c76:	b9ca      	cbnz	r2, 2cac <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
    2c78:	a902      	add	r1, sp, #8
    2c7a:	4628      	mov	r0, r5
    2c7c:	f001 fc8c 	bl	4598 <nrfx_gpiote_channel_get>
    2c80:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    2c82:	4628      	mov	r0, r5
    2c84:	f001 fd48 	bl	4718 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    2c88:	4b48      	ldr	r3, [pc, #288]	; (2dac <gpio_nrfx_pin_configure+0x14c>)
    2c8a:	4298      	cmp	r0, r3
    2c8c:	d004      	beq.n	2c98 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
    2c8e:	f06f 0004 	mvn.w	r0, #4
}
    2c92:	b005      	add	sp, #20
    2c94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
    2c98:	4284      	cmp	r4, r0
    2c9a:	d105      	bne.n	2ca8 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
    2c9c:	f89d 0008 	ldrb.w	r0, [sp, #8]
    2ca0:	f001 fcc2 	bl	4628 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    2ca4:	42a0      	cmp	r0, r4
    2ca6:	d1f2      	bne.n	2c8e <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2ca8:	2000      	movs	r0, #0
    2caa:	e7f2      	b.n	2c92 <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
    2cac:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
    2cb0:	f10d 0103 	add.w	r1, sp, #3
    2cb4:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    2cb6:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
    2cba:	f001 fc6d 	bl	4598 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2cbe:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
    2cc0:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2cc2:	aa02      	add	r2, sp, #8
    2cc4:	4649      	mov	r1, r9
    2cc6:	4628      	mov	r0, r5
    2cc8:	f001 fb3e 	bl	4348 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    2ccc:	4b37      	ldr	r3, [pc, #220]	; (2dac <gpio_nrfx_pin_configure+0x14c>)
    2cce:	4298      	cmp	r0, r3
    2cd0:	d002      	beq.n	2cd8 <gpio_nrfx_pin_configure+0x78>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    2cd2:	f06f 0015 	mvn.w	r0, #21
    2cd6:	e7dc      	b.n	2c92 <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
    2cd8:	4580      	cmp	r8, r0
    2cda:	d103      	bne.n	2ce4 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
    2cdc:	f89d 0003 	ldrb.w	r0, [sp, #3]
    2ce0:	f001 fca2 	bl	4628 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    2ce4:	05a3      	lsls	r3, r4, #22
    2ce6:	d54e      	bpl.n	2d86 <gpio_nrfx_pin_configure+0x126>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    2ce8:	4b31      	ldr	r3, [pc, #196]	; (2db0 <gpio_nrfx_pin_configure+0x150>)
    2cea:	4a32      	ldr	r2, [pc, #200]	; (2db4 <gpio_nrfx_pin_configure+0x154>)
    2cec:	4023      	ands	r3, r4
    2cee:	4293      	cmp	r3, r2
    2cf0:	d03a      	beq.n	2d68 <gpio_nrfx_pin_configure+0x108>
    2cf2:	d80c      	bhi.n	2d0e <gpio_nrfx_pin_configure+0xae>
    2cf4:	2b06      	cmp	r3, #6
    2cf6:	d014      	beq.n	2d22 <gpio_nrfx_pin_configure+0xc2>
    2cf8:	d804      	bhi.n	2d04 <gpio_nrfx_pin_configure+0xa4>
    2cfa:	b193      	cbz	r3, 2d22 <gpio_nrfx_pin_configure+0xc2>
    2cfc:	2b02      	cmp	r3, #2
    2cfe:	d1e8      	bne.n	2cd2 <gpio_nrfx_pin_configure+0x72>
    2d00:	2304      	movs	r3, #4
    2d02:	e00e      	b.n	2d22 <gpio_nrfx_pin_configure+0xc2>
    2d04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    2d08:	d1e3      	bne.n	2cd2 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
    2d0a:	2301      	movs	r3, #1
    2d0c:	e009      	b.n	2d22 <gpio_nrfx_pin_configure+0xc2>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    2d0e:	4a2a      	ldr	r2, [pc, #168]	; (2db8 <gpio_nrfx_pin_configure+0x158>)
    2d10:	4293      	cmp	r3, r2
    2d12:	d02b      	beq.n	2d6c <gpio_nrfx_pin_configure+0x10c>
    2d14:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    2d18:	d02a      	beq.n	2d70 <gpio_nrfx_pin_configure+0x110>
    2d1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    2d1e:	d1d8      	bne.n	2cd2 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
    2d20:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
    2d22:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    2d26:	f484 7380 	eor.w	r3, r4, #256	; 0x100
    2d2a:	f3c3 2300 	ubfx	r3, r3, #8, #1
	if (flags & GPIO_PULL_UP) {
    2d2e:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    2d30:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
    2d34:	bf54      	ite	pl
    2d36:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    2d3a:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    2d3c:	0521      	lsls	r1, r4, #20
		nrfx_gpiote_output_config_t output_config = {
    2d3e:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    2d42:	d517      	bpl.n	2d74 <gpio_nrfx_pin_configure+0x114>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    2d44:	687b      	ldr	r3, [r7, #4]
    2d46:	2101      	movs	r1, #1
    2d48:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
    2d4c:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    2d50:	2200      	movs	r2, #0
    2d52:	a901      	add	r1, sp, #4
    2d54:	4628      	mov	r0, r5
    2d56:	f001 fba1 	bl	449c <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2d5a:	4b14      	ldr	r3, [pc, #80]	; (2dac <gpio_nrfx_pin_configure+0x14c>)
    2d5c:	4298      	cmp	r0, r3
    2d5e:	bf14      	ite	ne
    2d60:	f06f 0015 	mvnne.w	r0, #21
    2d64:	2000      	moveq	r0, #0
    2d66:	e794      	b.n	2c92 <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
    2d68:	2307      	movs	r3, #7
    2d6a:	e7da      	b.n	2d22 <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_D0H1;
    2d6c:	2305      	movs	r3, #5
    2d6e:	e7d8      	b.n	2d22 <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_H0H1;
    2d70:	2303      	movs	r3, #3
    2d72:	e7d6      	b.n	2d22 <gpio_nrfx_pin_configure+0xc2>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    2d74:	0562      	lsls	r2, r4, #21
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    2d76:	bf41      	itttt	mi
    2d78:	687b      	ldrmi	r3, [r7, #4]
    2d7a:	2101      	movmi	r1, #1
    2d7c:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
    2d80:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
    2d84:	e7e4      	b.n	2d50 <gpio_nrfx_pin_configure+0xf0>
	if (flags & GPIO_PULL_UP) {
    2d86:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2d88:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    2d8c:	bf54      	ite	pl
    2d8e:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
    2d92:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2d94:	461a      	mov	r2, r3
    2d96:	a901      	add	r1, sp, #4
    2d98:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    2d9a:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2d9e:	f001 fad3 	bl	4348 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2da2:	4b02      	ldr	r3, [pc, #8]	; (2dac <gpio_nrfx_pin_configure+0x14c>)
    2da4:	4298      	cmp	r0, r3
    2da6:	f43f af7f 	beq.w	2ca8 <gpio_nrfx_pin_configure+0x48>
    2daa:	e792      	b.n	2cd2 <gpio_nrfx_pin_configure+0x72>
    2dac:	0bad0000 	.word	0x0bad0000
    2db0:	00f00006 	.word	0x00f00006
    2db4:	00100006 	.word	0x00100006
    2db8:	00400002 	.word	0x00400002

00002dbc <i2c_nrfx_twim_recover_bus>:

	return 0;
}

static int i2c_nrfx_twim_recover_bus(const struct device *dev)
{
    2dbc:	b508      	push	{r3, lr}
	struct i2c_nrfx_twim_data *dev_data = dev->data;
    2dbe:	6903      	ldr	r3, [r0, #16]
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
    2dc0:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
    2dc4:	f002 f878 	bl	4eb8 <nrfx_twi_twim_bus_recover>

	nrfx_err_t err = nrfx_twim_bus_recover(dev_data->twim_config.scl,
					       dev_data->twim_config.sda);

	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
    2dc8:	4b03      	ldr	r3, [pc, #12]	; (2dd8 <i2c_nrfx_twim_recover_bus+0x1c>)
    2dca:	4298      	cmp	r0, r3
}
    2dcc:	bf14      	ite	ne
    2dce:	f06f 000f 	mvnne.w	r0, #15
    2dd2:	2000      	moveq	r0, #0
    2dd4:	bd08      	pop	{r3, pc}
    2dd6:	bf00      	nop
    2dd8:	0bad0000 	.word	0x0bad0000

00002ddc <init_twim>:
{
    2ddc:	b510      	push	{r4, lr}
	struct i2c_nrfx_twim_data *dev_data = dev->data;
    2dde:	6904      	ldr	r4, [r0, #16]
	nrfx_err_t result = nrfx_twim_init(&dev_config->twim,
    2de0:	4a08      	ldr	r2, [pc, #32]	; (2e04 <init_twim+0x28>)
    2de2:	6840      	ldr	r0, [r0, #4]
    2de4:	4623      	mov	r3, r4
    2de6:	f104 0120 	add.w	r1, r4, #32
    2dea:	f001 fe23 	bl	4a34 <nrfx_twim_init>
	if (result != NRFX_SUCCESS) {
    2dee:	4b06      	ldr	r3, [pc, #24]	; (2e08 <init_twim+0x2c>)
    2df0:	4298      	cmp	r0, r3
	dev_data->twim_initialized = true;
    2df2:	bf03      	ittte	eq
    2df4:	2301      	moveq	r3, #1
    2df6:	f884 3030 	strbeq.w	r3, [r4, #48]	; 0x30
	return 0;
    2dfa:	2000      	moveq	r0, #0
		return -EIO;
    2dfc:	f06f 0004 	mvnne.w	r0, #4
}
    2e00:	bd10      	pop	{r4, pc}
    2e02:	bf00      	nop
    2e04:	00002e0d 	.word	0x00002e0d
    2e08:	0bad0000 	.word	0x0bad0000

00002e0c <event_handler>:
	switch (p_event->type) {
    2e0c:	7803      	ldrb	r3, [r0, #0]
    2e0e:	2b01      	cmp	r3, #1
    2e10:	d008      	beq.n	2e24 <event_handler+0x18>
    2e12:	2b02      	cmp	r3, #2
    2e14:	d008      	beq.n	2e28 <event_handler+0x1c>
    2e16:	b94b      	cbnz	r3, 2e2c <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
    2e18:	4b05      	ldr	r3, [pc, #20]	; (2e30 <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
    2e1a:	634b      	str	r3, [r1, #52]	; 0x34
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    2e1c:	f101 0010 	add.w	r0, r1, #16
    2e20:	f002 bb96 	b.w	5550 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    2e24:	4b03      	ldr	r3, [pc, #12]	; (2e34 <event_handler+0x28>)
    2e26:	e7f8      	b.n	2e1a <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    2e28:	4b03      	ldr	r3, [pc, #12]	; (2e38 <event_handler+0x2c>)
    2e2a:	e7f6      	b.n	2e1a <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
    2e2c:	4b03      	ldr	r3, [pc, #12]	; (2e3c <event_handler+0x30>)
    2e2e:	e7f4      	b.n	2e1a <event_handler+0xe>
    2e30:	0bad0000 	.word	0x0bad0000
    2e34:	0bae0001 	.word	0x0bae0001
    2e38:	0bae0002 	.word	0x0bae0002
    2e3c:	0bad0001 	.word	0x0bad0001

00002e40 <i2c_nrfx_twim_transfer>:
{
    2e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
    2e44:	6847      	ldr	r7, [r0, #4]
	struct i2c_nrfx_twim_data *dev_data = dev->data;
    2e46:	6906      	ldr	r6, [r0, #16]
{
    2e48:	b089      	sub	sp, #36	; 0x24
    2e4a:	4698      	mov	r8, r3
    2e4c:	4605      	mov	r5, r0
	uint16_t concat_buf_size = dev_config->concat_buf_size;
    2e4e:	893b      	ldrh	r3, [r7, #8]
    2e50:	9300      	str	r3, [sp, #0]
{
    2e52:	460c      	mov	r4, r1
    2e54:	4693      	mov	fp, r2
	nrfx_twim_xfer_desc_t cur_xfer = {
    2e56:	2100      	movs	r1, #0
    2e58:	2214      	movs	r2, #20
    2e5a:	a803      	add	r0, sp, #12
	uint8_t *msg_buf = dev_data->msg_buf;
    2e5c:	f8d6 9038 	ldr.w	r9, [r6, #56]	; 0x38
	nrfx_twim_xfer_desc_t cur_xfer = {
    2e60:	f003 fc38 	bl	66d4 <memset>
	if (!dev_data->twim_initialized && init_twim(dev) < 0) {
    2e64:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
	nrfx_twim_xfer_desc_t cur_xfer = {
    2e68:	f88d 800d 	strb.w	r8, [sp, #13]
	if (!dev_data->twim_initialized && init_twim(dev) < 0) {
    2e6c:	b1bb      	cbz	r3, 2e9e <i2c_nrfx_twim_transfer+0x5e>
	return z_impl_k_sem_take(sem, timeout);
    2e6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2e72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2e76:	4630      	mov	r0, r6
    2e78:	f002 fb8a 	bl	5590 <z_impl_k_sem_take>
	k_sem_take(&dev_data->completion_sync, K_NO_WAIT);
    2e7c:	f106 0a10 	add.w	sl, r6, #16
    2e80:	2200      	movs	r2, #0
    2e82:	2300      	movs	r3, #0
    2e84:	4650      	mov	r0, sl
    2e86:	f002 fb83 	bl	5590 <z_impl_k_sem_take>
	nrfx_twim_enable(&dev_config->twim);
    2e8a:	4638      	mov	r0, r7
    2e8c:	f001 fe22 	bl	4ad4 <nrfx_twim_enable>
	for (size_t i = 0; i < num_msgs; i++) {
    2e90:	f04f 0800 	mov.w	r8, #0
	uint16_t msg_buf_used = 0;
    2e94:	4645      	mov	r5, r8
	for (size_t i = 0; i < num_msgs; i++) {
    2e96:	45d8      	cmp	r8, fp
    2e98:	d309      	bcc.n	2eae <i2c_nrfx_twim_transfer+0x6e>
    2e9a:	2400      	movs	r4, #0
    2e9c:	e051      	b.n	2f42 <i2c_nrfx_twim_transfer+0x102>
	if (!dev_data->twim_initialized && init_twim(dev) < 0) {
    2e9e:	4628      	mov	r0, r5
    2ea0:	f7ff ff9c 	bl	2ddc <init_twim>
    2ea4:	2800      	cmp	r0, #0
    2ea6:	dae2      	bge.n	2e6e <i2c_nrfx_twim_transfer+0x2e>
		return -EIO;
    2ea8:	f06f 0404 	mvn.w	r4, #4
    2eac:	e04f      	b.n	2f4e <i2c_nrfx_twim_transfer+0x10e>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
    2eae:	7a21      	ldrb	r1, [r4, #8]
    2eb0:	070a      	lsls	r2, r1, #28
    2eb2:	f100 808f 	bmi.w	2fd4 <i2c_nrfx_twim_transfer+0x194>
		bool concat_next = ((i + 1) < num_msgs)
    2eb6:	f108 0801 	add.w	r8, r8, #1
				&& ((msgs[i].flags & I2C_MSG_READ)
    2eba:	45d8      	cmp	r8, fp
    2ebc:	6862      	ldr	r2, [r4, #4]
    2ebe:	d20a      	bcs.n	2ed6 <i2c_nrfx_twim_transfer+0x96>
				&& !(msgs[i].flags & I2C_MSG_STOP)
    2ec0:	078b      	lsls	r3, r1, #30
    2ec2:	d408      	bmi.n	2ed6 <i2c_nrfx_twim_transfer+0x96>
				&& !(msgs[i + 1].flags & I2C_MSG_RESTART)
    2ec4:	7d23      	ldrb	r3, [r4, #20]
				    == (msgs[i + 1].flags & I2C_MSG_READ));
    2ec6:	ea81 0003 	eor.w	r0, r1, r3
				&& ((msgs[i].flags & I2C_MSG_READ)
    2eca:	f000 0001 	and.w	r0, r0, #1
    2ece:	f003 0304 	and.w	r3, r3, #4
    2ed2:	4303      	orrs	r3, r0
    2ed4:	d016      	beq.n	2f04 <i2c_nrfx_twim_transfer+0xc4>
		if (concat_next || (msg_buf_used != 0)) {
    2ed6:	b1bd      	cbz	r5, 2f08 <i2c_nrfx_twim_transfer+0xc8>
				&& ((msgs[i].flags & I2C_MSG_READ)
    2ed8:	2300      	movs	r3, #0
			if ((msg_buf_used + msgs[i].len) > concat_buf_size) {
    2eda:	f8dd c000 	ldr.w	ip, [sp]
    2ede:	18a8      	adds	r0, r5, r2
    2ee0:	4560      	cmp	r0, ip
    2ee2:	d87a      	bhi.n	2fda <i2c_nrfx_twim_transfer+0x19a>
			if (!(msgs[i].flags & I2C_MSG_READ)) {
    2ee4:	07c8      	lsls	r0, r1, #31
    2ee6:	d406      	bmi.n	2ef6 <i2c_nrfx_twim_transfer+0xb6>
				memcpy(msg_buf + msg_buf_used,
    2ee8:	6821      	ldr	r1, [r4, #0]
    2eea:	9301      	str	r3, [sp, #4]
    2eec:	eb09 0005 	add.w	r0, r9, r5
    2ef0:	f003 fbe5 	bl	66be <memcpy>
    2ef4:	9b01      	ldr	r3, [sp, #4]
			msg_buf_used += msgs[i].len;
    2ef6:	6862      	ldr	r2, [r4, #4]
    2ef8:	4415      	add	r5, r2
    2efa:	b2ad      	uxth	r5, r5
		if (concat_next) {
    2efc:	2b00      	cmp	r3, #0
    2efe:	d037      	beq.n	2f70 <i2c_nrfx_twim_transfer+0x130>
    2f00:	340c      	adds	r4, #12
    2f02:	e7c8      	b.n	2e96 <i2c_nrfx_twim_transfer+0x56>
				&& ((msgs[i].flags & I2C_MSG_READ)
    2f04:	2301      	movs	r3, #1
    2f06:	e7e8      	b.n	2eda <i2c_nrfx_twim_transfer+0x9a>
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
    2f08:	07c9      	lsls	r1, r1, #31
    2f0a:	d524      	bpl.n	2f56 <i2c_nrfx_twim_transfer+0x116>
			cur_xfer.p_primary_buf = msgs[i].buf;
    2f0c:	6823      	ldr	r3, [r4, #0]
    2f0e:	9306      	str	r3, [sp, #24]
			cur_xfer.primary_length = msgs[i].len;
    2f10:	6863      	ldr	r3, [r4, #4]
    2f12:	9304      	str	r3, [sp, #16]
    2f14:	2500      	movs	r5, #0
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
    2f16:	7a23      	ldrb	r3, [r4, #8]
			NRFX_TWIM_XFER_RX : NRFX_TWIM_XFER_TX;
    2f18:	f003 0201 	and.w	r2, r3, #1
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
    2f1c:	f013 0f02 	tst.w	r3, #2
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
    2f20:	f88d 200c 	strb.w	r2, [sp, #12]
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
    2f24:	a903      	add	r1, sp, #12
    2f26:	bf0c      	ite	eq
    2f28:	2220      	moveq	r2, #32
    2f2a:	2200      	movne	r2, #0
    2f2c:	4638      	mov	r0, r7
    2f2e:	f001 fe35 	bl	4b9c <nrfx_twim_xfer>
		if (res != NRFX_SUCCESS) {
    2f32:	4b2e      	ldr	r3, [pc, #184]	; (2fec <i2c_nrfx_twim_transfer+0x1ac>)
    2f34:	4298      	cmp	r0, r3
    2f36:	d021      	beq.n	2f7c <i2c_nrfx_twim_transfer+0x13c>
			if (res == NRFX_ERROR_BUSY) {
    2f38:	330b      	adds	r3, #11
    2f3a:	4298      	cmp	r0, r3
    2f3c:	d053      	beq.n	2fe6 <i2c_nrfx_twim_transfer+0x1a6>
			ret = -EIO;
    2f3e:	f06f 0404 	mvn.w	r4, #4
	nrfx_twim_disable(&dev_config->twim);
    2f42:	4638      	mov	r0, r7
    2f44:	f001 fdd6 	bl	4af4 <nrfx_twim_disable>
	z_impl_k_sem_give(sem);
    2f48:	4630      	mov	r0, r6
    2f4a:	f002 fb01 	bl	5550 <z_impl_k_sem_give>
}
    2f4e:	4620      	mov	r0, r4
    2f50:	b009      	add	sp, #36	; 0x24
    2f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			   !nrfx_is_in_ram(msgs[i].buf)) {
    2f56:	6821      	ldr	r1, [r4, #0]

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    2f58:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
    2f5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    2f60:	d0d4      	beq.n	2f0c <i2c_nrfx_twim_transfer+0xcc>
			if (msgs[i].len > dev_config->flash_buf_max_size) {
    2f62:	897b      	ldrh	r3, [r7, #10]
    2f64:	4293      	cmp	r3, r2
    2f66:	d33b      	bcc.n	2fe0 <i2c_nrfx_twim_transfer+0x1a0>
			memcpy(msg_buf, msgs[i].buf, msgs[i].len);
    2f68:	4648      	mov	r0, r9
    2f6a:	f003 fba8 	bl	66be <memcpy>
			msg_buf_used = msgs[i].len;
    2f6e:	88a5      	ldrh	r5, [r4, #4]
		if (msg_buf_used == 0) {
    2f70:	2d00      	cmp	r5, #0
    2f72:	d0cb      	beq.n	2f0c <i2c_nrfx_twim_transfer+0xcc>
			cur_xfer.p_primary_buf = msg_buf;
    2f74:	f8cd 9018 	str.w	r9, [sp, #24]
			cur_xfer.primary_length = msg_buf_used;
    2f78:	9504      	str	r5, [sp, #16]
    2f7a:	e7cc      	b.n	2f16 <i2c_nrfx_twim_transfer+0xd6>
	return z_impl_k_sem_take(sem, timeout);
    2f7c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    2f80:	2300      	movs	r3, #0
    2f82:	4650      	mov	r0, sl
    2f84:	f002 fb04 	bl	5590 <z_impl_k_sem_take>
		if (ret != 0) {
    2f88:	b138      	cbz	r0, 2f9a <i2c_nrfx_twim_transfer+0x15a>
			nrfx_twim_disable(&dev_config->twim);
    2f8a:	4638      	mov	r0, r7
    2f8c:	f001 fdb2 	bl	4af4 <nrfx_twim_disable>
    2f90:	e9d6 0108 	ldrd	r0, r1, [r6, #32]
    2f94:	f001 ff90 	bl	4eb8 <nrfx_twi_twim_bus_recover>
    2f98:	e7d1      	b.n	2f3e <i2c_nrfx_twim_transfer+0xfe>
		res = dev_data->res;
    2f9a:	6b73      	ldr	r3, [r6, #52]	; 0x34
		if (res != NRFX_SUCCESS) {
    2f9c:	4a13      	ldr	r2, [pc, #76]	; (2fec <i2c_nrfx_twim_transfer+0x1ac>)
    2f9e:	4293      	cmp	r3, r2
    2fa0:	d1cd      	bne.n	2f3e <i2c_nrfx_twim_transfer+0xfe>
		if ((msgs[i].flags & I2C_MSG_READ)
    2fa2:	7a23      	ldrb	r3, [r4, #8]
    2fa4:	07db      	lsls	r3, r3, #31
    2fa6:	d401      	bmi.n	2fac <i2c_nrfx_twim_transfer+0x16c>
		msg_buf_used = 0;
    2fa8:	2500      	movs	r5, #0
    2faa:	e7a9      	b.n	2f00 <i2c_nrfx_twim_transfer+0xc0>
		    && cur_xfer.p_primary_buf == msg_buf) {
    2fac:	9b06      	ldr	r3, [sp, #24]
    2fae:	4599      	cmp	r9, r3
    2fb0:	d1fa      	bne.n	2fa8 <i2c_nrfx_twim_transfer+0x168>
    2fb2:	4623      	mov	r3, r4
    2fb4:	e008      	b.n	2fc8 <i2c_nrfx_twim_transfer+0x188>
				msg_buf_used -= msgs[j].len;
    2fb6:	1aa9      	subs	r1, r5, r2
				memcpy(msgs[j].buf,
    2fb8:	68d8      	ldr	r0, [r3, #12]
    2fba:	9301      	str	r3, [sp, #4]
				msg_buf_used -= msgs[j].len;
    2fbc:	b28d      	uxth	r5, r1
				memcpy(msgs[j].buf,
    2fbe:	fa19 f181 	uxtah	r1, r9, r1
    2fc2:	f003 fb7c 	bl	66be <memcpy>
				j--;
    2fc6:	9b01      	ldr	r3, [sp, #4]
			while (msg_buf_used >= msgs[j].len) {
    2fc8:	685a      	ldr	r2, [r3, #4]
    2fca:	4295      	cmp	r5, r2
    2fcc:	f1a3 030c 	sub.w	r3, r3, #12
    2fd0:	d2f1      	bcs.n	2fb6 <i2c_nrfx_twim_transfer+0x176>
    2fd2:	e7e9      	b.n	2fa8 <i2c_nrfx_twim_transfer+0x168>
			ret = -ENOTSUP;
    2fd4:	f06f 0485 	mvn.w	r4, #133	; 0x85
    2fd8:	e7b3      	b.n	2f42 <i2c_nrfx_twim_transfer+0x102>
				ret = -ENOSPC;
    2fda:	f06f 041b 	mvn.w	r4, #27
    2fde:	e7b0      	b.n	2f42 <i2c_nrfx_twim_transfer+0x102>
				ret = -EINVAL;
    2fe0:	f06f 0415 	mvn.w	r4, #21
    2fe4:	e7ad      	b.n	2f42 <i2c_nrfx_twim_transfer+0x102>
				ret = -EBUSY;
    2fe6:	f06f 040f 	mvn.w	r4, #15
    2fea:	e7aa      	b.n	2f42 <i2c_nrfx_twim_transfer+0x102>
    2fec:	0bad0000 	.word	0x0bad0000

00002ff0 <ccs811_channel_get>:
{
	struct ccs811_data *drv_data = dev->data;
	const struct ccs811_result_type *rp = &drv_data->result;
	uint32_t uval;

	switch (chan) {
    2ff0:	391b      	subs	r1, #27
	struct ccs811_data *drv_data = dev->data;
    2ff2:	6903      	ldr	r3, [r0, #16]
	switch (chan) {
    2ff4:	2904      	cmp	r1, #4
    2ff6:	d820      	bhi.n	303a <ccs811_channel_get+0x4a>
    2ff8:	e8df f001 	tbb	[pc, r1]
    2ffc:	0a1f0803 	.word	0x0a1f0803
    3000:	19          	.byte	0x19
    3001:	00          	.byte	0x00
	case SENSOR_CHAN_CO2:
		val->val1 = rp->co2;
    3002:	8a1b      	ldrh	r3, [r3, #16]
		val->val2 = 0;

		break;
	case SENSOR_CHAN_VOC:
		val->val1 = rp->voc;
    3004:	6013      	str	r3, [r2, #0]
		val->val2 = 0;
    3006:	2000      	movs	r0, #0
    3008:	6050      	str	r0, [r2, #4]

		break;
    300a:	4770      	bx	lr
		val->val1 = rp->voc;
    300c:	8a5b      	ldrh	r3, [r3, #18]
    300e:	e7f9      	b.n	3004 <ccs811_channel_get+0x14>
	case SENSOR_CHAN_VOLTAGE:
		/*
		 * Raw ADC readings are contained in least significant 10 bits
		 */
		uval = ((rp->raw & CCS811_RAW_VOLTAGE_MSK)
			>> CCS811_RAW_VOLTAGE_POS) * CCS811_RAW_VOLTAGE_SCALE;
    3010:	8a9b      	ldrh	r3, [r3, #20]
		val->val1 = uval / 1000000U;
    3012:	480b      	ldr	r0, [pc, #44]	; (3040 <ccs811_channel_get+0x50>)
		uval = ((rp->raw & CCS811_RAW_VOLTAGE_MSK)
    3014:	f240 614c 	movw	r1, #1612	; 0x64c
			>> CCS811_RAW_VOLTAGE_POS) * CCS811_RAW_VOLTAGE_SCALE;
    3018:	f3c3 0309 	ubfx	r3, r3, #0, #10
		uval = ((rp->raw & CCS811_RAW_VOLTAGE_MSK)
    301c:	434b      	muls	r3, r1
		val->val1 = uval / 1000000U;
    301e:	fbb3 f1f0 	udiv	r1, r3, r0
		val->val2 = uval % 1000000;
    3022:	fb00 3311 	mls	r3, r0, r1, r3
		val->val1 = uval / 1000000U;
    3026:	6011      	str	r1, [r2, #0]
		val->val2 = uval % 1000000;
    3028:	6053      	str	r3, [r2, #4]
		break;
	default:
		return -ENOTSUP;
	}

	return 0;
    302a:	2000      	movs	r0, #0
		break;
    302c:	4770      	bx	lr
			>> CCS811_RAW_CURRENT_POS) * CCS811_RAW_CURRENT_SCALE;
    302e:	8a9b      	ldrh	r3, [r3, #20]
		val->val1 = uval / 1000000U;
    3030:	2000      	movs	r0, #0
			>> CCS811_RAW_CURRENT_POS) * CCS811_RAW_CURRENT_SCALE;
    3032:	0a9b      	lsrs	r3, r3, #10
		val->val2 = uval % 1000000;
    3034:	e9c2 0300 	strd	r0, r3, [r2]
		break;
    3038:	4770      	bx	lr
	switch (chan) {
    303a:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    303e:	4770      	bx	lr
    3040:	000f4240 	.word	0x000f4240

00003044 <ccs811_init>:
}

#endif /* CONFIG_CCS811_TRIGGER */

static int ccs811_init(const struct device *dev)
{
    3044:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct ccs811_data *drv_data = dev->data;
    3046:	6904      	ldr	r4, [r0, #16]
	int status;
	uint16_t fw_ver;
	uint8_t cmd;
	uint8_t hw_id;

	*drv_data = (struct ccs811_data){ 0 };
    3048:	221c      	movs	r2, #28
    304a:	2100      	movs	r1, #0
    304c:	4620      	mov	r0, r4
    304e:	f003 fb41 	bl	66d4 <memset>
    3052:	485a      	ldr	r0, [pc, #360]	; (31bc <ccs811_init+0x178>)
    3054:	f001 fffe 	bl	5054 <z_impl_device_get_binding>
	drv_data->i2c = device_get_binding(DT_INST_BUS_LABEL(0));
    3058:	6020      	str	r0, [r4, #0]
	if (drv_data->i2c == NULL) {
    305a:	b920      	cbnz	r0, 3066 <ccs811_init+0x22>
		LOG_ERR("Failed to get pointer to %s device!",
			DT_INST_BUS_LABEL(0));
		return -EINVAL;
    305c:	f06f 0515 	mvn.w	r5, #21
#endif

out:
	set_wake(drv_data, false);
	return ret;
}
    3060:	4628      	mov	r0, r5
    3062:	b003      	add	sp, #12
    3064:	bd30      	pop	{r4, r5, pc}
    3066:	4856      	ldr	r0, [pc, #344]	; (31c0 <ccs811_init+0x17c>)
    3068:	f001 fff4 	bl	5054 <z_impl_device_get_binding>
	drv_data->wake_gpio = device_get_binding(DT_INST_GPIO_LABEL(0, wake_gpios));
    306c:	60e0      	str	r0, [r4, #12]
	if (drv_data->wake_gpio == NULL) {
    306e:	2800      	cmp	r0, #0
    3070:	d0f4      	beq.n	305c <ccs811_init+0x18>
	struct gpio_driver_data *data =
    3072:	6902      	ldr	r2, [r0, #16]
	const struct gpio_driver_api *api =
    3074:	6881      	ldr	r1, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    3076:	6813      	ldr	r3, [r2, #0]
    3078:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    307c:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
    307e:	680b      	ldr	r3, [r1, #0]
    3080:	f640 2201 	movw	r2, #2561	; 0xa01
    3084:	210c      	movs	r1, #12
    3086:	4798      	blx	r3
	set_wake(drv_data, true);
    3088:	68e0      	ldr	r0, [r4, #12]
    308a:	2101      	movs	r1, #1
    308c:	f003 fec8 	bl	6e20 <set_wake.isra.0>
	k_msleep(1);
    3090:	2001      	movs	r0, #1
    3092:	f003 fe7e 	bl	6d92 <k_msleep.isra.0>
    3096:	484a      	ldr	r0, [pc, #296]	; (31c0 <ccs811_init+0x17c>)
    3098:	f001 ffdc 	bl	5054 <z_impl_device_get_binding>
	drv_data->reset_gpio = device_get_binding(DT_INST_GPIO_LABEL(0, reset_gpios));
    309c:	60a0      	str	r0, [r4, #8]
	if (drv_data->reset_gpio == NULL) {
    309e:	2800      	cmp	r0, #0
    30a0:	d0dc      	beq.n	305c <ccs811_init+0x18>
	struct gpio_driver_data *data =
    30a2:	6902      	ldr	r2, [r0, #16]
	const struct gpio_driver_api *api =
    30a4:	6881      	ldr	r1, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    30a6:	6813      	ldr	r3, [r2, #0]
    30a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    30ac:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
    30ae:	680b      	ldr	r3, [r1, #0]
    30b0:	f240 6201 	movw	r2, #1537	; 0x601
    30b4:	210b      	movs	r1, #11
    30b6:	4798      	blx	r3
	k_msleep(1);
    30b8:	2001      	movs	r0, #1
    30ba:	f003 fe6a 	bl	6d92 <k_msleep.isra.0>
    30be:	4841      	ldr	r0, [pc, #260]	; (31c4 <ccs811_init+0x180>)
    30c0:	f001 ffc8 	bl	5054 <z_impl_device_get_binding>
	drv_data->irq_gpio = device_get_binding(DT_INST_GPIO_LABEL(0, irq_gpios));
    30c4:	6060      	str	r0, [r4, #4]
	if (drv_data->irq_gpio == NULL) {
    30c6:	2800      	cmp	r0, #0
    30c8:	d0c8      	beq.n	305c <ccs811_init+0x18>
	k_msleep(20);            /* t_START assuming recent power-on */
    30ca:	2014      	movs	r0, #20
    30cc:	f003 fe61 	bl	6d92 <k_msleep.isra.0>
	gpio_pin_set(drv_data->reset_gpio, RESET_PIN, 1);
    30d0:	68a0      	ldr	r0, [r4, #8]
    30d2:	2201      	movs	r2, #1
    30d4:	210b      	movs	r1, #11
    30d6:	f003 fe4c 	bl	6d72 <gpio_pin_set.isra.0>
	z_impl_k_busy_wait(usec_to_wait);
    30da:	200f      	movs	r0, #15
    30dc:	f004 fc78 	bl	79d0 <z_impl_k_busy_wait>
	gpio_pin_set(drv_data->reset_gpio, RESET_PIN, 0);
    30e0:	2200      	movs	r2, #0
    30e2:	210b      	movs	r1, #11
    30e4:	68a0      	ldr	r0, [r4, #8]
    30e6:	f003 fe44 	bl	6d72 <gpio_pin_set.isra.0>
	k_msleep(2);             /* t_START after reset */
    30ea:	2002      	movs	r0, #2
    30ec:	f003 fe51 	bl	6d92 <k_msleep.isra.0>
	ret = switch_to_app_mode(drv_data->i2c);
    30f0:	6825      	ldr	r5, [r4, #0]
	status = fetch_status(i2c);
    30f2:	4628      	mov	r0, r5
    30f4:	f003 fe6b 	bl	6dce <fetch_status>
	if (status < 0) {
    30f8:	2800      	cmp	r0, #0
    30fa:	da06      	bge.n	310a <ccs811_init+0xc6>
		ret = -EIO;
    30fc:	f06f 0504 	mvn.w	r5, #4
	set_wake(drv_data, false);
    3100:	68e0      	ldr	r0, [r4, #12]
    3102:	2100      	movs	r1, #0
    3104:	f003 fe8c 	bl	6e20 <set_wake.isra.0>
	return ret;
    3108:	e7aa      	b.n	3060 <ccs811_init+0x1c>
	if (!(status & CCS811_STATUS_APP_VALID)) {
    310a:	06c1      	lsls	r1, r0, #27
    310c:	d516      	bpl.n	313c <ccs811_init+0xf8>
	if (status & CCS811_STATUS_FW_MODE) {
    310e:	0602      	lsls	r2, r0, #24
    3110:	d417      	bmi.n	3142 <ccs811_init+0xfe>
	buf = CCS811_REG_APP_START;
    3112:	23f4      	movs	r3, #244	; 0xf4
	if (i2c_write(i2c, &buf, 1, DT_INST_REG_ADDR(0)) < 0) {
    3114:	2201      	movs	r2, #1
    3116:	f10d 0106 	add.w	r1, sp, #6
    311a:	4628      	mov	r0, r5
	buf = CCS811_REG_APP_START;
    311c:	f88d 3006 	strb.w	r3, [sp, #6]
	if (i2c_write(i2c, &buf, 1, DT_INST_REG_ADDR(0)) < 0) {
    3120:	f003 fe47 	bl	6db2 <i2c_write.constprop.0>
    3124:	2800      	cmp	r0, #0
    3126:	dbe9      	blt.n	30fc <ccs811_init+0xb8>
	k_msleep(1);             /* t_APP_START */
    3128:	2001      	movs	r0, #1
    312a:	f003 fe32 	bl	6d92 <k_msleep.isra.0>
	status = fetch_status(i2c);
    312e:	4628      	mov	r0, r5
    3130:	f003 fe4d 	bl	6dce <fetch_status>
	if (status < 0) {
    3134:	2800      	cmp	r0, #0
    3136:	dbe1      	blt.n	30fc <ccs811_init+0xb8>
	if (!(status & CCS811_STATUS_FW_MODE)) {
    3138:	0603      	lsls	r3, r0, #24
    313a:	d402      	bmi.n	3142 <ccs811_init+0xfe>
		ret = -EINVAL;
    313c:	f06f 0515 	mvn.w	r5, #21
    3140:	e7de      	b.n	3100 <ccs811_init+0xbc>
	if (i2c_reg_read_byte(drv_data->i2c, DT_INST_REG_ADDR(0),
    3142:	2320      	movs	r3, #32
    3144:	6820      	ldr	r0, [r4, #0]
    3146:	f88d 3006 	strb.w	r3, [sp, #6]
 */
static inline int i2c_reg_read_byte(const struct device *dev,
				    uint16_t dev_addr,
				    uint8_t reg_addr, uint8_t *value)
{
	return i2c_write_read(dev, dev_addr,
    314a:	f10d 0203 	add.w	r2, sp, #3
    314e:	2301      	movs	r3, #1
    3150:	f10d 0106 	add.w	r1, sp, #6
    3154:	f003 fdf8 	bl	6d48 <i2c_write_read.constprop.0>
    3158:	2800      	cmp	r0, #0
    315a:	dbcf      	blt.n	30fc <ccs811_init+0xb8>
	if (hw_id != CCS881_HW_ID) {
    315c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3160:	2b81      	cmp	r3, #129	; 0x81
    3162:	d1eb      	bne.n	313c <ccs811_init+0xf8>
	cmd = CCS811_REG_FW_APP_VERSION;
    3164:	2324      	movs	r3, #36	; 0x24
    3166:	f88d 3002 	strb.w	r3, [sp, #2]
	if (i2c_write_read(drv_data->i2c, DT_INST_REG_ADDR(0),
    316a:	2302      	movs	r3, #2
    316c:	6820      	ldr	r0, [r4, #0]
    316e:	f10d 0206 	add.w	r2, sp, #6
    3172:	eb0d 0103 	add.w	r1, sp, r3
    3176:	f003 fde7 	bl	6d48 <i2c_write_read.constprop.0>
    317a:	2800      	cmp	r0, #0
    317c:	dbbe      	blt.n	30fc <ccs811_init+0xb8>
	fw_ver = sys_be16_to_cpu(fw_ver);
    317e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	if (i2c_reg_write_byte(drv_data->i2c, DT_INST_REG_ADDR(0),
    3182:	6820      	ldr	r0, [r4, #0]
    3184:	ba5b      	rev16	r3, r3
	fw_ver = sys_be16_to_cpu(fw_ver);
    3186:	f8ad 3006 	strh.w	r3, [sp, #6]
	drv_data->app_fw_ver = fw_ver >> 8U;
    318a:	f3c3 2307 	ubfx	r3, r3, #8, #8
    318e:	7663      	strb	r3, [r4, #25]
 */
static inline int i2c_reg_write_byte(const struct device *dev,
				     uint16_t dev_addr,
				     uint8_t reg_addr, uint8_t value)
{
	uint8_t tx_buf[2] = {reg_addr, value};
    3190:	2510      	movs	r5, #16
    3192:	2301      	movs	r3, #1

	return i2c_write(dev, tx_buf, 2, dev_addr);
    3194:	2202      	movs	r2, #2
    3196:	a901      	add	r1, sp, #4
	uint8_t tx_buf[2] = {reg_addr, value};
    3198:	f88d 3004 	strb.w	r3, [sp, #4]
    319c:	f88d 5005 	strb.w	r5, [sp, #5]
	return i2c_write(dev, tx_buf, 2, dev_addr);
    31a0:	f003 fe07 	bl	6db2 <i2c_write.constprop.0>
	if (i2c_reg_write_byte(drv_data->i2c, DT_INST_REG_ADDR(0),
    31a4:	2800      	cmp	r0, #0
    31a6:	dba9      	blt.n	30fc <ccs811_init+0xb8>
	status = fetch_status(drv_data->i2c);
    31a8:	6820      	ldr	r0, [r4, #0]
	drv_data->mode = meas_mode;
    31aa:	7625      	strb	r5, [r4, #24]
	status = fetch_status(drv_data->i2c);
    31ac:	f003 fe0f 	bl	6dce <fetch_status>
	if (status < 0) {
    31b0:	2800      	cmp	r0, #0
    31b2:	dba3      	blt.n	30fc <ccs811_init+0xb8>
	if (status & CCS811_STATUS_ERROR) {
    31b4:	f010 0501 	ands.w	r5, r0, #1
    31b8:	d0a2      	beq.n	3100 <ccs811_init+0xbc>
    31ba:	e7bf      	b.n	313c <ccs811_init+0xf8>
    31bc:	000081e1 	.word	0x000081e1
    31c0:	000081cc 	.word	0x000081cc
    31c4:	000081d4 	.word	0x000081d4

000031c8 <hts221_channel_get>:

	/*
	 * see "Interpreting humidity and temperature readings" document
	 * for more details
	 */
	if (chan == SENSOR_CHAN_AMBIENT_TEMP) {
    31c8:	290d      	cmp	r1, #13
{
    31ca:	b570      	push	{r4, r5, r6, lr}
	struct hts221_data *data = dev->data;
    31cc:	6900      	ldr	r0, [r0, #16]
	if (chan == SENSOR_CHAN_AMBIENT_TEMP) {
    31ce:	d120      	bne.n	3212 <hts221_channel_get+0x4a>
		conv_val = (int32_t)(data->t1_degc_x8 - data->t0_degc_x8) *
    31d0:	88c5      	ldrh	r5, [r0, #6]
			   (data->t_sample - data->t0_out) /
    31d2:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
		conv_val = (int32_t)(data->t1_degc_x8 - data->t0_degc_x8) *
    31d6:	8903      	ldrh	r3, [r0, #8]
			   (data->t_sample - data->t0_out) /
    31d8:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
			   (data->t1_out - data->t0_out) +
    31dc:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
		conv_val = (int32_t)(data->t1_degc_x8 - data->t0_degc_x8) *
    31e0:	1b5b      	subs	r3, r3, r5
			   (data->t_sample - data->t0_out) /
    31e2:	1ba4      	subs	r4, r4, r6
			   (data->t1_out - data->t0_out) +
    31e4:	1b89      	subs	r1, r1, r6
		conv_val = (int32_t)(data->t1_degc_x8 - data->t0_degc_x8) *
    31e6:	4363      	muls	r3, r4
			   (data->t_sample - data->t0_out) /
    31e8:	fb93 f3f1 	sdiv	r3, r3, r1
		conv_val = (int32_t)(data->t1_degc_x8 - data->t0_degc_x8) *
    31ec:	442b      	add	r3, r5
			   data->t0_degc_x8;

		/* convert temperature x8 to degrees Celsius */
		val->val1 = conv_val / 8;
    31ee:	2b00      	cmp	r3, #0
    31f0:	4619      	mov	r1, r3
    31f2:	bfb8      	it	lt
    31f4:	1dd9      	addlt	r1, r3, #7
    31f6:	10c9      	asrs	r1, r1, #3
    31f8:	6011      	str	r1, [r2, #0]
		val->val2 = (conv_val % 8) * (1000000 / 8);
    31fa:	4259      	negs	r1, r3
    31fc:	f001 0107 	and.w	r1, r1, #7
    3200:	f003 0307 	and.w	r3, r3, #7
    3204:	bf58      	it	pl
    3206:	424b      	negpl	r3, r1
    3208:	4911      	ldr	r1, [pc, #68]	; (3250 <hts221_channel_get+0x88>)
			   (data->h1_t0_out - data->h0_t0_out) +
			   data->h0_rh_x2;

		/* convert humidity x2 to percent */
		val->val1 = conv_val / 2;
		val->val2 = (conv_val % 2) * 500000;
    320a:	434b      	muls	r3, r1
    320c:	6053      	str	r3, [r2, #4]
	} else {
		return -ENOTSUP;
	}

	return 0;
    320e:	2000      	movs	r0, #0
}
    3210:	bd70      	pop	{r4, r5, r6, pc}
	} else if (chan == SENSOR_CHAN_HUMIDITY) {
    3212:	2910      	cmp	r1, #16
    3214:	d119      	bne.n	324a <hts221_channel_get+0x82>
		conv_val = (int32_t)(data->h1_rh_x2 - data->h0_rh_x2) *
    3216:	7905      	ldrb	r5, [r0, #4]
			   (data->rh_sample - data->h0_t0_out) /
    3218:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
		conv_val = (int32_t)(data->h1_rh_x2 - data->h0_rh_x2) *
    321c:	7943      	ldrb	r3, [r0, #5]
			   (data->rh_sample - data->h0_t0_out) /
    321e:	f9b0 4000 	ldrsh.w	r4, [r0]
			   (data->h1_t0_out - data->h0_t0_out) +
    3222:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
		conv_val = (int32_t)(data->h1_rh_x2 - data->h0_rh_x2) *
    3226:	1b5b      	subs	r3, r3, r5
			   (data->rh_sample - data->h0_t0_out) /
    3228:	1ba4      	subs	r4, r4, r6
			   (data->h1_t0_out - data->h0_t0_out) +
    322a:	1b89      	subs	r1, r1, r6
		conv_val = (int32_t)(data->h1_rh_x2 - data->h0_rh_x2) *
    322c:	4363      	muls	r3, r4
			   (data->rh_sample - data->h0_t0_out) /
    322e:	fb93 f3f1 	sdiv	r3, r3, r1
		conv_val = (int32_t)(data->h1_rh_x2 - data->h0_rh_x2) *
    3232:	442b      	add	r3, r5
		val->val1 = conv_val / 2;
    3234:	eb03 71d3 	add.w	r1, r3, r3, lsr #31
    3238:	1049      	asrs	r1, r1, #1
		val->val2 = (conv_val % 2) * 500000;
    323a:	2b00      	cmp	r3, #0
    323c:	f003 0301 	and.w	r3, r3, #1
		val->val1 = conv_val / 2;
    3240:	6011      	str	r1, [r2, #0]
		val->val2 = (conv_val % 2) * 500000;
    3242:	bfb8      	it	lt
    3244:	425b      	neglt	r3, r3
    3246:	4903      	ldr	r1, [pc, #12]	; (3254 <hts221_channel_get+0x8c>)
    3248:	e7df      	b.n	320a <hts221_channel_get+0x42>
		return -ENOTSUP;
    324a:	f06f 0085 	mvn.w	r0, #133	; 0x85
    324e:	e7df      	b.n	3210 <hts221_channel_get+0x48>
    3250:	0001e848 	.word	0x0001e848
    3254:	0007a120 	.word	0x0007a120

00003258 <hts221_init>:
	.sample_fetch = hts221_sample_fetch,
	.channel_get = hts221_channel_get,
};

int hts221_init(const struct device *dev)
{
    3258:	b530      	push	{r4, r5, lr}
	const struct hts221_config *cfg = dev->config;
	stmdev_ctx_t *ctx = (stmdev_ctx_t *)&cfg->ctx;
    325a:	6844      	ldr	r4, [r0, #4]
{
    325c:	b087      	sub	sp, #28
    325e:	4605      	mov	r5, r0
	uint8_t id, idx;
	int status;

	/* check chip ID */

	status = hts221_device_id_get(ctx, &id);
    3260:	f10d 0107 	add.w	r1, sp, #7
    3264:	4620      	mov	r0, r4
    3266:	f003 f9d7 	bl	6618 <hts221_device_id_get>
	if (status < 0) {
    326a:	2800      	cmp	r0, #0
    326c:	db05      	blt.n	327a <hts221_init+0x22>
		LOG_ERR("Failed to read chip ID.");
		return status;
	}

	if (id != HTS221_ID) {
    326e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    3272:	2bbc      	cmp	r3, #188	; 0xbc
    3274:	d003      	beq.n	327e <hts221_init+0x26>
		LOG_ERR("Invalid chip ID.");
		return -EINVAL;
    3276:	f06f 0015 	mvn.w	r0, #21
#else
	LOG_INF("Cannot enable trigger without drdy-gpios");
#endif

	return 0;
}
    327a:	b007      	add	sp, #28
    327c:	bd30      	pop	{r4, r5, pc}
		if (!strcmp(hts221_odrs[idx].str, CONFIG_HTS221_ODR)) {
    327e:	492c      	ldr	r1, [pc, #176]	; (3330 <hts221_init+0xd8>)
    3280:	4608      	mov	r0, r1
    3282:	f003 fa10 	bl	66a6 <strcmp>
    3286:	b168      	cbz	r0, 32a4 <hts221_init+0x4c>
    3288:	4929      	ldr	r1, [pc, #164]	; (3330 <hts221_init+0xd8>)
    328a:	482a      	ldr	r0, [pc, #168]	; (3334 <hts221_init+0xdc>)
    328c:	f003 fa0b 	bl	66a6 <strcmp>
    3290:	b138      	cbz	r0, 32a2 <hts221_init+0x4a>
    3292:	4927      	ldr	r1, [pc, #156]	; (3330 <hts221_init+0xd8>)
    3294:	4828      	ldr	r0, [pc, #160]	; (3338 <hts221_init+0xe0>)
    3296:	f003 fa06 	bl	66a6 <strcmp>
    329a:	2800      	cmp	r0, #0
    329c:	d1eb      	bne.n	3276 <hts221_init+0x1e>
    329e:	2002      	movs	r0, #2
    32a0:	e000      	b.n	32a4 <hts221_init+0x4c>
    32a2:	2001      	movs	r0, #1
	status = hts221_data_rate_set(ctx, hts221_odrs[idx].odr);
    32a4:	4b25      	ldr	r3, [pc, #148]	; (333c <hts221_init+0xe4>)
    32a6:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    32aa:	7901      	ldrb	r1, [r0, #4]
    32ac:	4620      	mov	r0, r4
    32ae:	f003 f985 	bl	65bc <hts221_data_rate_set>
	if (status < 0) {
    32b2:	2800      	cmp	r0, #0
    32b4:	dbe1      	blt.n	327a <hts221_init+0x22>
	status = hts221_block_data_update_set(ctx, 1);
    32b6:	2101      	movs	r1, #1
    32b8:	4620      	mov	r0, r4
    32ba:	f003 f996 	bl	65ea <hts221_block_data_update_set>
	if (status < 0) {
    32be:	2800      	cmp	r0, #0
    32c0:	dbdb      	blt.n	327a <hts221_init+0x22>
	status = hts221_power_on_set(ctx, 1);
    32c2:	2101      	movs	r1, #1
    32c4:	4620      	mov	r0, r4
    32c6:	f003 f9ac 	bl	6622 <hts221_power_on_set>
	if (status < 0) {
    32ca:	2800      	cmp	r0, #0
    32cc:	dbd5      	blt.n	327a <hts221_init+0x22>
	return z_impl_k_sleep(timeout);
    32ce:	2100      	movs	r1, #0
    32d0:	2063      	movs	r0, #99	; 0x63
    32d2:	f002 fda9 	bl	5e28 <z_impl_k_sleep>
	status = hts221_read_reg(ctx, HTS221_H0_RH_X2 |
    32d6:	6868      	ldr	r0, [r5, #4]
	struct hts221_data *data = dev->data;
    32d8:	692c      	ldr	r4, [r5, #16]
	status = hts221_read_reg(ctx, HTS221_H0_RH_X2 |
    32da:	2310      	movs	r3, #16
    32dc:	aa02      	add	r2, sp, #8
    32de:	21b0      	movs	r1, #176	; 0xb0
    32e0:	f003 f960 	bl	65a4 <hts221_read_reg>
	if (status < 0) {
    32e4:	2800      	cmp	r0, #0
    32e6:	dbc8      	blt.n	327a <hts221_init+0x22>
	data->h0_rh_x2 = buf[0];
    32e8:	f89d 3008 	ldrb.w	r3, [sp, #8]
    32ec:	7123      	strb	r3, [r4, #4]
	data->h1_rh_x2 = buf[1];
    32ee:	f89d 3009 	ldrb.w	r3, [sp, #9]
    32f2:	7163      	strb	r3, [r4, #5]
	data->t0_degc_x8 = sys_le16_to_cpu(buf[2] | ((buf[5] & 0x3) << 8));
    32f4:	f89d 300d 	ldrb.w	r3, [sp, #13]
    32f8:	021a      	lsls	r2, r3, #8
    32fa:	f402 7140 	and.w	r1, r2, #768	; 0x300
    32fe:	f89d 200a 	ldrb.w	r2, [sp, #10]
    3302:	430a      	orrs	r2, r1
    3304:	80e2      	strh	r2, [r4, #6]
	data->t1_degc_x8 = sys_le16_to_cpu(buf[3] | ((buf[5] & 0xC) << 6));
    3306:	019b      	lsls	r3, r3, #6
    3308:	f89d 200b 	ldrb.w	r2, [sp, #11]
    330c:	f403 7340 	and.w	r3, r3, #768	; 0x300
    3310:	4313      	orrs	r3, r2
    3312:	8123      	strh	r3, [r4, #8]
	data->h0_t0_out = sys_le16_to_cpu(buf[6] | (buf[7] << 8));
    3314:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    3318:	8163      	strh	r3, [r4, #10]
	data->h1_t0_out = sys_le16_to_cpu(buf[10] | (buf[11] << 8));
    331a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    331e:	81a3      	strh	r3, [r4, #12]
	data->t0_out = sys_le16_to_cpu(buf[12] | (buf[13] << 8));
    3320:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    3324:	81e3      	strh	r3, [r4, #14]
	data->t1_out = sys_le16_to_cpu(buf[14] | (buf[15] << 8));
    3326:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    332a:	8223      	strh	r3, [r4, #16]
	return 0;
    332c:	2000      	movs	r0, #0
    332e:	e7a4      	b.n	327a <hts221_init+0x22>
    3330:	000081f2 	.word	0x000081f2
    3334:	000081f4 	.word	0x000081f4
    3338:	000081f6 	.word	0x000081f6
    333c:	00007f68 	.word	0x00007f68

00003340 <lis2dh_channel_get>:
	struct lis2dh_data *lis2dh = dev->data;
    3340:	2903      	cmp	r1, #3
{
    3342:	b570      	push	{r4, r5, r6, lr}
	struct lis2dh_data *lis2dh = dev->data;
    3344:	6904      	ldr	r4, [r0, #16]
	switch (chan) {
    3346:	d81c      	bhi.n	3382 <lis2dh_channel_get+0x42>
    3348:	4b0f      	ldr	r3, [pc, #60]	; (3388 <lis2dh_channel_get+0x48>)
    334a:	5658      	ldrsb	r0, [r3, r1]
    334c:	4b0f      	ldr	r3, [pc, #60]	; (338c <lis2dh_channel_get+0x4c>)
    334e:	565e      	ldrsb	r6, [r3, r1]
	val->val1 = converted_val / 1000000;
    3350:	490f      	ldr	r1, [pc, #60]	; (3390 <lis2dh_channel_get+0x50>)
	for (i = ofs_start; i <= ofs_end; i++, val++) {
    3352:	42b0      	cmp	r0, r6
    3354:	f102 0208 	add.w	r2, r2, #8
    3358:	dd01      	ble.n	335e <lis2dh_channel_get+0x1e>
	return 0;
    335a:	2000      	movs	r0, #0
}
    335c:	bd70      	pop	{r4, r5, r6, pc}
		lis2dh_convert(lis2dh->sample.xyz[i], lis2dh->scale, val);
    335e:	1d03      	adds	r3, r0, #4
    3360:	eb04 0343 	add.w	r3, r4, r3, lsl #1
	converted_val = (raw_val >> 4) * scale;
    3364:	6925      	ldr	r5, [r4, #16]
    3366:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
    336a:	111b      	asrs	r3, r3, #4
    336c:	436b      	muls	r3, r5
	val->val1 = converted_val / 1000000;
    336e:	fb93 f5f1 	sdiv	r5, r3, r1
	val->val2 = converted_val % 1000000;
    3372:	fb01 3315 	mls	r3, r1, r5, r3
	val->val1 = converted_val / 1000000;
    3376:	f842 5c08 	str.w	r5, [r2, #-8]
	val->val2 = converted_val % 1000000;
    337a:	f842 3c04 	str.w	r3, [r2, #-4]
	for (i = ofs_start; i <= ofs_end; i++, val++) {
    337e:	3001      	adds	r0, #1
    3380:	e7e7      	b.n	3352 <lis2dh_channel_get+0x12>
		return -ENOTSUP;
    3382:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3386:	e7e9      	b.n	335c <lis2dh_channel_get+0x1c>
    3388:	0000820a 	.word	0x0000820a
    338c:	0000820e 	.word	0x0000820e
    3390:	000f4240 	.word	0x000f4240

00003394 <lis2dh_init>:
	.sample_fetch = lis2dh_sample_fetch,
	.channel_get = lis2dh_channel_get,
};

int lis2dh_init(const struct device *dev)
{
    3394:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct lis2dh_data *lis2dh = dev->data;
	const struct lis2dh_config *cfg = dev->config;
    3396:	6846      	ldr	r6, [r0, #4]
	struct lis2dh_data *lis2dh = dev->data;
    3398:	6905      	ldr	r5, [r0, #16]
{
    339a:	4604      	mov	r4, r0
	int status;
	uint8_t id;
	uint8_t raw[6];

	lis2dh->bus = device_get_binding(cfg->bus_name);
    339c:	6830      	ldr	r0, [r6, #0]
    339e:	f001 fe59 	bl	5054 <z_impl_device_get_binding>
    33a2:	6028      	str	r0, [r5, #0]
	if (!lis2dh->bus) {
    33a4:	b918      	cbnz	r0, 33ae <lis2dh_init+0x1a>
		LOG_ERR("master not found: %s", cfg->bus_name);
		return -EINVAL;
    33a6:	f06f 0015 	mvn.w	r0, #21

	/* enable accel measurements and set power mode and data rate */
	return lis2dh->hw_tf->write_reg(dev, LIS2DH_REG_CTRL1,
					LIS2DH_ACCEL_EN_BITS | LIS2DH_LP_EN_BIT |
					LIS2DH_ODR_BITS);
}
    33aa:	b004      	add	sp, #16
    33ac:	bd70      	pop	{r4, r5, r6, pc}
	cfg->bus_init(dev);
    33ae:	6873      	ldr	r3, [r6, #4]
    33b0:	4620      	mov	r0, r4
    33b2:	4798      	blx	r3
	status = lis2dh->hw_tf->read_reg(dev, LIS2DH_REG_WAI, &id);
    33b4:	686b      	ldr	r3, [r5, #4]
    33b6:	f10d 0207 	add.w	r2, sp, #7
    33ba:	689b      	ldr	r3, [r3, #8]
    33bc:	210f      	movs	r1, #15
    33be:	4620      	mov	r0, r4
    33c0:	4798      	blx	r3
	if (status < 0) {
    33c2:	2800      	cmp	r0, #0
    33c4:	dbf1      	blt.n	33aa <lis2dh_init+0x16>
	if (id != LIS2DH_CHIP_ID) {
    33c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    33ca:	2b33      	cmp	r3, #51	; 0x33
    33cc:	d1eb      	bne.n	33a6 <lis2dh_init+0x12>
	if (cfg->is_lsm303agr_dev) {
    33ce:	7ab3      	ldrb	r3, [r6, #10]
    33d0:	b15b      	cbz	r3, 33ea <lis2dh_init+0x56>
		lis2dh_reg_val_to_scale[0] = ACCEL_SCALE(1563);
    33d2:	4b1d      	ldr	r3, [pc, #116]	; (3448 <lis2dh_init+0xb4>)
		lis2dh_reg_val_to_scale[1] = ACCEL_SCALE(3126);
    33d4:	f644 1216 	movw	r2, #18710	; 0x4916
    33d8:	f242 418b 	movw	r1, #9355	; 0x248b
    33dc:	e9c3 1200 	strd	r1, r2, [r3]
		lis2dh_reg_val_to_scale[3] = ACCEL_SCALE(18758);
    33e0:	4a1a      	ldr	r2, [pc, #104]	; (344c <lis2dh_init+0xb8>)
    33e2:	f249 202d 	movw	r0, #37421	; 0x922d
    33e6:	e9c3 0202 	strd	r0, r2, [r3, #8]
	if (cfg->disc_pull_up) {
    33ea:	7af3      	ldrb	r3, [r6, #11]
    33ec:	bb13      	cbnz	r3, 3434 <lis2dh_init+0xa0>
	(void)memset(raw, 0, sizeof(raw));
    33ee:	2206      	movs	r2, #6
    33f0:	2100      	movs	r1, #0
    33f2:	a802      	add	r0, sp, #8
    33f4:	f003 f96e 	bl	66d4 <memset>
	raw[0] = LIS2DH_ACCEL_EN_BITS;
    33f8:	2307      	movs	r3, #7
    33fa:	f88d 3008 	strb.w	r3, [sp, #8]
	status = lis2dh->hw_tf->write_data(dev, LIS2DH_REG_CTRL1, raw,
    33fe:	686b      	ldr	r3, [r5, #4]
    3400:	aa02      	add	r2, sp, #8
    3402:	685e      	ldr	r6, [r3, #4]
    3404:	2120      	movs	r1, #32
    3406:	2306      	movs	r3, #6
    3408:	4620      	mov	r0, r4
    340a:	47b0      	blx	r6
	if (status < 0) {
    340c:	2800      	cmp	r0, #0
    340e:	dbcc      	blt.n	33aa <lis2dh_init+0x16>
	lis2dh->scale = lis2dh_reg_val_to_scale[LIS2DH_FS_IDX];
    3410:	4b0d      	ldr	r3, [pc, #52]	; (3448 <lis2dh_init+0xb4>)
    3412:	681b      	ldr	r3, [r3, #0]
    3414:	612b      	str	r3, [r5, #16]
	status = lis2dh->hw_tf->write_reg(dev, LIS2DH_REG_CTRL4, LIS2DH_FS_BITS | LIS2DH_HR_BIT);
    3416:	686b      	ldr	r3, [r5, #4]
    3418:	2200      	movs	r2, #0
    341a:	68db      	ldr	r3, [r3, #12]
    341c:	2123      	movs	r1, #35	; 0x23
    341e:	4620      	mov	r0, r4
    3420:	4798      	blx	r3
	if (status < 0) {
    3422:	2800      	cmp	r0, #0
    3424:	dbc1      	blt.n	33aa <lis2dh_init+0x16>
	return lis2dh->hw_tf->write_reg(dev, LIS2DH_REG_CTRL1,
    3426:	686b      	ldr	r3, [r5, #4]
    3428:	2247      	movs	r2, #71	; 0x47
    342a:	68db      	ldr	r3, [r3, #12]
    342c:	2120      	movs	r1, #32
    342e:	4620      	mov	r0, r4
    3430:	4798      	blx	r3
    3432:	e7ba      	b.n	33aa <lis2dh_init+0x16>
		status = lis2dh->hw_tf->update_reg(dev, LIS2DH_REG_CTRL0,
    3434:	686b      	ldr	r3, [r5, #4]
    3436:	691e      	ldr	r6, [r3, #16]
    3438:	2380      	movs	r3, #128	; 0x80
    343a:	461a      	mov	r2, r3
    343c:	211e      	movs	r1, #30
    343e:	4620      	mov	r0, r4
    3440:	47b0      	blx	r6
		if (status < 0) {
    3442:	2800      	cmp	r0, #0
    3444:	dad3      	bge.n	33ee <lis2dh_init+0x5a>
    3446:	e7b0      	b.n	33aa <lis2dh_init+0x16>
    3448:	200000b0 	.word	0x200000b0
    344c:	0001b694 	.word	0x0001b694

00003450 <lis2dh_i2c_init>:

int lis2dh_i2c_init(const struct device *dev)
{
	struct lis2dh_data *data = dev->data;

	data->hw_tf = &lis2dh_i2c_transfer_fn;
    3450:	6903      	ldr	r3, [r0, #16]
    3452:	4a02      	ldr	r2, [pc, #8]	; (345c <lis2dh_i2c_init+0xc>)
    3454:	605a      	str	r2, [r3, #4]

	return 0;
}
    3456:	2000      	movs	r0, #0
    3458:	4770      	bx	lr
    345a:	bf00      	nop
    345c:	00007fa0 	.word	0x00007fa0

00003460 <lps22hb_channel_get>:
			       enum sensor_channel chan,
			       struct sensor_value *val)
{
	struct lps22hb_data *data = dev->data;

	if (chan == SENSOR_CHAN_PRESS) {
    3460:	290e      	cmp	r1, #14
{
    3462:	b530      	push	{r4, r5, lr}
	struct lps22hb_data *data = dev->data;
    3464:	6903      	ldr	r3, [r0, #16]
	if (chan == SENSOR_CHAN_PRESS) {
    3466:	d111      	bne.n	348c <lps22hb_channel_get+0x2c>
		lps22hb_press_convert(val, data->sample_press);
    3468:	6859      	ldr	r1, [r3, #4]
		(((int32_t)((raw_val) & 0x0FFF) * 100000L) >> 12);
    346a:	4811      	ldr	r0, [pc, #68]	; (34b0 <lps22hb_channel_get+0x50>)
	val->val1 = (raw_val >> 12) / 10;
    346c:	130b      	asrs	r3, r1, #12
    346e:	250a      	movs	r5, #10
		(((int32_t)((raw_val) & 0x0FFF) * 100000L) >> 12);
    3470:	f3c1 010b 	ubfx	r1, r1, #0, #12
	val->val1 = (raw_val >> 12) / 10;
    3474:	fb93 f4f5 	sdiv	r4, r3, r5
	val->val2 = (raw_val >> 12) % 10 * 100000 +
    3478:	fb05 3314 	mls	r3, r5, r4, r3
		(((int32_t)((raw_val) & 0x0FFF) * 100000L) >> 12);
    347c:	4341      	muls	r1, r0
	val->val2 = (raw_val >> 12) % 10 * 100000 +
    347e:	4343      	muls	r3, r0
	val->val1 = (raw_val >> 12) / 10;
    3480:	6014      	str	r4, [r2, #0]
	val->val2 = (raw_val >> 12) % 10 * 100000 +
    3482:	eb03 3311 	add.w	r3, r3, r1, lsr #12
	val->val2 = ((int32_t)raw_val % 100) * 10000;
    3486:	6053      	str	r3, [r2, #4]
		lps22hb_temp_convert(val, data->sample_temp);
	} else {
		return -ENOTSUP;
	}

	return 0;
    3488:	2000      	movs	r0, #0
}
    348a:	bd30      	pop	{r4, r5, pc}
	} else if (chan == SENSOR_CHAN_AMBIENT_TEMP) {
    348c:	290d      	cmp	r1, #13
    348e:	d10c      	bne.n	34aa <lps22hb_channel_get+0x4a>
		lps22hb_temp_convert(val, data->sample_temp);
    3490:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
	val->val1 = raw_val / 100;
    3494:	2064      	movs	r0, #100	; 0x64
    3496:	fb93 f1f0 	sdiv	r1, r3, r0
	val->val2 = ((int32_t)raw_val % 100) * 10000;
    349a:	fb00 3311 	mls	r3, r0, r1, r3
	val->val1 = raw_val / 100;
    349e:	6011      	str	r1, [r2, #0]
	val->val2 = ((int32_t)raw_val % 100) * 10000;
    34a0:	f242 7110 	movw	r1, #10000	; 0x2710
    34a4:	fb13 f301 	smulbb	r3, r3, r1
    34a8:	e7ed      	b.n	3486 <lps22hb_channel_get+0x26>
		return -ENOTSUP;
    34aa:	f06f 0085 	mvn.w	r0, #133	; 0x85
    34ae:	e7ec      	b.n	348a <lps22hb_channel_get+0x2a>
    34b0:	000186a0 	.word	0x000186a0

000034b4 <regulator_fixed_init_onoff>:
	.enable = enable_onoff,
	.disable = disable_onoff,
};

static int regulator_fixed_init_onoff(const struct device *dev)
{
    34b4:	b538      	push	{r3, r4, r5, lr}
	struct driver_data_onoff *data = dev->data;
    34b6:	6905      	ldr	r5, [r0, #16]
	int rc;

	data->dev = dev;
	rc = onoff_manager_init(&data->mgr, &transitions);
    34b8:	4908      	ldr	r1, [pc, #32]	; (34dc <regulator_fixed_init_onoff+0x28>)
{
    34ba:	4604      	mov	r4, r0
	data->dev = dev;
    34bc:	4628      	mov	r0, r5
    34be:	f840 4b04 	str.w	r4, [r0], #4
	rc = onoff_manager_init(&data->mgr, &transitions);
    34c2:	f002 ff2c 	bl	631e <onoff_manager_init>
	__ASSERT_NO_MSG(rc == 0);

#ifdef CONFIG_MULTITHREADING
	k_work_init_delayable(&data->dwork, onoff_worker);
    34c6:	4906      	ldr	r1, [pc, #24]	; (34e0 <regulator_fixed_init_onoff+0x2c>)
    34c8:	f105 0020 	add.w	r0, r5, #32
    34cc:	f004 f971 	bl	77b2 <k_work_init_delayable>
#endif /* CONFIG_MULTITHREADING */

	rc = common_init(dev);
    34d0:	6860      	ldr	r0, [r4, #4]
    34d2:	f003 ff21 	bl	7318 <common_init.isra.0>
	}

	LOG_INF("%s onoff: %d", dev->name, rc);

	return rc;
}
    34d6:	ea00 70e0 	and.w	r0, r0, r0, asr #31
    34da:	bd38      	pop	{r3, r4, r5, pc}
    34dc:	00008058 	.word	0x00008058
    34e0:	00007383 	.word	0x00007383

000034e4 <finalize_transition>:
{
    34e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if ((rc >= 0) && (delay_us > 0)) {
    34e8:	1e1c      	subs	r4, r3, #0
{
    34ea:	4605      	mov	r5, r0
    34ec:	460f      	mov	r7, r1
    34ee:	4690      	mov	r8, r2
	if ((rc >= 0) && (delay_us > 0)) {
    34f0:	db10      	blt.n	3514 <finalize_transition+0x30>
    34f2:	b17a      	cbz	r2, 3514 <finalize_transition+0x30>
    34f4:	ea4f 4952 	mov.w	r9, r2, lsr #17
    34f8:	03d6      	lsls	r6, r2, #15
    34fa:	2300      	movs	r3, #0
    34fc:	4a14      	ldr	r2, [pc, #80]	; (3550 <finalize_transition+0x6c>)
    34fe:	4630      	mov	r0, r6
    3500:	4649      	mov	r1, r9
    3502:	f7fd fa0b 	bl	91c <__aeabi_uldivmod>
		    || k_is_pre_kernel()
    3506:	b110      	cbz	r0, 350e <finalize_transition+0x2a>
	return !z_sys_post_kernel;
    3508:	4b12      	ldr	r3, [pc, #72]	; (3554 <finalize_transition+0x70>)
    350a:	781b      	ldrb	r3, [r3, #0]
    350c:	b943      	cbnz	r3, 3520 <finalize_transition+0x3c>
	z_impl_k_busy_wait(usec_to_wait);
    350e:	4640      	mov	r0, r8
    3510:	f004 fa5e 	bl	79d0 <z_impl_k_busy_wait>
	notify(&data->mgr, rc);
    3514:	4621      	mov	r1, r4
    3516:	1d28      	adds	r0, r5, #4
    3518:	463b      	mov	r3, r7
}
    351a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	notify(&data->mgr, rc);
    351e:	4718      	bx	r3
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    3520:	480d      	ldr	r0, [pc, #52]	; (3558 <finalize_transition+0x74>)
    3522:	4a0b      	ldr	r2, [pc, #44]	; (3550 <finalize_transition+0x6c>)
			data->notify = notify;
    3524:	652f      	str	r7, [r5, #80]	; 0x50
    3526:	1830      	adds	r0, r6, r0
			data->task = WORK_TASK_DELAY;
    3528:	f04f 0303 	mov.w	r3, #3
    352c:	f149 0100 	adc.w	r1, r9, #0
    3530:	f885 3054 	strb.w	r3, [r5, #84]	; 0x54
    3534:	2300      	movs	r3, #0
    3536:	f7fd f9f1 	bl	91c <__aeabi_uldivmod>
    353a:	4602      	mov	r2, r0
    353c:	460b      	mov	r3, r1
			rc = k_work_schedule(&data->dwork, K_USEC(delay_us));
    353e:	f105 0020 	add.w	r0, r5, #32
    3542:	f002 f995 	bl	5870 <k_work_schedule>
			if (rc >= 0) {
    3546:	1e04      	subs	r4, r0, #0
    3548:	dbe4      	blt.n	3514 <finalize_transition+0x30>
}
    354a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    354e:	bf00      	nop
    3550:	000f4240 	.word	0x000f4240
    3554:	20000bc5 	.word	0x20000bc5
    3558:	000f423f 	.word	0x000f423f

0000355c <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    355c:	b570      	push	{r4, r5, r6, lr}
		break;
	default:
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
    355e:	794b      	ldrb	r3, [r1, #5]
    3560:	2b01      	cmp	r3, #1
    3562:	d120      	bne.n	35a6 <uarte_nrfx_configure+0x4a>
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    3564:	798b      	ldrb	r3, [r1, #6]
    3566:	2b03      	cmp	r3, #3
    3568:	d11d      	bne.n	35a6 <uarte_nrfx_configure+0x4a>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    356a:	79cc      	ldrb	r4, [r1, #7]
    356c:	b10c      	cbz	r4, 3572 <uarte_nrfx_configure+0x16>
    356e:	2c01      	cmp	r4, #1
    3570:	d119      	bne.n	35a6 <uarte_nrfx_configure+0x4a>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    3572:	790a      	ldrb	r2, [r1, #4]
    3574:	b112      	cbz	r2, 357c <uarte_nrfx_configure+0x20>
    3576:	2a02      	cmp	r2, #2
    3578:	d115      	bne.n	35a6 <uarte_nrfx_configure+0x4a>
    357a:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    357c:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    357e:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    3580:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    3584:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    3586:	d062      	beq.n	364e <uarte_nrfx_configure+0xf2>
    3588:	d82b      	bhi.n	35e2 <uarte_nrfx_configure+0x86>
    358a:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    358e:	d061      	beq.n	3654 <uarte_nrfx_configure+0xf8>
    3590:	d814      	bhi.n	35bc <uarte_nrfx_configure+0x60>
    3592:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    3596:	d05f      	beq.n	3658 <uarte_nrfx_configure+0xfc>
    3598:	d808      	bhi.n	35ac <uarte_nrfx_configure+0x50>
    359a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    359e:	d05e      	beq.n	365e <uarte_nrfx_configure+0x102>
    35a0:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    35a4:	d05e      	beq.n	3664 <uarte_nrfx_configure+0x108>
    35a6:	f06f 0085 	mvn.w	r0, #133	; 0x85
    35aa:	e04f      	b.n	364c <uarte_nrfx_configure+0xf0>
    35ac:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    35b0:	d05b      	beq.n	366a <uarte_nrfx_configure+0x10e>
    35b2:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    35b6:	d1f6      	bne.n	35a6 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    35b8:	4b36      	ldr	r3, [pc, #216]	; (3694 <uarte_nrfx_configure+0x138>)
    35ba:	e03c      	b.n	3636 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
    35bc:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    35c0:	d056      	beq.n	3670 <uarte_nrfx_configure+0x114>
    35c2:	d807      	bhi.n	35d4 <uarte_nrfx_configure+0x78>
    35c4:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    35c8:	d054      	beq.n	3674 <uarte_nrfx_configure+0x118>
    35ca:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    35ce:	d1ea      	bne.n	35a6 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    35d0:	4b31      	ldr	r3, [pc, #196]	; (3698 <uarte_nrfx_configure+0x13c>)
    35d2:	e030      	b.n	3636 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
    35d4:	f647 2612 	movw	r6, #31250	; 0x7a12
    35d8:	42b3      	cmp	r3, r6
    35da:	d1e4      	bne.n	35a6 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    35dc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    35e0:	e029      	b.n	3636 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
    35e2:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    35e6:	d047      	beq.n	3678 <uarte_nrfx_configure+0x11c>
    35e8:	d813      	bhi.n	3612 <uarte_nrfx_configure+0xb6>
    35ea:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    35ee:	d046      	beq.n	367e <uarte_nrfx_configure+0x122>
    35f0:	d809      	bhi.n	3606 <uarte_nrfx_configure+0xaa>
    35f2:	f64d 26c0 	movw	r6, #56000	; 0xdac0
    35f6:	42b3      	cmp	r3, r6
    35f8:	d043      	beq.n	3682 <uarte_nrfx_configure+0x126>
    35fa:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    35fe:	d1d2      	bne.n	35a6 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    3600:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    3604:	e017      	b.n	3636 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
    3606:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    360a:	d1cc      	bne.n	35a6 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    360c:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    3610:	e011      	b.n	3636 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
    3612:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    3616:	d037      	beq.n	3688 <uarte_nrfx_configure+0x12c>
    3618:	d808      	bhi.n	362c <uarte_nrfx_configure+0xd0>
    361a:	4e20      	ldr	r6, [pc, #128]	; (369c <uarte_nrfx_configure+0x140>)
    361c:	42b3      	cmp	r3, r6
    361e:	d036      	beq.n	368e <uarte_nrfx_configure+0x132>
    3620:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    3624:	d1bf      	bne.n	35a6 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    3626:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    362a:	e004      	b.n	3636 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
    362c:	4e1c      	ldr	r6, [pc, #112]	; (36a0 <uarte_nrfx_configure+0x144>)
    362e:	42b3      	cmp	r3, r6
    3630:	d1b9      	bne.n	35a6 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    3632:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    3636:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    3638:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
    363c:	1d03      	adds	r3, r0, #4
    363e:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    3640:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    3642:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    3646:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    364a:	2000      	movs	r0, #0
}
    364c:	bd70      	pop	{r4, r5, r6, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    364e:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    3652:	e7f0      	b.n	3636 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    3654:	4b13      	ldr	r3, [pc, #76]	; (36a4 <uarte_nrfx_configure+0x148>)
    3656:	e7ee      	b.n	3636 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    3658:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    365c:	e7eb      	b.n	3636 <uarte_nrfx_configure+0xda>
		nrf_baudrate = 0x00014000;
    365e:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    3662:	e7e8      	b.n	3636 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
    3664:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    3668:	e7e5      	b.n	3636 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    366a:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    366e:	e7e2      	b.n	3636 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    3670:	4b0d      	ldr	r3, [pc, #52]	; (36a8 <uarte_nrfx_configure+0x14c>)
    3672:	e7e0      	b.n	3636 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    3674:	4b0d      	ldr	r3, [pc, #52]	; (36ac <uarte_nrfx_configure+0x150>)
    3676:	e7de      	b.n	3636 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    3678:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    367c:	e7db      	b.n	3636 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    367e:	4b0c      	ldr	r3, [pc, #48]	; (36b0 <uarte_nrfx_configure+0x154>)
    3680:	e7d9      	b.n	3636 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    3682:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    3686:	e7d6      	b.n	3636 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    3688:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    368c:	e7d3      	b.n	3636 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    368e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    3692:	e7d0      	b.n	3636 <uarte_nrfx_configure+0xda>
    3694:	0013b000 	.word	0x0013b000
    3698:	004ea000 	.word	0x004ea000
    369c:	0003d090 	.word	0x0003d090
    36a0:	000f4240 	.word	0x000f4240
    36a4:	00275000 	.word	0x00275000
    36a8:	0075c000 	.word	0x0075c000
    36ac:	003af000 	.word	0x003af000
    36b0:	013a9000 	.word	0x013a9000

000036b4 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    36b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
    36b6:	6906      	ldr	r6, [r0, #16]
{
    36b8:	4605      	mov	r5, r0
    36ba:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    36bc:	f004 f82e 	bl	771c <k_is_in_isr>
    36c0:	b910      	cbnz	r0, 36c8 <uarte_nrfx_poll_out+0x14>
    36c2:	4b2c      	ldr	r3, [pc, #176]	; (3774 <uarte_nrfx_poll_out+0xc0>)
	int key;

	if (isr_mode) {
    36c4:	781b      	ldrb	r3, [r3, #0]
    36c6:	b983      	cbnz	r3, 36ea <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    36c8:	f04f 0320 	mov.w	r3, #32
    36cc:	f3ef 8411 	mrs	r4, BASEPRI
    36d0:	f383 8812 	msr	BASEPRI_MAX, r3
    36d4:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    36d8:	6868      	ldr	r0, [r5, #4]
    36da:	f003 fef0 	bl	74be <is_tx_ready.isra.0>
    36de:	bb28      	cbnz	r0, 372c <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
    36e0:	f384 8811 	msr	BASEPRI, r4
    36e4:	f3bf 8f6f 	isb	sy
}
    36e8:	e7ee      	b.n	36c8 <uarte_nrfx_poll_out+0x14>
{
    36ea:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    36ec:	6868      	ldr	r0, [r5, #4]
    36ee:	f003 fee6 	bl	74be <is_tx_ready.isra.0>
    36f2:	b970      	cbnz	r0, 3712 <uarte_nrfx_poll_out+0x5e>
    36f4:	2001      	movs	r0, #1
    36f6:	f003 ff3b 	bl	7570 <nrfx_busy_wait>
    36fa:	3c01      	subs	r4, #1
    36fc:	d1f6      	bne.n	36ec <uarte_nrfx_poll_out+0x38>
	return z_impl_k_sleep(timeout);
    36fe:	2100      	movs	r1, #0
    3700:	2021      	movs	r0, #33	; 0x21
    3702:	f002 fb91 	bl	5e28 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    3706:	e7f0      	b.n	36ea <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    3708:	f384 8811 	msr	BASEPRI, r4
    370c:	f3bf 8f6f 	isb	sy
}
    3710:	e7f5      	b.n	36fe <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
    3712:	f04f 0320 	mov.w	r3, #32
    3716:	f3ef 8411 	mrs	r4, BASEPRI
    371a:	f383 8812 	msr	BASEPRI_MAX, r3
    371e:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    3722:	6868      	ldr	r0, [r5, #4]
    3724:	f003 fecb 	bl	74be <is_tx_ready.isra.0>
    3728:	2800      	cmp	r0, #0
    372a:	d0ed      	beq.n	3708 <uarte_nrfx_poll_out+0x54>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
    372c:	f806 7f10 	strb.w	r7, [r6, #16]!
	tx_start(dev, &data->char_out, 1);
    3730:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
    3732:	680b      	ldr	r3, [r1, #0]
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
    3734:	2201      	movs	r2, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    3736:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    373a:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    373e:	2200      	movs	r2, #0
    3740:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    3744:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    3748:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    374c:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    3750:	684a      	ldr	r2, [r1, #4]
    3752:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    3754:	bf41      	itttt	mi
    3756:	2208      	movmi	r2, #8
    3758:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    375c:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    3760:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3764:	2201      	movs	r2, #1
    3766:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    3768:	f384 8811 	msr	BASEPRI, r4
    376c:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    3770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3772:	bf00      	nop
    3774:	20000bc5 	.word	0x20000bc5

00003778 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    3778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    377c:	2101      	movs	r1, #1
    377e:	4606      	mov	r6, r0
    3780:	2200      	movs	r2, #0
    3782:	2002      	movs	r0, #2
    3784:	f7fe fcae 	bl	20e4 <z_arm_irq_priority_set>
    3788:	2002      	movs	r0, #2
    378a:	f7fe fc79 	bl	2080 <arch_irq_enable>
	const struct uarte_nrfx_config *config = dev->config;
    378e:	6877      	ldr	r7, [r6, #4]
	struct uarte_nrfx_data *data = dev->data;
    3790:	6935      	ldr	r5, [r6, #16]
	return config->uarte_regs;
    3792:	683c      	ldr	r4, [r7, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    3794:	2300      	movs	r3, #0
    3796:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	data->dev = dev;
    379a:	602e      	str	r6, [r5, #0]
	uarte_nrfx_pins_configure(dev, false);
    379c:	6873      	ldr	r3, [r6, #4]
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    379e:	68d8      	ldr	r0, [r3, #12]
    37a0:	1c41      	adds	r1, r0, #1
    37a2:	d00c      	beq.n	37be <uarte_0_init+0x46>
    *p_pin = pin_number & 0x1F;
    37a4:	f000 021f 	and.w	r2, r0, #31
    p_reg->OUTSET = set_mask;
    37a8:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    37ac:	2101      	movs	r1, #1
    37ae:	4091      	lsls	r1, r2
    reg->PIN_CNF[pin_number] = cnf;
    37b0:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    p_reg->OUTSET = set_mask;
    37b4:	f8cc 1508 	str.w	r1, [ip, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = cnf;
    37b8:	2103      	movs	r1, #3
    37ba:	f84c 1022 	str.w	r1, [ip, r2, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    37be:	6919      	ldr	r1, [r3, #16]
    37c0:	1c4a      	adds	r2, r1, #1
    37c2:	d010      	beq.n	37e6 <uarte_0_init+0x6e>
			nrf_gpio_cfg_input(cfg->rx_pin,
    37c4:	7f1a      	ldrb	r2, [r3, #28]
    37c6:	2a00      	cmp	r2, #0
    *p_pin = pin_number & 0x1F;
    37c8:	f001 021f 	and.w	r2, r1, #31
    37cc:	bf14      	ite	ne
    37ce:	f04f 0c03 	movne.w	ip, #3
    37d2:	f04f 0c00 	moveq.w	ip, #0
    reg->PIN_CNF[pin_number] = cnf;
    37d6:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    37da:	f04f 4ea0 	mov.w	lr, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    37de:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    37e2:	f84e c022 	str.w	ip, [lr, r2, lsl #2]
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    37e6:	f8d3 c014 	ldr.w	ip, [r3, #20]
    37ea:	f1bc 3fff 	cmp.w	ip, #4294967295	; 0xffffffff
    37ee:	d00f      	beq.n	3810 <uarte_0_init+0x98>
    *p_pin = pin_number & 0x1F;
    37f0:	f00c 021f 	and.w	r2, ip, #31
    p_reg->OUTSET = set_mask;
    37f4:	f04f 48a0 	mov.w	r8, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    37f8:	f04f 0e01 	mov.w	lr, #1
    37fc:	fa0e fe02 	lsl.w	lr, lr, r2
    reg->PIN_CNF[pin_number] = cnf;
    3800:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    p_reg->OUTSET = set_mask;
    3804:	f8c8 e508 	str.w	lr, [r8, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = cnf;
    3808:	f04f 0e03 	mov.w	lr, #3
    380c:	f848 e022 	str.w	lr, [r8, r2, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    3810:	f8d3 e018 	ldr.w	lr, [r3, #24]
    3814:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
    3818:	d010      	beq.n	383c <uarte_0_init+0xc4>
			nrf_gpio_cfg_input(cfg->cts_pin,
    381a:	7f5a      	ldrb	r2, [r3, #29]
    381c:	2a00      	cmp	r2, #0
    *p_pin = pin_number & 0x1F;
    381e:	f00e 021f 	and.w	r2, lr, #31
    3822:	bf14      	ite	ne
    3824:	f04f 0803 	movne.w	r8, #3
    3828:	f04f 0800 	moveq.w	r8, #0
    reg->PIN_CNF[pin_number] = cnf;
    382c:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    3830:	f04f 49a0 	mov.w	r9, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    3834:	ea4f 0888 	mov.w	r8, r8, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    3838:	f849 8022 	str.w	r8, [r9, r2, lsl #2]
	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
    383c:	681b      	ldr	r3, [r3, #0]
    p_reg->PSEL.TXD = pseltxd;
    383e:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    3842:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	err = uarte_nrfx_configure(dev, &data->uart_config);
    3846:	4630      	mov	r0, r6
    p_reg->PSEL.RTS = pselrts;
    3848:	f8c3 c508 	str.w	ip, [r3, #1288]	; 0x508
    384c:	1d29      	adds	r1, r5, #4
    p_reg->PSEL.CTS = pselcts;
    384e:	f8c3 e510 	str.w	lr, [r3, #1296]	; 0x510
    3852:	f7ff fe83 	bl	355c <uarte_nrfx_configure>
	if (err) {
    3856:	4606      	mov	r6, r0
    3858:	2800      	cmp	r0, #0
    385a:	d143      	bne.n	38e4 <uarte_0_init+0x16c>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    385c:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    385e:	0799      	lsls	r1, r3, #30
    3860:	d519      	bpl.n	3896 <uarte_0_init+0x11e>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    3862:	f105 0012 	add.w	r0, r5, #18
    3866:	f001 f821 	bl	48ac <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    386a:	4b21      	ldr	r3, [pc, #132]	; (38f0 <uarte_0_init+0x178>)
    386c:	4298      	cmp	r0, r3
    386e:	d13c      	bne.n	38ea <uarte_0_init+0x172>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    3870:	7ca8      	ldrb	r0, [r5, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    3872:	00c3      	lsls	r3, r0, #3
    3874:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3878:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    387c:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    3880:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    3884:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    3888:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    388c:	4a19      	ldr	r2, [pc, #100]	; (38f4 <uarte_0_init+0x17c>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    388e:	2301      	movs	r3, #1
    3890:	4083      	lsls	r3, r0
    3892:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    3896:	2308      	movs	r3, #8
    3898:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
    389c:	7a3b      	ldrb	r3, [r7, #8]
    389e:	b95b      	cbnz	r3, 38b8 <uarte_0_init+0x140>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    38a0:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    38a4:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    38a8:	f105 0311 	add.w	r3, r5, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    38ac:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    38b0:	2301      	movs	r3, #1
    38b2:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    38b6:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    38b8:	687b      	ldr	r3, [r7, #4]
    38ba:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    38bc:	bf5c      	itt	pl
    38be:	f44f 7280 	movpl.w	r2, #256	; 0x100
    38c2:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    38c6:	06db      	lsls	r3, r3, #27
    38c8:	bf44      	itt	mi
    38ca:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    38ce:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    38d2:	3510      	adds	r5, #16
    p_reg->TXD.MAXCNT = length;
    38d4:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    38d6:	f8c4 5544 	str.w	r5, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    38da:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    38de:	2301      	movs	r3, #1
    38e0:	60a3      	str	r3, [r4, #8]
    38e2:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
    38e4:	4630      	mov	r0, r6
    38e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    38ea:	f06f 0604 	mvn.w	r6, #4
UART_NRF_UARTE_DEVICE(0);
    38ee:	e7f9      	b.n	38e4 <uarte_0_init+0x16c>
    38f0:	0bad0000 	.word	0x0bad0000
    38f4:	4001f000 	.word	0x4001f000

000038f8 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    38f8:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    38fa:	2301      	movs	r3, #1
    38fc:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    38fe:	4a11      	ldr	r2, [pc, #68]	; (3944 <compare_int_lock+0x4c>)
    3900:	f3bf 8f5b 	dmb	ish
    3904:	43dc      	mvns	r4, r3
    3906:	e852 1f00 	ldrex	r1, [r2]
    390a:	ea01 0c04 	and.w	ip, r1, r4
    390e:	e842 ce00 	strex	lr, ip, [r2]
    3912:	f1be 0f00 	cmp.w	lr, #0
    3916:	d1f6      	bne.n	3906 <compare_int_lock+0xe>
    3918:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    391c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    3920:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    3924:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    3928:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    392c:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    3930:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3934:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    3938:	420b      	tst	r3, r1
}
    393a:	bf14      	ite	ne
    393c:	2001      	movne	r0, #1
    393e:	2000      	moveq	r0, #0
    3940:	bd10      	pop	{r4, pc}
    3942:	bf00      	nop
    3944:	20000620 	.word	0x20000620

00003948 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    3948:	4919      	ldr	r1, [pc, #100]	; (39b0 <sys_clock_timeout_handler+0x68>)
{
    394a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    394c:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    394e:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    3952:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    3954:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    3958:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    395c:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    395e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    3962:	d222      	bcs.n	39aa <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    3964:	4b13      	ldr	r3, [pc, #76]	; (39b4 <sys_clock_timeout_handler+0x6c>)
    3966:	681b      	ldr	r3, [r3, #0]
    3968:	0a1a      	lsrs	r2, r3, #8
    396a:	061b      	lsls	r3, r3, #24
    396c:	195e      	adds	r6, r3, r5
    396e:	4b12      	ldr	r3, [pc, #72]	; (39b8 <sys_clock_timeout_handler+0x70>)
    3970:	f142 0700 	adc.w	r7, r2, #0
    3974:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
    3978:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    397a:	f002 fbb7 	bl	60ec <sys_clock_announce>
    return p_reg->CC[ch];
    397e:	00a3      	lsls	r3, r4, #2
    3980:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3984:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    3988:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    398c:	42aa      	cmp	r2, r5
    398e:	d10b      	bne.n	39a8 <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
    3990:	b91e      	cbnz	r6, 399a <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
    3992:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    3996:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    399a:	4b08      	ldr	r3, [pc, #32]	; (39bc <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    399c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    39a0:	fa00 f404 	lsl.w	r4, r0, r4
    39a4:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    39a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    39aa:	2600      	movs	r6, #0
    39ac:	e7e5      	b.n	397a <sys_clock_timeout_handler+0x32>
    39ae:	bf00      	nop
    39b0:	20000358 	.word	0x20000358
    39b4:	20000624 	.word	0x20000624
    39b8:	20000340 	.word	0x20000340
    39bc:	40011000 	.word	0x40011000

000039c0 <compare_int_unlock>:
	if (key) {
    39c0:	b319      	cbz	r1, 3a0a <compare_int_unlock+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    39c2:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    39c6:	2301      	movs	r3, #1
    39c8:	4a10      	ldr	r2, [pc, #64]	; (3a0c <compare_int_unlock+0x4c>)
    39ca:	4083      	lsls	r3, r0
    39cc:	e852 1f00 	ldrex	r1, [r2]
    39d0:	4319      	orrs	r1, r3
    39d2:	e842 1c00 	strex	ip, r1, [r2]
    39d6:	f1bc 0f00 	cmp.w	ip, #0
    39da:	d1f7      	bne.n	39cc <compare_int_unlock+0xc>
    39dc:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    39e0:	4a0b      	ldr	r2, [pc, #44]	; (3a10 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    39e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    39e6:	4083      	lsls	r3, r0
    39e8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    39ec:	4b09      	ldr	r3, [pc, #36]	; (3a14 <compare_int_unlock+0x54>)
    39ee:	f3bf 8f5b 	dmb	ish
    39f2:	681b      	ldr	r3, [r3, #0]
    39f4:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    39f8:	fa23 f000 	lsr.w	r0, r3, r0
    39fc:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    39fe:	bf42      	ittt	mi
    3a00:	4b05      	ldrmi	r3, [pc, #20]	; (3a18 <compare_int_unlock+0x58>)
    3a02:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    3a06:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    3a0a:	4770      	bx	lr
    3a0c:	20000620 	.word	0x20000620
    3a10:	40011000 	.word	0x40011000
    3a14:	2000061c 	.word	0x2000061c
    3a18:	e000e100 	.word	0xe000e100

00003a1c <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    3a1c:	4b0d      	ldr	r3, [pc, #52]	; (3a54 <z_nrf_rtc_timer_read+0x38>)
    3a1e:	6818      	ldr	r0, [r3, #0]
    3a20:	0a01      	lsrs	r1, r0, #8
    3a22:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    3a24:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    3a28:	4b0b      	ldr	r3, [pc, #44]	; (3a58 <z_nrf_rtc_timer_read+0x3c>)
    3a2a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    3a2e:	1818      	adds	r0, r3, r0
    3a30:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    3a34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    3a38:	d20a      	bcs.n	3a50 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    3a3a:	4b08      	ldr	r3, [pc, #32]	; (3a5c <z_nrf_rtc_timer_read+0x40>)
    3a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
    3a40:	4290      	cmp	r0, r2
    3a42:	eb71 0303 	sbcs.w	r3, r1, r3
    3a46:	d203      	bcs.n	3a50 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    3a48:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    3a4c:	f141 0100 	adc.w	r1, r1, #0
}
    3a50:	4770      	bx	lr
    3a52:	bf00      	nop
    3a54:	20000624 	.word	0x20000624
    3a58:	40011000 	.word	0x40011000
    3a5c:	20000340 	.word	0x20000340

00003a60 <compare_set>:
{
    3a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3a64:	b085      	sub	sp, #20
    3a66:	4616      	mov	r6, r2
    3a68:	4698      	mov	r8, r3
    3a6a:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
    3a6c:	f7ff ff44 	bl	38f8 <compare_int_lock>
    3a70:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    3a72:	f7ff ffd3 	bl	3a1c <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    3a76:	42b0      	cmp	r0, r6
    3a78:	eb71 0308 	sbcs.w	r3, r1, r8
    3a7c:	d278      	bcs.n	3b70 <compare_set+0x110>
		if (target_time - curr_time > COUNTER_SPAN) {
    3a7e:	4b46      	ldr	r3, [pc, #280]	; (3b98 <compare_set+0x138>)
    3a80:	1a30      	subs	r0, r6, r0
    3a82:	eb68 0101 	sbc.w	r1, r8, r1
    3a86:	4298      	cmp	r0, r3
    3a88:	f171 0300 	sbcs.w	r3, r1, #0
    3a8c:	f080 8081 	bcs.w	3b92 <compare_set+0x132>
		if (target_time != cc_data[chan].target_time) {
    3a90:	4b42      	ldr	r3, [pc, #264]	; (3b9c <compare_set+0x13c>)
    3a92:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    3a96:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
    3a9a:	45d8      	cmp	r8, fp
    3a9c:	bf08      	it	eq
    3a9e:	4556      	cmpeq	r6, sl
    3aa0:	d051      	beq.n	3b46 <compare_set+0xe6>
    3aa2:	ea4f 0985 	mov.w	r9, r5, lsl #2
    3aa6:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    3aaa:	f105 0750 	add.w	r7, r5, #80	; 0x50
    3aae:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
    3ab2:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3ab4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    3ab8:	fa01 f305 	lsl.w	r3, r1, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3abc:	b2bf      	uxth	r7, r7
	return absolute_time & COUNTER_MAX;
    3abe:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
    3ac2:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3ac6:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
    3ac8:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    3acc:	4b34      	ldr	r3, [pc, #208]	; (3ba0 <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3ace:	f507 3788 	add.w	r7, r7, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    3ad2:	4614      	mov	r4, r2
     return p_reg->COUNTER;
    3ad4:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    3ad8:	1a40      	subs	r0, r0, r1
    3ada:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    3ade:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    3ae2:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    3ae4:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
    3ae8:	d107      	bne.n	3afa <compare_set+0x9a>
    3aea:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
    3aee:	2013      	movs	r0, #19
    3af0:	f003 ff6e 	bl	79d0 <z_impl_k_busy_wait>
    3af4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    3af8:	4b29      	ldr	r3, [pc, #164]	; (3ba0 <compare_set+0x140>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    3afa:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
    3afe:	eba4 000c 	sub.w	r0, r4, ip
    3b02:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    3b06:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3b0a:	bf88      	it	hi
    3b0c:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3b0e:	2000      	movs	r0, #0
    3b10:	6038      	str	r0, [r7, #0]
    3b12:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
    3b14:	9801      	ldr	r0, [sp, #4]
    3b16:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    3b1a:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    3b1e:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    3b22:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    3b26:	4281      	cmp	r1, r0
    3b28:	d006      	beq.n	3b38 <compare_set+0xd8>
	return (a - b) & COUNTER_MAX;
    3b2a:	1a20      	subs	r0, r4, r0
    3b2c:	3802      	subs	r0, #2
    3b2e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    3b32:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3b36:	d819      	bhi.n	3b6c <compare_set+0x10c>
	return (a - b) & COUNTER_MAX;
    3b38:	1aa4      	subs	r4, r4, r2
    3b3a:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    3b3e:	eb14 0a06 	adds.w	sl, r4, r6
    3b42:	f148 0b00 	adc.w	fp, r8, #0
	cc_data[chan].target_time = target_time;
    3b46:	4915      	ldr	r1, [pc, #84]	; (3b9c <compare_set+0x13c>)
	cc_data[chan].callback = handler;
    3b48:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
    3b4a:	012b      	lsls	r3, r5, #4
    3b4c:	eb01 1205 	add.w	r2, r1, r5, lsl #4
    3b50:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].callback = handler;
    3b54:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    3b56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    3b58:	6053      	str	r3, [r2, #4]
	return ret;
    3b5a:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
    3b5c:	4628      	mov	r0, r5
    3b5e:	9900      	ldr	r1, [sp, #0]
    3b60:	f7ff ff2e 	bl	39c0 <compare_int_unlock>
}
    3b64:	4620      	mov	r0, r4
    3b66:	b005      	add	sp, #20
    3b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3b6c:	4620      	mov	r0, r4
    3b6e:	e7b1      	b.n	3ad4 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    3b70:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3b72:	4a0c      	ldr	r2, [pc, #48]	; (3ba4 <compare_set+0x144>)
    3b74:	f3bf 8f5b 	dmb	ish
    3b78:	40ab      	lsls	r3, r5
    3b7a:	e852 1f00 	ldrex	r1, [r2]
    3b7e:	4319      	orrs	r1, r3
    3b80:	e842 1000 	strex	r0, r1, [r2]
    3b84:	2800      	cmp	r0, #0
    3b86:	d1f8      	bne.n	3b7a <compare_set+0x11a>
    3b88:	f3bf 8f5b 	dmb	ish
    3b8c:	46b2      	mov	sl, r6
    3b8e:	46c3      	mov	fp, r8
    3b90:	e7d9      	b.n	3b46 <compare_set+0xe6>
			return -EINVAL;
    3b92:	f06f 0415 	mvn.w	r4, #21
    3b96:	e7e1      	b.n	3b5c <compare_set+0xfc>
    3b98:	01000001 	.word	0x01000001
    3b9c:	20000348 	.word	0x20000348
    3ba0:	40011000 	.word	0x40011000
    3ba4:	2000061c 	.word	0x2000061c

00003ba8 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    3ba8:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    3baa:	4b19      	ldr	r3, [pc, #100]	; (3c10 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    3bac:	4d19      	ldr	r5, [pc, #100]	; (3c14 <sys_clock_driver_init+0x6c>)
    3bae:	2400      	movs	r4, #0
    3bb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3bb4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3bb8:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    3bbc:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    3bc0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3bc4:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3bc8:	4b13      	ldr	r3, [pc, #76]	; (3c18 <sys_clock_driver_init+0x70>)
    3bca:	2602      	movs	r6, #2
    3bcc:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    3bd0:	2101      	movs	r1, #1
    3bd2:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    3bd6:	2011      	movs	r0, #17
    3bd8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    3bdc:	4622      	mov	r2, r4
    3bde:	f7fe fa81 	bl	20e4 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    3be2:	2011      	movs	r0, #17
    3be4:	f7fe fa4c 	bl	2080 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    3be8:	4a0c      	ldr	r2, [pc, #48]	; (3c1c <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    3bea:	2301      	movs	r3, #1
    3bec:	60ab      	str	r3, [r5, #8]
    3bee:	602b      	str	r3, [r5, #0]
    3bf0:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    3bf2:	4b0b      	ldr	r3, [pc, #44]	; (3c20 <sys_clock_driver_init+0x78>)
    3bf4:	4a0b      	ldr	r2, [pc, #44]	; (3c24 <sys_clock_driver_init+0x7c>)
    3bf6:	9300      	str	r3, [sp, #0]
    3bf8:	9401      	str	r4, [sp, #4]
    3bfa:	2300      	movs	r3, #0
    3bfc:	4620      	mov	r0, r4
    3bfe:	f7ff ff2f 	bl	3a60 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    3c02:	4630      	mov	r0, r6
    3c04:	f7fe feda 	bl	29bc <z_nrf_clock_control_lf_on>

	return 0;
}
    3c08:	4620      	mov	r0, r4
    3c0a:	b002      	add	sp, #8
    3c0c:	bd70      	pop	{r4, r5, r6, pc}
    3c0e:	bf00      	nop
    3c10:	20000348 	.word	0x20000348
    3c14:	40011000 	.word	0x40011000
    3c18:	e000e100 	.word	0xe000e100
    3c1c:	20000620 	.word	0x20000620
    3c20:	00003949 	.word	0x00003949
    3c24:	007fffff 	.word	0x007fffff

00003c28 <rtc_nrf_isr>:
{
    3c28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    3c2c:	4c35      	ldr	r4, [pc, #212]	; (3d04 <rtc_nrf_isr+0xdc>)
    3c2e:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    3c32:	079a      	lsls	r2, r3, #30
    3c34:	d50b      	bpl.n	3c4e <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3c36:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    3c3a:	b143      	cbz	r3, 3c4e <rtc_nrf_isr+0x26>
		overflow_cnt++;
    3c3c:	4a32      	ldr	r2, [pc, #200]	; (3d08 <rtc_nrf_isr+0xe0>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3c3e:	2300      	movs	r3, #0
    3c40:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    3c44:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    3c48:	6813      	ldr	r3, [r2, #0]
    3c4a:	3301      	adds	r3, #1
    3c4c:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    3c4e:	f04f 0320 	mov.w	r3, #32
    3c52:	f3ef 8211 	mrs	r2, BASEPRI
    3c56:	f383 8812 	msr	BASEPRI_MAX, r3
    3c5a:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    3c5e:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    3c62:	03db      	lsls	r3, r3, #15
    3c64:	d512      	bpl.n	3c8c <rtc_nrf_isr+0x64>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3c66:	f3bf 8f5b 	dmb	ish
    3c6a:	4b28      	ldr	r3, [pc, #160]	; (3d0c <rtc_nrf_isr+0xe4>)
    3c6c:	e853 1f00 	ldrex	r1, [r3]
    3c70:	f021 0001 	bic.w	r0, r1, #1
    3c74:	e843 0600 	strex	r6, r0, [r3]
    3c78:	2e00      	cmp	r6, #0
    3c7a:	d1f7      	bne.n	3c6c <rtc_nrf_isr+0x44>
    3c7c:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    3c80:	2900      	cmp	r1, #0
    3c82:	d136      	bne.n	3cf2 <rtc_nrf_isr+0xca>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3c84:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		if (result) {
    3c88:	2b00      	cmp	r3, #0
    3c8a:	d132      	bne.n	3cf2 <rtc_nrf_isr+0xca>
{
    3c8c:	2300      	movs	r3, #0
	__asm__ volatile(
    3c8e:	f382 8811 	msr	BASEPRI, r2
    3c92:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
    3c96:	b34b      	cbz	r3, 3cec <rtc_nrf_isr+0xc4>
		curr_time = z_nrf_rtc_timer_read();
    3c98:	f7ff fec0 	bl	3a1c <z_nrf_rtc_timer_read>
	__asm__ volatile(
    3c9c:	f04f 0320 	mov.w	r3, #32
    3ca0:	f3ef 8c11 	mrs	ip, BASEPRI
    3ca4:	f383 8812 	msr	BASEPRI_MAX, r3
    3ca8:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    3cac:	4b18      	ldr	r3, [pc, #96]	; (3d10 <rtc_nrf_isr+0xe8>)
    3cae:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    3cb2:	42b0      	cmp	r0, r6
    3cb4:	eb71 0207 	sbcs.w	r2, r1, r7
    3cb8:	f04f 0200 	mov.w	r2, #0
    3cbc:	d320      	bcc.n	3d00 <rtc_nrf_isr+0xd8>
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    3cbe:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    3cc2:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
    3cc6:	e9d3 1500 	ldrd	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    3cca:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
    3cce:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    3cd0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3cd4:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	__asm__ volatile(
    3cd8:	f38c 8811 	msr	BASEPRI, ip
    3cdc:	f3bf 8f6f 	isb	sy
		if (handler) {
    3ce0:	b121      	cbz	r1, 3cec <rtc_nrf_isr+0xc4>
			handler(chan, expire_time, user_context);
    3ce2:	9500      	str	r5, [sp, #0]
    3ce4:	4632      	mov	r2, r6
    3ce6:	463b      	mov	r3, r7
    3ce8:	2000      	movs	r0, #0
    3cea:	4788      	blx	r1
}
    3cec:	b003      	add	sp, #12
    3cee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3cf2:	2300      	movs	r3, #0
    3cf4:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    3cf8:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    3cfc:	2301      	movs	r3, #1
}
    3cfe:	e7c6      	b.n	3c8e <rtc_nrf_isr+0x66>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    3d00:	4611      	mov	r1, r2
    3d02:	e7e9      	b.n	3cd8 <rtc_nrf_isr+0xb0>
    3d04:	40011000 	.word	0x40011000
    3d08:	20000624 	.word	0x20000624
    3d0c:	2000061c 	.word	0x2000061c
    3d10:	20000348 	.word	0x20000348

00003d14 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    3d14:	1c43      	adds	r3, r0, #1
{
    3d16:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    3d18:	d021      	beq.n	3d5e <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    3d1a:	2801      	cmp	r0, #1
    3d1c:	dd21      	ble.n	3d62 <sys_clock_set_timeout+0x4e>
    3d1e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3d22:	da20      	bge.n	3d66 <sys_clock_set_timeout+0x52>
    3d24:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    3d26:	f7ff fe79 	bl	3a1c <z_nrf_rtc_timer_read>
    3d2a:	4b10      	ldr	r3, [pc, #64]	; (3d6c <sys_clock_set_timeout+0x58>)
    3d2c:	e9d3 1300 	ldrd	r1, r3, [r3]
    3d30:	1a40      	subs	r0, r0, r1
		ticks = 0;
    3d32:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3d36:	bf28      	it	cs
    3d38:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    3d3a:	3001      	adds	r0, #1
    3d3c:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
    3d3e:	480c      	ldr	r0, [pc, #48]	; (3d70 <sys_clock_set_timeout+0x5c>)
    3d40:	4282      	cmp	r2, r0
    3d42:	bf28      	it	cs
    3d44:	4602      	movcs	r2, r0
    3d46:	1852      	adds	r2, r2, r1
    3d48:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    3d4c:	4909      	ldr	r1, [pc, #36]	; (3d74 <sys_clock_set_timeout+0x60>)
    3d4e:	9001      	str	r0, [sp, #4]
    3d50:	9100      	str	r1, [sp, #0]
    3d52:	f143 0300 	adc.w	r3, r3, #0
    3d56:	f7ff fe83 	bl	3a60 <compare_set>
}
    3d5a:	b002      	add	sp, #8
    3d5c:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    3d5e:	4804      	ldr	r0, [pc, #16]	; (3d70 <sys_clock_set_timeout+0x5c>)
    3d60:	e7e0      	b.n	3d24 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    3d62:	2400      	movs	r4, #0
    3d64:	e7df      	b.n	3d26 <sys_clock_set_timeout+0x12>
    3d66:	4c02      	ldr	r4, [pc, #8]	; (3d70 <sys_clock_set_timeout+0x5c>)
    3d68:	e7dd      	b.n	3d26 <sys_clock_set_timeout+0x12>
    3d6a:	bf00      	nop
    3d6c:	20000358 	.word	0x20000358
    3d70:	007fffff 	.word	0x007fffff
    3d74:	00003949 	.word	0x00003949

00003d78 <sys_clock_elapsed>:
{
    3d78:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    3d7a:	f7ff fe4f 	bl	3a1c <z_nrf_rtc_timer_read>
    3d7e:	4b02      	ldr	r3, [pc, #8]	; (3d88 <sys_clock_elapsed+0x10>)
    3d80:	681b      	ldr	r3, [r3, #0]
}
    3d82:	1ac0      	subs	r0, r0, r3
    3d84:	bd08      	pop	{r3, pc}
    3d86:	bf00      	nop
    3d88:	20000358 	.word	0x20000358

00003d8c <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    3d8c:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    3d90:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    3d94:	2a06      	cmp	r2, #6
    3d96:	d109      	bne.n	3dac <nrf52_errata_16+0x20>
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    3d98:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    3d9c:	f3c3 1303 	ubfx	r3, r3, #4, #4
    3da0:	3b03      	subs	r3, #3
    3da2:	2b04      	cmp	r3, #4
    3da4:	d802      	bhi.n	3dac <nrf52_errata_16+0x20>
    3da6:	4a02      	ldr	r2, [pc, #8]	; (3db0 <nrf52_errata_16+0x24>)
    3da8:	5cd0      	ldrb	r0, [r2, r3]
    3daa:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
    3dac:	2000      	movs	r0, #0
    #endif
}
    3dae:	4770      	bx	lr
    3db0:	00008271 	.word	0x00008271

00003db4 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    3db4:	4a02      	ldr	r2, [pc, #8]	; (3dc0 <nvmc_wait+0xc>)
    3db6:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    3dba:	2b00      	cmp	r3, #0
    3dbc:	d0fb      	beq.n	3db6 <nvmc_wait+0x2>
}
    3dbe:	4770      	bx	lr
    3dc0:	4001e000 	.word	0x4001e000

00003dc4 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    3dc4:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_12_ENABLE_WORKAROUND
        /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_12()){
    3dc6:	f003 fbc4 	bl	7552 <nrf52_errata_108>
    3dca:	b140      	cbz	r0, 3dde <SystemInit+0x1a>
            *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
    3dcc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    3dd0:	4a90      	ldr	r2, [pc, #576]	; (4014 <SystemInit+0x250>)
    3dd2:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
    3dd6:	f3c3 2304 	ubfx	r3, r3, #8, #5
    3dda:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    #endif

    #if NRF52_ERRATA_16_ENABLE_WORKAROUND
        /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_16()){
    3dde:	f7ff ffd5 	bl	3d8c <nrf52_errata_16>
    3de2:	b110      	cbz	r0, 3dea <SystemInit+0x26>
            *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    3de4:	4b8c      	ldr	r3, [pc, #560]	; (4018 <SystemInit+0x254>)
    3de6:	4a8d      	ldr	r2, [pc, #564]	; (401c <SystemInit+0x258>)
    3de8:	675a      	str	r2, [r3, #116]	; 0x74
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
    3dea:	f003 fbb2 	bl	7552 <nrf52_errata_108>
    3dee:	b148      	cbz	r0, 3e04 <SystemInit+0x40>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    3df0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    3df4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3df8:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
    3dfc:	f3c3 3342 	ubfx	r3, r3, #13, #3
    3e00:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
    #endif

    #if NRF52_ERRATA_32_ENABLE_WORKAROUND
        /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_32()){
    3e04:	f7ff ffc2 	bl	3d8c <nrf52_errata_16>
    3e08:	b130      	cbz	r0, 3e18 <SystemInit+0x54>
            CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    3e0a:	4a85      	ldr	r2, [pc, #532]	; (4020 <SystemInit+0x25c>)
    3e0c:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    3e10:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    3e14:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    3e18:	f003 fb9b 	bl	7552 <nrf52_errata_108>
    3e1c:	b140      	cbz	r0, 3e30 <SystemInit+0x6c>
            NRF_CLOCK->EVENTS_DONE = 0;
    3e1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3e22:	2200      	movs	r2, #0
    3e24:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    3e28:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    3e2c:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_37_ENABLE_WORKAROUND
        /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_37()){
    3e30:	f7ff ffac 	bl	3d8c <nrf52_errata_16>
    3e34:	b120      	cbz	r0, 3e40 <SystemInit+0x7c>
            *(volatile uint32_t *)0x400005A0 = 0x3;
    3e36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3e3a:	2203      	movs	r2, #3
    3e3c:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
    #endif

    #if NRF52_ERRATA_57_ENABLE_WORKAROUND
        /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_57()){
    3e40:	f7ff ffa4 	bl	3d8c <nrf52_errata_16>
    3e44:	b160      	cbz	r0, 3e60 <SystemInit+0x9c>
            *(volatile uint32_t *)0x40005610 = 0x00000005;
    3e46:	4b77      	ldr	r3, [pc, #476]	; (4024 <SystemInit+0x260>)
    3e48:	2205      	movs	r2, #5
    3e4a:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
            *(volatile uint32_t *)0x40005688 = 0x00000001;
    3e4e:	2201      	movs	r2, #1
    3e50:	f8c3 2688 	str.w	r2, [r3, #1672]	; 0x688
            *(volatile uint32_t *)0x40005618 = 0x00000000;
    3e54:	2200      	movs	r2, #0
    3e56:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
            *(volatile uint32_t *)0x40005614 = 0x0000003F;
    3e5a:	223f      	movs	r2, #63	; 0x3f
    3e5c:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    3e60:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    3e64:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    3e68:	1c51      	adds	r1, r2, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    3e6a:	bf09      	itett	eq
    3e6c:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
    3e70:	f8d3 3134 	ldrne.w	r3, [r3, #308]	; 0x134
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    3e74:	f893 2fe0 	ldrbeq.w	r2, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    3e78:	f8d3 3fe8 	ldreq.w	r3, [r3, #4072]	; 0xfe8
    3e7c:	bf08      	it	eq
    3e7e:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    3e82:	2a06      	cmp	r2, #6
    3e84:	d14d      	bne.n	3f22 <SystemInit+0x15e>
            {
                switch(var2)
    3e86:	3b03      	subs	r3, #3
    3e88:	2b04      	cmp	r3, #4
    3e8a:	d803      	bhi.n	3e94 <SystemInit+0xd0>
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    3e8c:	4a66      	ldr	r2, [pc, #408]	; (4028 <SystemInit+0x264>)
    3e8e:	5cd3      	ldrb	r3, [r2, r3]
    3e90:	2b00      	cmp	r3, #0
    3e92:	d046      	beq.n	3f22 <SystemInit+0x15e>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    3e94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    3e98:	4b64      	ldr	r3, [pc, #400]	; (402c <SystemInit+0x268>)
    3e9a:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    3e9e:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    3ea2:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    3ea6:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    3eaa:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    3eae:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    3eb2:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    3eb6:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    3eba:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    3ebe:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    3ec2:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    3ec6:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    3eca:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    3ece:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    3ed2:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    3ed6:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    3eda:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    3ede:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    3ee2:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    3ee6:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    3eea:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    3eee:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    3ef2:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    3ef6:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    3efa:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    3efe:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    3f02:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    3f06:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    3f0a:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    3f0e:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    3f12:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    3f16:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    3f1a:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    3f1e:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_108_ENABLE_WORKAROUND
        /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_108()){
    3f22:	f003 fb16 	bl	7552 <nrf52_errata_108>
    3f26:	b148      	cbz	r0, 3f3c <SystemInit+0x178>
            *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
    3f28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    3f2c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3f30:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    3f34:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    3f38:	f8c2 3ee4 	str.w	r3, [r2, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    3f3c:	f003 fb09 	bl	7552 <nrf52_errata_108>
    3f40:	b148      	cbz	r0, 3f56 <SystemInit+0x192>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    3f42:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3f46:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    3f4a:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    3f4c:	bf44      	itt	mi
    3f4e:	f06f 0201 	mvnmi.w	r2, #1
    3f52:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    3f56:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    3f5a:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    3f5e:	2a06      	cmp	r2, #6
    3f60:	d126      	bne.n	3fb0 <SystemInit+0x1ec>
            {
                switch(var2)
    3f62:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    3f66:	3b03      	subs	r3, #3
    3f68:	2b04      	cmp	r3, #4
    3f6a:	d802      	bhi.n	3f72 <SystemInit+0x1ae>
    #endif

    #if NRF52_ERRATA_182_ENABLE_WORKAROUND
        /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_182()){
    3f6c:	4a30      	ldr	r2, [pc, #192]	; (4030 <SystemInit+0x26c>)
    3f6e:	5cd3      	ldrb	r3, [r2, r3]
    3f70:	b163      	cbz	r3, 3f8c <SystemInit+0x1c8>
            *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
    3f72:	4a30      	ldr	r2, [pc, #192]	; (4034 <SystemInit+0x270>)
    3f74:	f8d2 373c 	ldr.w	r3, [r2, #1852]	; 0x73c
    3f78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    3f7c:	f8c2 373c 	str.w	r3, [r2, #1852]	; 0x73c
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    3f80:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    3f84:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    3f88:	2b06      	cmp	r3, #6
    3f8a:	d111      	bne.n	3fb0 <SystemInit+0x1ec>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    3f8c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    3f90:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    3f94:	3b03      	subs	r3, #3
    3f96:	2b04      	cmp	r3, #4
    3f98:	d802      	bhi.n	3fa0 <SystemInit+0x1dc>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    3f9a:	4a27      	ldr	r2, [pc, #156]	; (4038 <SystemInit+0x274>)
    3f9c:	5cd3      	ldrb	r3, [r2, r3]
    3f9e:	b13b      	cbz	r3, 3fb0 <SystemInit+0x1ec>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    3fa0:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    3fa4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    3fa8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3fac:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    3fb0:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    3fb4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3fb8:	2a00      	cmp	r2, #0
    3fba:	db03      	blt.n	3fc4 <SystemInit+0x200>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    3fbc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    3fc0:	2b00      	cmp	r3, #0
    3fc2:	da22      	bge.n	400a <SystemInit+0x246>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    3fc4:	491d      	ldr	r1, [pc, #116]	; (403c <SystemInit+0x278>)
    3fc6:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    3fc8:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    3fcc:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    3fd0:	2415      	movs	r4, #21
    nvmc_wait();
    3fd2:	f7ff feef 	bl	3db4 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    3fd6:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    3fda:	f7ff feeb 	bl	3db4 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    3fde:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    3fe2:	f7ff fee7 	bl	3db4 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    3fe6:	2300      	movs	r3, #0
    3fe8:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    3fec:	f7ff fee2 	bl	3db4 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    3ff0:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    3ff4:	490a      	ldr	r1, [pc, #40]	; (4020 <SystemInit+0x25c>)
    3ff6:	4b12      	ldr	r3, [pc, #72]	; (4040 <SystemInit+0x27c>)
    3ff8:	68ca      	ldr	r2, [r1, #12]
    3ffa:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    3ffe:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    4000:	60cb      	str	r3, [r1, #12]
    4002:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    4006:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    4008:	e7fd      	b.n	4006 <SystemInit+0x242>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    400a:	4b0e      	ldr	r3, [pc, #56]	; (4044 <SystemInit+0x280>)
    400c:	4a0e      	ldr	r2, [pc, #56]	; (4048 <SystemInit+0x284>)
    400e:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    4010:	bd10      	pop	{r4, pc}
    4012:	bf00      	nop
    4014:	40013000 	.word	0x40013000
    4018:	4007c000 	.word	0x4007c000
    401c:	baadf00d 	.word	0xbaadf00d
    4020:	e000ed00 	.word	0xe000ed00
    4024:	40005000 	.word	0x40005000
    4028:	00008262 	.word	0x00008262
    402c:	4000c000 	.word	0x4000c000
    4030:	00008267 	.word	0x00008267
    4034:	40001000 	.word	0x40001000
    4038:	0000826c 	.word	0x0000826c
    403c:	4001e000 	.word	0x4001e000
    4040:	05fa0004 	.word	0x05fa0004
    4044:	200000d4 	.word	0x200000d4
    4048:	03d09000 	.word	0x03d09000

0000404c <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    404c:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    404e:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    4050:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    4052:	fab2 f382 	clz	r3, r2
    4056:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
    405a:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
    405c:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
    405e:	d014      	beq.n	408a <nrfx_flag32_alloc+0x3e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    4060:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
    4064:	fa05 f303 	lsl.w	r3, r5, r3
    4068:	ea22 0303 	bic.w	r3, r2, r3
    406c:	e850 6f00 	ldrex	r6, [r0]
    4070:	4296      	cmp	r6, r2
    4072:	d104      	bne.n	407e <nrfx_flag32_alloc+0x32>
    4074:	e840 3c00 	strex	ip, r3, [r0]
    4078:	f1bc 0f00 	cmp.w	ip, #0
    407c:	d1f6      	bne.n	406c <nrfx_flag32_alloc+0x20>
    407e:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    4082:	d1e5      	bne.n	4050 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
    4084:	4802      	ldr	r0, [pc, #8]	; (4090 <nrfx_flag32_alloc+0x44>)
    *p_flag = idx;
    4086:	700c      	strb	r4, [r1, #0]
}
    4088:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
    408a:	4802      	ldr	r0, [pc, #8]	; (4094 <nrfx_flag32_alloc+0x48>)
    408c:	e7fc      	b.n	4088 <nrfx_flag32_alloc+0x3c>
    408e:	bf00      	nop
    4090:	0bad0000 	.word	0x0bad0000
    4094:	0bad0002 	.word	0x0bad0002

00004098 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    4098:	6803      	ldr	r3, [r0, #0]
    409a:	40cb      	lsrs	r3, r1
    409c:	07db      	lsls	r3, r3, #31
{
    409e:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    40a0:	d415      	bmi.n	40ce <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    40a2:	2301      	movs	r3, #1
    40a4:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
    40a8:	6803      	ldr	r3, [r0, #0]
    40aa:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    40ae:	ea41 0203 	orr.w	r2, r1, r3
    40b2:	e850 4f00 	ldrex	r4, [r0]
    40b6:	429c      	cmp	r4, r3
    40b8:	d104      	bne.n	40c4 <nrfx_flag32_free+0x2c>
    40ba:	e840 2c00 	strex	ip, r2, [r0]
    40be:	f1bc 0f00 	cmp.w	ip, #0
    40c2:	d1f6      	bne.n	40b2 <nrfx_flag32_free+0x1a>
    40c4:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    40c8:	d1ee      	bne.n	40a8 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    40ca:	4802      	ldr	r0, [pc, #8]	; (40d4 <nrfx_flag32_free+0x3c>)
}
    40cc:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    40ce:	4802      	ldr	r0, [pc, #8]	; (40d8 <nrfx_flag32_free+0x40>)
    40d0:	e7fc      	b.n	40cc <nrfx_flag32_free+0x34>
    40d2:	bf00      	nop
    40d4:	0bad0000 	.word	0x0bad0000
    40d8:	0bad0004 	.word	0x0bad0004

000040dc <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    40dc:	4b04      	ldr	r3, [pc, #16]	; (40f0 <nrfx_clock_init+0x14>)
    40de:	791a      	ldrb	r2, [r3, #4]
    40e0:	b922      	cbnz	r2, 40ec <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    40e2:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    40e4:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    40e6:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    40e8:	4802      	ldr	r0, [pc, #8]	; (40f4 <nrfx_clock_init+0x18>)
    40ea:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    40ec:	4802      	ldr	r0, [pc, #8]	; (40f8 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    40ee:	4770      	bx	lr
    40f0:	20000628 	.word	0x20000628
    40f4:	0bad0000 	.word	0x0bad0000
    40f8:	0bad000c 	.word	0x0bad000c

000040fc <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    40fc:	b530      	push	{r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    40fe:	b110      	cbz	r0, 4106 <nrfx_clock_start+0xa>
    4100:	2801      	cmp	r0, #1
    4102:	d034      	beq.n	416e <nrfx_clock_start+0x72>
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    4104:	bd30      	pop	{r4, r5, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4106:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    410a:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    410e:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    4112:	03c9      	lsls	r1, r1, #15
    4114:	d529      	bpl.n	416a <nrfx_clock_start+0x6e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    4116:	f002 0203 	and.w	r2, r2, #3
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    411a:	2a01      	cmp	r2, #1
    411c:	d125      	bne.n	416a <nrfx_clock_start+0x6e>
    p_reg->LFCLKSRC = (uint32_t)(source);
    411e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4122:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4126:	2200      	movs	r2, #0
    4128:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    412c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    4130:	2202      	movs	r2, #2
    4132:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    core_debug = CoreDebug->DEMCR;
    4136:	4a13      	ldr	r2, [pc, #76]	; (4184 <nrfx_clock_start+0x88>)
    4138:	f8d2 00fc 	ldr.w	r0, [r2, #252]	; 0xfc
    CoreDebug->DEMCR = core_debug | CoreDebug_DEMCR_TRCENA_Msk;
    413c:	f040 7380 	orr.w	r3, r0, #16777216	; 0x1000000
    4140:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    dwt_ctrl = DWT->CTRL;
    4144:	4b10      	ldr	r3, [pc, #64]	; (4188 <nrfx_clock_start+0x8c>)
    4146:	681c      	ldr	r4, [r3, #0]
    DWT->CTRL = dwt_ctrl | DWT_CTRL_CYCCNTENA_Msk;
    4148:	f044 0101 	orr.w	r1, r4, #1
    414c:	6019      	str	r1, [r3, #0]
    cyccnt_inital = DWT->CYCCNT;
    414e:	685d      	ldr	r5, [r3, #4]
    while ((DWT->CYCCNT - cyccnt_inital) < ANOMALY_132_DELAY_CYCLES)
    4150:	6859      	ldr	r1, [r3, #4]
    4152:	1b49      	subs	r1, r1, r5
    4154:	f5b1 5f0a 	cmp.w	r1, #8832	; 0x2280
    4158:	d3fa      	bcc.n	4150 <nrfx_clock_start+0x54>
    DWT->CTRL = dwt_ctrl;
    415a:	601c      	str	r4, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    415c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    CoreDebug->DEMCR = core_debug;
    4160:	f8c2 00fc 	str.w	r0, [r2, #252]	; 0xfc
    4164:	2201      	movs	r2, #1
    4166:	609a      	str	r2, [r3, #8]
}
    4168:	e7cc      	b.n	4104 <nrfx_clock_start+0x8>
    p_reg->LFCLKSRC = (uint32_t)(source);
    416a:	2200      	movs	r2, #0
    416c:	e7d7      	b.n	411e <nrfx_clock_start+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    416e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4172:	2200      	movs	r2, #0
    4174:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    4178:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    417c:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4180:	6018      	str	r0, [r3, #0]
}
    4182:	e7bf      	b.n	4104 <nrfx_clock_start+0x8>
    4184:	e000ed00 	.word	0xe000ed00
    4188:	e0001000 	.word	0xe0001000

0000418c <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    418c:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    418e:	b110      	cbz	r0, 4196 <nrfx_clock_stop+0xa>
    4190:	2801      	cmp	r0, #1
    4192:	d017      	beq.n	41c4 <nrfx_clock_stop+0x38>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    4194:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
    4196:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    419a:	2302      	movs	r3, #2
    419c:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    41a0:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
    41a4:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    41a8:	2301      	movs	r3, #1
    41aa:	60e3      	str	r3, [r4, #12]
    41ac:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    41b0:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
    41b4:	03db      	lsls	r3, r3, #15
    41b6:	d5ed      	bpl.n	4194 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    41b8:	2001      	movs	r0, #1
    41ba:	f003 f9d9 	bl	7570 <nrfx_busy_wait>
    41be:	3d01      	subs	r5, #1
    41c0:	d1f6      	bne.n	41b0 <nrfx_clock_stop+0x24>
    41c2:	e7e7      	b.n	4194 <nrfx_clock_stop+0x8>
    p_reg->INTENCLR = mask;
    41c4:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    41c8:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
    41ca:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    41ce:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    41d2:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    41d6:	6060      	str	r0, [r4, #4]
    41d8:	f242 7510 	movw	r5, #10000	; 0x2710
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    41dc:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    41e0:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
    41e4:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    41e6:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    41ea:	d505      	bpl.n	41f8 <nrfx_clock_stop+0x6c>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    41ec:	b123      	cbz	r3, 41f8 <nrfx_clock_stop+0x6c>
    41ee:	2001      	movs	r0, #1
    41f0:	f003 f9be 	bl	7570 <nrfx_busy_wait>
    41f4:	3d01      	subs	r5, #1
    41f6:	d1f1      	bne.n	41dc <nrfx_clock_stop+0x50>
            m_clock_cb.hfclk_started = false;
    41f8:	4b01      	ldr	r3, [pc, #4]	; (4200 <nrfx_clock_stop+0x74>)
    41fa:	2200      	movs	r2, #0
    41fc:	715a      	strb	r2, [r3, #5]
    41fe:	e7c9      	b.n	4194 <nrfx_clock_stop+0x8>
    4200:	20000628 	.word	0x20000628

00004204 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4204:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    4208:	b510      	push	{r4, lr}
    420a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    420e:	b16a      	cbz	r2, 422c <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4210:	2200      	movs	r2, #0
    4212:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    4216:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    421a:	2201      	movs	r2, #1
    421c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    4220:	4b11      	ldr	r3, [pc, #68]	; (4268 <nrfx_power_clock_irq_handler+0x64>)
    4222:	7958      	ldrb	r0, [r3, #5]
    4224:	b910      	cbnz	r0, 422c <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
    4226:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    4228:	681b      	ldr	r3, [r3, #0]
    422a:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    422c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4230:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    4234:	b172      	cbz	r2, 4254 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4236:	2200      	movs	r2, #0
    4238:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    423c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4240:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4244:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    4248:	0792      	lsls	r2, r2, #30
    424a:	d104      	bne.n	4256 <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    424c:	2201      	movs	r2, #1
    424e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4252:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    4254:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    4256:	2202      	movs	r2, #2
    4258:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    425c:	4b02      	ldr	r3, [pc, #8]	; (4268 <nrfx_power_clock_irq_handler+0x64>)
}
    425e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    4262:	681b      	ldr	r3, [r3, #0]
    4264:	2001      	movs	r0, #1
    4266:	4718      	bx	r3
    4268:	20000628 	.word	0x20000628

0000426c <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    426c:	4b03      	ldr	r3, [pc, #12]	; (427c <pin_in_use_by_te+0x10>)
    426e:	3008      	adds	r0, #8
    4270:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    4274:	f3c0 1040 	ubfx	r0, r0, #5, #1
    4278:	4770      	bx	lr
    427a:	bf00      	nop
    427c:	200000d8 	.word	0x200000d8

00004280 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    4280:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4282:	f100 0308 	add.w	r3, r0, #8
    4286:	4c0c      	ldr	r4, [pc, #48]	; (42b8 <call_handler+0x38>)
    4288:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    428c:	05da      	lsls	r2, r3, #23
{
    428e:	4605      	mov	r5, r0
    4290:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4292:	d507      	bpl.n	42a4 <call_handler+0x24>
    4294:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    4298:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    429c:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    42a0:	6852      	ldr	r2, [r2, #4]
    42a2:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    42a4:	68a3      	ldr	r3, [r4, #8]
    42a6:	b12b      	cbz	r3, 42b4 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    42a8:	68e2      	ldr	r2, [r4, #12]
    42aa:	4631      	mov	r1, r6
    42ac:	4628      	mov	r0, r5
    }
}
    42ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    42b2:	4718      	bx	r3
}
    42b4:	bd70      	pop	{r4, r5, r6, pc}
    42b6:	bf00      	nop
    42b8:	200000d8 	.word	0x200000d8

000042bc <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    42bc:	4a12      	ldr	r2, [pc, #72]	; (4308 <release_handler+0x4c>)
    42be:	3008      	adds	r0, #8
{
    42c0:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    42c2:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    42c6:	05d9      	lsls	r1, r3, #23
    42c8:	d51b      	bpl.n	4302 <release_handler+0x46>
    42ca:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    42ce:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    42d2:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    42d6:	f102 0410 	add.w	r4, r2, #16
    42da:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    42dc:	f834 3b02 	ldrh.w	r3, [r4], #2
    42e0:	f413 7f80 	tst.w	r3, #256	; 0x100
    42e4:	d003      	beq.n	42ee <release_handler+0x32>
    42e6:	f3c3 2343 	ubfx	r3, r3, #9, #4
    42ea:	4299      	cmp	r1, r3
    42ec:	d009      	beq.n	4302 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    42ee:	3001      	adds	r0, #1
    42f0:	2820      	cmp	r0, #32
    42f2:	d1f3      	bne.n	42dc <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    42f4:	2300      	movs	r3, #0
    42f6:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    42fa:	4804      	ldr	r0, [pc, #16]	; (430c <release_handler+0x50>)
}
    42fc:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    42fe:	f7ff becb 	b.w	4098 <nrfx_flag32_free>
}
    4302:	bc10      	pop	{r4}
    4304:	4770      	bx	lr
    4306:	bf00      	nop
    4308:	200000d8 	.word	0x200000d8
    430c:	2000012c 	.word	0x2000012c

00004310 <pin_handler_trigger_uninit>:
{
    4310:	b538      	push	{r3, r4, r5, lr}
    4312:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    4314:	f7ff ffaa 	bl	426c <pin_in_use_by_te>
    4318:	4c09      	ldr	r4, [pc, #36]	; (4340 <pin_handler_trigger_uninit+0x30>)
    431a:	f102 0508 	add.w	r5, r2, #8
    431e:	b140      	cbz	r0, 4332 <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4320:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    4324:	4907      	ldr	r1, [pc, #28]	; (4344 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    4326:	0b5b      	lsrs	r3, r3, #13
    4328:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    432c:	2000      	movs	r0, #0
    432e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    4332:	4610      	mov	r0, r2
    4334:	f7ff ffc2 	bl	42bc <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    4338:	2300      	movs	r3, #0
    433a:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    433e:	bd38      	pop	{r3, r4, r5, pc}
    4340:	200000d8 	.word	0x200000d8
    4344:	40006000 	.word	0x40006000

00004348 <nrfx_gpiote_input_configure>:
{
    4348:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    434c:	4604      	mov	r4, r0
    434e:	461e      	mov	r6, r3
    if (p_input_config)
    4350:	b309      	cbz	r1, 4396 <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4352:	4f4d      	ldr	r7, [pc, #308]	; (4488 <nrfx_gpiote_input_configure+0x140>)
    4354:	f100 0808 	add.w	r8, r0, #8
    4358:	f837 5018 	ldrh.w	r5, [r7, r8, lsl #1]
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    435c:	07ab      	lsls	r3, r5, #30
    435e:	d506      	bpl.n	436e <nrfx_gpiote_input_configure+0x26>
    4360:	f7ff ff84 	bl	426c <pin_in_use_by_te>
        if (pin_is_task_output(pin))
    4364:	b118      	cbz	r0, 436e <nrfx_gpiote_input_configure+0x26>
            return NRFX_ERROR_INVALID_PARAM;
    4366:	4849      	ldr	r0, [pc, #292]	; (448c <nrfx_gpiote_input_configure+0x144>)
}
    4368:	b002      	add	sp, #8
    436a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *p_pin = pin_number & 0x1F;
    436e:	f004 001f 	and.w	r0, r4, #31
    4372:	0080      	lsls	r0, r0, #2
    4374:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    4378:	7809      	ldrb	r1, [r1, #0]
    uint32_t cnf = reg->PIN_CNF[pin_number];
    437a:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    437e:	f025 0502 	bic.w	r5, r5, #2
    cnf &= ~to_update;
    4382:	f023 030f 	bic.w	r3, r3, #15
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    4386:	f045 0501 	orr.w	r5, r5, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    438a:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
    438e:	f827 5018 	strh.w	r5, [r7, r8, lsl #1]
    reg->PIN_CNF[pin_number] = cnf;
    4392:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
    if (p_trigger_config)
    4396:	b192      	cbz	r2, 43be <nrfx_gpiote_input_configure+0x76>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4398:	4b3b      	ldr	r3, [pc, #236]	; (4488 <nrfx_gpiote_input_configure+0x140>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    439a:	7815      	ldrb	r5, [r2, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    439c:	6852      	ldr	r2, [r2, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    439e:	f104 0008 	add.w	r0, r4, #8
    43a2:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
    43a6:	078f      	lsls	r7, r1, #30
    43a8:	d50c      	bpl.n	43c4 <nrfx_gpiote_input_configure+0x7c>
            if (use_evt)
    43aa:	2a00      	cmp	r2, #0
    43ac:	d1db      	bne.n	4366 <nrfx_gpiote_input_configure+0x1e>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    43ae:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    43b2:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    43b6:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
    43ba:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
    43be:	bbce      	cbnz	r6, 4434 <nrfx_gpiote_input_configure+0xec>
    return NRFX_SUCCESS;
    43c0:	4833      	ldr	r0, [pc, #204]	; (4490 <nrfx_gpiote_input_configure+0x148>)
    43c2:	e7d1      	b.n	4368 <nrfx_gpiote_input_configure+0x20>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    43c4:	f021 0120 	bic.w	r1, r1, #32
    43c8:	04c9      	lsls	r1, r1, #19
    43ca:	0cc9      	lsrs	r1, r1, #19
    43cc:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
    43d0:	2a00      	cmp	r2, #0
    43d2:	d0ec      	beq.n	43ae <nrfx_gpiote_input_configure+0x66>
                if (!edge)
    43d4:	2d03      	cmp	r5, #3
    43d6:	d8c6      	bhi.n	4366 <nrfx_gpiote_input_configure+0x1e>
                uint8_t ch = *p_trigger_config->p_in_channel;
    43d8:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    43da:	b92d      	cbnz	r5, 43e8 <nrfx_gpiote_input_configure+0xa0>
    43dc:	4a2d      	ldr	r2, [pc, #180]	; (4494 <nrfx_gpiote_input_configure+0x14c>)
    43de:	f507 71a2 	add.w	r1, r7, #324	; 0x144
    43e2:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    43e6:	e7e2      	b.n	43ae <nrfx_gpiote_input_configure+0x66>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    43e8:	00ba      	lsls	r2, r7, #2
    43ea:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    43ee:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    43f2:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
    43f6:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    43fa:	f02c 0c03 	bic.w	ip, ip, #3
    43fe:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    4402:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    4406:	f42c 3c47 	bic.w	ip, ip, #203776	; 0x31c00
    440a:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
    440e:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4412:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    4416:	ea4f 2c04 	mov.w	ip, r4, lsl #8
    441a:	f40c 5cf8 	and.w	ip, ip, #7936	; 0x1f00
    441e:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
    4422:	ea4c 0c0e 	orr.w	ip, ip, lr
    4426:	f041 0120 	orr.w	r1, r1, #32
    442a:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
    442e:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
    4432:	e7bc      	b.n	43ae <nrfx_gpiote_input_configure+0x66>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    4434:	e9d6 7600 	ldrd	r7, r6, [r6]
    release_handler(pin);
    4438:	4620      	mov	r0, r4
    443a:	f7ff ff3f 	bl	42bc <release_handler>
    if (!handler)
    443e:	2f00      	cmp	r7, #0
    4440:	d0be      	beq.n	43c0 <nrfx_gpiote_input_configure+0x78>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    4442:	4d11      	ldr	r5, [pc, #68]	; (4488 <nrfx_gpiote_input_configure+0x140>)
    4444:	682b      	ldr	r3, [r5, #0]
    4446:	429f      	cmp	r7, r3
    4448:	d104      	bne.n	4454 <nrfx_gpiote_input_configure+0x10c>
    444a:	686b      	ldr	r3, [r5, #4]
    444c:	429e      	cmp	r6, r3
    444e:	d101      	bne.n	4454 <nrfx_gpiote_input_configure+0x10c>
    4450:	2200      	movs	r2, #0
    4452:	e009      	b.n	4468 <nrfx_gpiote_input_configure+0x120>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    4454:	4810      	ldr	r0, [pc, #64]	; (4498 <nrfx_gpiote_input_configure+0x150>)
    4456:	f10d 0107 	add.w	r1, sp, #7
    445a:	f7ff fdf7 	bl	404c <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    445e:	4b0c      	ldr	r3, [pc, #48]	; (4490 <nrfx_gpiote_input_configure+0x148>)
    4460:	4298      	cmp	r0, r3
    4462:	d181      	bne.n	4368 <nrfx_gpiote_input_configure+0x20>
        handler_id = (int32_t)id;
    4464:	f89d 2007 	ldrb.w	r2, [sp, #7]
    m_cb.handlers[handler_id].handler = handler;
    4468:	f845 7032 	str.w	r7, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    446c:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    4470:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    4472:	605e      	str	r6, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    4474:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    4478:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    447c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    4480:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    4484:	e79c      	b.n	43c0 <nrfx_gpiote_input_configure+0x78>
    4486:	bf00      	nop
    4488:	200000d8 	.word	0x200000d8
    448c:	0bad0004 	.word	0x0bad0004
    4490:	0bad0000 	.word	0x0bad0000
    4494:	40006000 	.word	0x40006000
    4498:	2000012c 	.word	0x2000012c

0000449c <nrfx_gpiote_output_configure>:
{
    449c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    449e:	4604      	mov	r4, r0
    if (p_config)
    44a0:	b371      	cbz	r1, 4500 <nrfx_gpiote_output_configure+0x64>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    44a2:	4e37      	ldr	r6, [pc, #220]	; (4580 <nrfx_gpiote_output_configure+0xe4>)
    44a4:	f100 0708 	add.w	r7, r0, #8
    44a8:	f836 5017 	ldrh.w	r5, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    44ac:	07ab      	lsls	r3, r5, #30
    44ae:	d404      	bmi.n	44ba <nrfx_gpiote_output_configure+0x1e>
    44b0:	f7ff fedc 	bl	426c <pin_in_use_by_te>
    44b4:	b108      	cbz	r0, 44ba <nrfx_gpiote_output_configure+0x1e>
    return NRFX_SUCCESS;
    44b6:	4833      	ldr	r0, [pc, #204]	; (4584 <nrfx_gpiote_output_configure+0xe8>)
}
    44b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    44ba:	f015 0f1c 	tst.w	r5, #28
    44be:	784b      	ldrb	r3, [r1, #1]
    44c0:	d001      	beq.n	44c6 <nrfx_gpiote_output_configure+0x2a>
    44c2:	2b01      	cmp	r3, #1
    44c4:	d0f7      	beq.n	44b6 <nrfx_gpiote_output_configure+0x1a>
    *p_pin = pin_number & 0x1F;
    44c6:	f004 001f 	and.w	r0, r4, #31
    44ca:	0080      	lsls	r0, r0, #2
    44cc:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    44d0:	f891 e000 	ldrb.w	lr, [r1]
    uint32_t cnf = reg->PIN_CNF[pin_number];
    44d4:	f8d0 c700 	ldr.w	ip, [r0, #1792]	; 0x700
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    44d8:	7889      	ldrb	r1, [r1, #2]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    44da:	005b      	lsls	r3, r3, #1
    cnf &= ~to_update;
    44dc:	f42c 6ce1 	bic.w	ip, ip, #1800	; 0x708
    44e0:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
    44e4:	f02c 0c07 	bic.w	ip, ip, #7
    44e8:	ea43 030c 	orr.w	r3, r3, ip
    44ec:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    44f0:	f045 0503 	orr.w	r5, r5, #3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    44f4:	f043 0301 	orr.w	r3, r3, #1
    44f8:	f826 5017 	strh.w	r5, [r6, r7, lsl #1]
    reg->PIN_CNF[pin_number] = cnf;
    44fc:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
    if (p_task_config)
    4500:	b90a      	cbnz	r2, 4506 <nrfx_gpiote_output_configure+0x6a>
    return NRFX_SUCCESS;
    4502:	4821      	ldr	r0, [pc, #132]	; (4588 <nrfx_gpiote_output_configure+0xec>)
    4504:	e7d8      	b.n	44b8 <nrfx_gpiote_output_configure+0x1c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4506:	4e1e      	ldr	r6, [pc, #120]	; (4580 <nrfx_gpiote_output_configure+0xe4>)
    4508:	f104 0708 	add.w	r7, r4, #8
    450c:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    4510:	0783      	lsls	r3, r0, #30
    4512:	d5d0      	bpl.n	44b6 <nrfx_gpiote_output_configure+0x1a>
        uint32_t ch = p_task_config->task_ch;
    4514:	f892 c000 	ldrb.w	ip, [r2]
    p_reg->CONFIG[idx] = 0;
    4518:	4661      	mov	r1, ip
    451a:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    451c:	f020 0020 	bic.w	r0, r0, #32
    4520:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    4524:	04c0      	lsls	r0, r0, #19
    4526:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    452a:	0cc0      	lsrs	r0, r0, #19
    452c:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    4530:	2300      	movs	r3, #0
    4532:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    4536:	7855      	ldrb	r5, [r2, #1]
    4538:	2d00      	cmp	r5, #0
    453a:	d0e2      	beq.n	4502 <nrfx_gpiote_output_configure+0x66>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    453c:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    4540:	7892      	ldrb	r2, [r2, #2]
    4542:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
    4546:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    454a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    454e:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    4552:	0223      	lsls	r3, r4, #8
    4554:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    4558:	042d      	lsls	r5, r5, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    455a:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    455e:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    4562:	0512      	lsls	r2, r2, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4564:	432b      	orrs	r3, r5
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    4566:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    456a:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    456e:	4313      	orrs	r3, r2
    4570:	f040 0020 	orr.w	r0, r0, #32
    4574:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    4578:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    457c:	e7c1      	b.n	4502 <nrfx_gpiote_output_configure+0x66>
    457e:	bf00      	nop
    4580:	200000d8 	.word	0x200000d8
    4584:	0bad0004 	.word	0x0bad0004
    4588:	0bad0000 	.word	0x0bad0000

0000458c <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    458c:	4b01      	ldr	r3, [pc, #4]	; (4594 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    458e:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    4592:	4770      	bx	lr
    4594:	200000d8 	.word	0x200000d8

00004598 <nrfx_gpiote_channel_get>:
{
    4598:	b508      	push	{r3, lr}
    459a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    459c:	f7ff fe66 	bl	426c <pin_in_use_by_te>
    45a0:	b138      	cbz	r0, 45b2 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    45a2:	4b05      	ldr	r3, [pc, #20]	; (45b8 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
    45a4:	4805      	ldr	r0, [pc, #20]	; (45bc <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    45a6:	3208      	adds	r2, #8
    45a8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    45ac:	0b5b      	lsrs	r3, r3, #13
    45ae:	700b      	strb	r3, [r1, #0]
}
    45b0:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    45b2:	4803      	ldr	r0, [pc, #12]	; (45c0 <nrfx_gpiote_channel_get+0x28>)
    45b4:	e7fc      	b.n	45b0 <nrfx_gpiote_channel_get+0x18>
    45b6:	bf00      	nop
    45b8:	200000d8 	.word	0x200000d8
    45bc:	0bad0000 	.word	0x0bad0000
    45c0:	0bad0004 	.word	0x0bad0004

000045c4 <nrfx_gpiote_init>:
{
    45c4:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    45c6:	4c0f      	ldr	r4, [pc, #60]	; (4604 <nrfx_gpiote_init+0x40>)
    45c8:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
    45cc:	b9bd      	cbnz	r5, 45fe <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    45ce:	2240      	movs	r2, #64	; 0x40
    45d0:	4629      	mov	r1, r5
    45d2:	f104 0010 	add.w	r0, r4, #16
    45d6:	f002 f87d 	bl	66d4 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    45da:	2006      	movs	r0, #6
    45dc:	f7fd fd50 	bl	2080 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    45e0:	4b09      	ldr	r3, [pc, #36]	; (4608 <nrfx_gpiote_init+0x44>)
    return err_code;
    45e2:	480a      	ldr	r0, [pc, #40]	; (460c <nrfx_gpiote_init+0x48>)
    45e4:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    45e8:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    45ec:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    45f0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    45f4:	2301      	movs	r3, #1
    45f6:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    45fa:	6563      	str	r3, [r4, #84]	; 0x54
}
    45fc:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    45fe:	4804      	ldr	r0, [pc, #16]	; (4610 <nrfx_gpiote_init+0x4c>)
    4600:	e7fc      	b.n	45fc <nrfx_gpiote_init+0x38>
    4602:	bf00      	nop
    4604:	200000d8 	.word	0x200000d8
    4608:	40006000 	.word	0x40006000
    460c:	0bad0000 	.word	0x0bad0000
    4610:	0bad0005 	.word	0x0bad0005

00004614 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    4614:	4b03      	ldr	r3, [pc, #12]	; (4624 <nrfx_gpiote_is_init+0x10>)
    4616:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
    461a:	3800      	subs	r0, #0
    461c:	bf18      	it	ne
    461e:	2001      	movne	r0, #1
    4620:	4770      	bx	lr
    4622:	bf00      	nop
    4624:	200000d8 	.word	0x200000d8

00004628 <nrfx_gpiote_channel_free>:
{
    4628:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    462a:	4801      	ldr	r0, [pc, #4]	; (4630 <nrfx_gpiote_channel_free+0x8>)
    462c:	f7ff bd34 	b.w	4098 <nrfx_flag32_free>
    4630:	20000128 	.word	0x20000128

00004634 <nrfx_gpiote_channel_alloc>:
{
    4634:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    4636:	4801      	ldr	r0, [pc, #4]	; (463c <nrfx_gpiote_channel_alloc+0x8>)
    4638:	f7ff bd08 	b.w	404c <nrfx_flag32_alloc>
    463c:	20000128 	.word	0x20000128

00004640 <nrfx_gpiote_trigger_enable>:
{
    4640:	b510      	push	{r4, lr}
    4642:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4644:	f7ff fe12 	bl	426c <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4648:	f102 0408 	add.w	r4, r2, #8
    464c:	4b1c      	ldr	r3, [pc, #112]	; (46c0 <nrfx_gpiote_trigger_enable+0x80>)
    464e:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4652:	b1e0      	cbz	r0, 468e <nrfx_gpiote_trigger_enable+0x4e>
    4654:	f013 0402 	ands.w	r4, r3, #2
    4658:	d119      	bne.n	468e <nrfx_gpiote_trigger_enable+0x4e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    465a:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    465c:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    465e:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
    4662:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
    4666:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    466a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    466e:	6004      	str	r4, [r0, #0]
    4670:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    4672:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    4676:	f040 0001 	orr.w	r0, r0, #1
    467a:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    467e:	b129      	cbz	r1, 468c <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    4680:	2201      	movs	r2, #1
    4682:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    4686:	4a0f      	ldr	r2, [pc, #60]	; (46c4 <nrfx_gpiote_trigger_enable+0x84>)
    4688:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    468c:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    468e:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    4692:	2b04      	cmp	r3, #4
    4694:	d010      	beq.n	46b8 <nrfx_gpiote_trigger_enable+0x78>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    4696:	2b05      	cmp	r3, #5
    4698:	d010      	beq.n	46bc <nrfx_gpiote_trigger_enable+0x7c>
    return p_reg->IN;
    469a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    469e:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    *p_pin = pin_number & 0x1F;
    46a2:	f002 031f 	and.w	r3, r2, #31
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    46a6:	40d9      	lsrs	r1, r3
    46a8:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    46ac:	3102      	adds	r1, #2
}
    46ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    46b2:	4610      	mov	r0, r2
    46b4:	f002 bf68 	b.w	7588 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    46b8:	2103      	movs	r1, #3
    46ba:	e7f8      	b.n	46ae <nrfx_gpiote_trigger_enable+0x6e>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    46bc:	2102      	movs	r1, #2
    46be:	e7f6      	b.n	46ae <nrfx_gpiote_trigger_enable+0x6e>
    46c0:	200000d8 	.word	0x200000d8
    46c4:	40006000 	.word	0x40006000

000046c8 <nrfx_gpiote_trigger_disable>:
{
    46c8:	b508      	push	{r3, lr}
    46ca:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    46cc:	f7ff fdce 	bl	426c <pin_in_use_by_te>
    46d0:	b1c0      	cbz	r0, 4704 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    46d2:	f102 0108 	add.w	r1, r2, #8
    46d6:	4b0e      	ldr	r3, [pc, #56]	; (4710 <nrfx_gpiote_trigger_disable+0x48>)
    46d8:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    46dc:	0799      	lsls	r1, r3, #30
    46de:	d411      	bmi.n	4704 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    46e0:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    46e2:	2201      	movs	r2, #1
    46e4:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    46e6:	009b      	lsls	r3, r3, #2
    46e8:	490a      	ldr	r1, [pc, #40]	; (4714 <nrfx_gpiote_trigger_disable+0x4c>)
    46ea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    46ee:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    46f2:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    46f6:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    46fa:	f022 0203 	bic.w	r2, r2, #3
    46fe:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    4702:	bd08      	pop	{r3, pc}
    4704:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    4708:	2100      	movs	r1, #0
    470a:	4610      	mov	r0, r2
    470c:	f002 bf3c 	b.w	7588 <nrf_gpio_cfg_sense_set>
    4710:	200000d8 	.word	0x200000d8
    4714:	40006000 	.word	0x40006000

00004718 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    4718:	4b0d      	ldr	r3, [pc, #52]	; (4750 <nrfx_gpiote_pin_uninit+0x38>)
    471a:	f100 0208 	add.w	r2, r0, #8
{
    471e:	b510      	push	{r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    4720:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    4724:	07db      	lsls	r3, r3, #31
{
    4726:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    4728:	d50f      	bpl.n	474a <nrfx_gpiote_pin_uninit+0x32>
    nrfx_gpiote_trigger_disable(pin);
    472a:	f7ff ffcd 	bl	46c8 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    472e:	4620      	mov	r0, r4
    *p_pin = pin_number & 0x1F;
    4730:	f004 041f 	and.w	r4, r4, #31
    4734:	f7ff fdec 	bl	4310 <pin_handler_trigger_uninit>
    reg->PIN_CNF[pin_number] = cnf;
    4738:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    473c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    4740:	2202      	movs	r2, #2
    4742:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    4746:	4803      	ldr	r0, [pc, #12]	; (4754 <nrfx_gpiote_pin_uninit+0x3c>)
}
    4748:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    474a:	4803      	ldr	r0, [pc, #12]	; (4758 <nrfx_gpiote_pin_uninit+0x40>)
    474c:	e7fc      	b.n	4748 <nrfx_gpiote_pin_uninit+0x30>
    474e:	bf00      	nop
    4750:	200000d8 	.word	0x200000d8
    4754:	0bad0000 	.word	0x0bad0000
    4758:	0bad0004 	.word	0x0bad0004

0000475c <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    475c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4760:	4b4e      	ldr	r3, [pc, #312]	; (489c <nrfx_gpiote_irq_handler+0x140>)
    return p_reg->INTENSET & mask;
    4762:	484f      	ldr	r0, [pc, #316]	; (48a0 <nrfx_gpiote_irq_handler+0x144>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    4764:	494f      	ldr	r1, [pc, #316]	; (48a4 <nrfx_gpiote_irq_handler+0x148>)
    uint32_t status = 0;
    4766:	2500      	movs	r5, #0
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    4768:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    476a:	462c      	mov	r4, r5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    476c:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    476e:	b136      	cbz	r6, 477e <nrfx_gpiote_irq_handler+0x22>
    return p_reg->INTENSET & mask;
    4770:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
    4774:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4776:	bf1e      	ittt	ne
    4778:	601c      	strne	r4, [r3, #0]
    477a:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    477c:	4315      	orrne	r5, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    477e:	3304      	adds	r3, #4
    4780:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    4782:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    4786:	d1f1      	bne.n	476c <nrfx_gpiote_irq_handler+0x10>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4788:	4b45      	ldr	r3, [pc, #276]	; (48a0 <nrfx_gpiote_irq_handler+0x144>)
    478a:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    478e:	b1bb      	cbz	r3, 47c0 <nrfx_gpiote_irq_handler+0x64>
        *p_masks = gpio_regs[i]->LATCH;
    4790:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    4794:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
    4798:	9301      	str	r3, [sp, #4]
        gpio_regs[i]->LATCH = *p_masks;
    479a:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    479e:	af01      	add	r7, sp, #4
    47a0:	f04f 0801 	mov.w	r8, #1
            while (latch[i])
    47a4:	9c01      	ldr	r4, [sp, #4]
    47a6:	b96c      	cbnz	r4, 47c4 <nrfx_gpiote_irq_handler+0x68>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    47a8:	4b3d      	ldr	r3, [pc, #244]	; (48a0 <nrfx_gpiote_irq_handler+0x144>)
    47aa:	f8c3 417c 	str.w	r4, [r3, #380]	; 0x17c
    47ae:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    47b2:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
    47b6:	9301      	str	r3, [sp, #4]
        gpio_regs[i]->LATCH = *p_masks;
    47b8:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
        if (latch[port_idx])
    47bc:	2b00      	cmp	r3, #0
    47be:	d1ee      	bne.n	479e <nrfx_gpiote_irq_handler+0x42>
        mask &= ~NRFX_BIT(ch);
    47c0:	2401      	movs	r4, #1
    47c2:	e066      	b.n	4892 <nrfx_gpiote_irq_handler+0x136>
                uint32_t pin = NRF_CTZ(latch[i]);
    47c4:	fa94 f4a4 	rbit	r4, r4
    47c8:	fab4 f484 	clz	r4, r4
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    47cc:	4a36      	ldr	r2, [pc, #216]	; (48a8 <nrfx_gpiote_irq_handler+0x14c>)
    47ce:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    47d2:	08e0      	lsrs	r0, r4, #3
    47d4:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
    bit = BITMASK_RELBIT_GET(bit);
    47d8:	f004 0307 	and.w	r3, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    47dc:	fa08 f203 	lsl.w	r2, r8, r3
    47e0:	5c3b      	ldrb	r3, [r7, r0]
    47e2:	ea23 0302 	bic.w	r3, r3, r2
    47e6:	543b      	strb	r3, [r7, r0]
    47e8:	00a3      	lsls	r3, r4, #2
    47ea:	f103 49a0 	add.w	r9, r3, #1342177280	; 0x50000000
    47ee:	f3c1 0a82 	ubfx	sl, r1, #2, #3
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    47f2:	f8d9 2700 	ldr.w	r2, [r9, #1792]	; 0x700
    if (is_level(trigger))
    47f6:	06cb      	lsls	r3, r1, #27
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    47f8:	46d3      	mov	fp, sl
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    47fa:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
    47fe:	d518      	bpl.n	4832 <nrfx_gpiote_irq_handler+0xd6>
        call_handler(pin, trigger);
    4800:	4659      	mov	r1, fp
    4802:	4620      	mov	r0, r4
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    4804:	fa5f fa82 	uxtb.w	sl, r2
    4808:	f7ff fd3a 	bl	4280 <call_handler>
    480c:	f8d9 3700 	ldr.w	r3, [r9, #1792]	; 0x700
        if (nrf_gpio_pin_sense_get(pin) == sense)
    4810:	f3c3 4301 	ubfx	r3, r3, #16, #2
    4814:	459a      	cmp	sl, r3
    4816:	d107      	bne.n	4828 <nrfx_gpiote_irq_handler+0xcc>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    4818:	2100      	movs	r1, #0
    481a:	4620      	mov	r0, r4
    481c:	f002 feb4 	bl	7588 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    4820:	4651      	mov	r1, sl
    4822:	4620      	mov	r0, r4
    4824:	f002 feb0 	bl	7588 <nrf_gpio_cfg_sense_set>
    reg->LATCH = (1 << pin_number);
    4828:	fa08 f404 	lsl.w	r4, r8, r4
    482c:	f8c6 4520 	str.w	r4, [r6, #1312]	; 0x520
}
    4830:	e7b8      	b.n	47a4 <nrfx_gpiote_irq_handler+0x48>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    4832:	2a02      	cmp	r2, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
    4834:	bf0c      	ite	eq
    4836:	2103      	moveq	r1, #3
    4838:	2102      	movne	r1, #2
    483a:	4620      	mov	r0, r4
    483c:	f002 fea4 	bl	7588 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    4840:	f1ba 0f03 	cmp.w	sl, #3
    4844:	d004      	beq.n	4850 <nrfx_gpiote_irq_handler+0xf4>
    4846:	2a02      	cmp	r2, #2
    4848:	d107      	bne.n	485a <nrfx_gpiote_irq_handler+0xfe>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    484a:	f1ba 0f01 	cmp.w	sl, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    484e:	d1eb      	bne.n	4828 <nrfx_gpiote_irq_handler+0xcc>
            call_handler(pin, trigger);
    4850:	4659      	mov	r1, fp
    4852:	4620      	mov	r0, r4
    4854:	f7ff fd14 	bl	4280 <call_handler>
    4858:	e7e6      	b.n	4828 <nrfx_gpiote_irq_handler+0xcc>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    485a:	2a03      	cmp	r2, #3
    485c:	d1e4      	bne.n	4828 <nrfx_gpiote_irq_handler+0xcc>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    485e:	f1ba 0f02 	cmp.w	sl, #2
    4862:	e7f4      	b.n	484e <nrfx_gpiote_irq_handler+0xf2>
        uint32_t ch = NRF_CTZ(mask);
    4864:	fa95 f3a5 	rbit	r3, r5
    4868:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    486c:	fa04 f203 	lsl.w	r2, r4, r3
    4870:	009b      	lsls	r3, r3, #2
    4872:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4876:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    487a:	ea25 0502 	bic.w	r5, r5, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    487e:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    4882:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    4886:	f3c0 2004 	ubfx	r0, r0, #8, #5
    488a:	f3c1 4101 	ubfx	r1, r1, #16, #2
    488e:	f7ff fcf7 	bl	4280 <call_handler>
    while (mask)
    4892:	2d00      	cmp	r5, #0
    4894:	d1e6      	bne.n	4864 <nrfx_gpiote_irq_handler+0x108>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    4896:	b003      	add	sp, #12
    4898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    489c:	40006100 	.word	0x40006100
    48a0:	40006000 	.word	0x40006000
    48a4:	40006120 	.word	0x40006120
    48a8:	200000d8 	.word	0x200000d8

000048ac <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    48ac:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    48ae:	4801      	ldr	r0, [pc, #4]	; (48b4 <nrfx_ppi_channel_alloc+0x8>)
    48b0:	f7ff bbcc 	b.w	404c <nrfx_flag32_alloc>
    48b4:	20000134 	.word	0x20000134

000048b8 <twim_irq_handler>:
{
    return nrf_twim_event_address_get(p_instance->p_twim, NRF_TWIM_EVENT_STOPPED);
}

static void twim_irq_handler(NRF_TWIM_Type * p_twim, twim_control_block_t * p_cb)
{
    48b8:	b5f0      	push	{r4, r5, r6, r7, lr}
}

NRF_STATIC_INLINE bool nrf_twim_event_check(NRF_TWIM_Type const * p_reg,
                                            nrf_twim_event_t      event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    48ba:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
    48be:	b087      	sub	sp, #28
    48c0:	4604      	mov	r4, r0
    48c2:	460d      	mov	r5, r1
    }
#endif

    NRFX_ASSERT(p_cb->handler);

    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
    48c4:	b1f3      	cbz	r3, 4904 <twim_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    48c6:	2300      	movs	r3, #0
    48c8:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
    48cc:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    48d0:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    {
        nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_ERROR);
        NRFX_LOG_DEBUG("TWIM: Event: %s.", EVT_TO_STR_TWIM(NRF_TWIM_EVENT_ERROR));
        if (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    48d4:	b9b3      	cbnz	r3, 4904 <twim_irq_handler+0x4c>
        {
            nrf_twim_int_disable(p_twim, p_cb->int_mask);
    48d6:	688b      	ldr	r3, [r1, #8]
}

NRF_STATIC_INLINE void nrf_twim_int_disable(NRF_TWIM_Type * p_reg,
                                            uint32_t mask)
{
    p_reg->INTENCLR = mask;
    48d8:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    48dc:	2302      	movs	r3, #2
    48de:	608b      	str	r3, [r1, #8]
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
    48e0:	688b      	ldr	r3, [r1, #8]
    p_reg->INTENSET = mask;
    48e2:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    48e6:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160

            if (!(nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_LASTTX) &&
    48ea:	b11b      	cbz	r3, 48f4 <twim_irq_handler+0x3c>
    p_reg->SHORTS = mask;
}

NRF_STATIC_INLINE uint32_t nrf_twim_shorts_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->SHORTS;
    48ec:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    48f0:	059f      	lsls	r7, r3, #22
    48f2:	d402      	bmi.n	48fa <twim_irq_handler+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    48f4:	2301      	movs	r3, #1
    48f6:	6223      	str	r3, [r4, #32]
    48f8:	6163      	str	r3, [r4, #20]
            {
                nrf_twim_task_trigger(p_twim, NRF_TWIM_TASK_RESUME);
                nrf_twim_task_trigger(p_twim, NRF_TWIM_TASK_STOP);
            }

            p_cb->error = true;
    48fa:	2301      	movs	r3, #1
    48fc:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e

    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
    {
        p_cb->handler(&event, p_cb->p_context);
    }
}
    4900:	b007      	add	sp, #28
    4902:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4904:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    4908:	2b00      	cmp	r3, #0
    490a:	d044      	beq.n	4996 <twim_irq_handler+0xde>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    490c:	2300      	movs	r3, #0
    490e:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    4912:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) && !p_cb->error)
    4916:	6a2b      	ldr	r3, [r5, #32]
    4918:	065e      	lsls	r6, r3, #25
    491a:	d40a      	bmi.n	4932 <twim_irq_handler+0x7a>
    491c:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
    4920:	b93b      	cbnz	r3, 4932 <twim_irq_handler+0x7a>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
    4922:	4629      	mov	r1, r5
    4924:	4620      	mov	r0, r4
    4926:	f002 fe3d 	bl	75a4 <xfer_completeness_check>
    492a:	f080 0001 	eor.w	r0, r0, #1
    492e:	f885 002e 	strb.w	r0, [r5, #46]	; 0x2e
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
    4932:	6a2b      	ldr	r3, [r5, #32]
    4934:	f013 0c04 	ands.w	ip, r3, #4
    4938:	d13e      	bne.n	49b8 <twim_irq_handler+0x100>
            event.xfer_desc = p_cb->xfer_desc;
    493a:	f105 070c 	add.w	r7, r5, #12
    493e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    4940:	ae01      	add	r6, sp, #4
    4942:	c60f      	stmia	r6!, {r0, r1, r2, r3}
            if (!p_cb->repeated || p_cb->error)
    4944:	f895 e030 	ldrb.w	lr, [r5, #48]	; 0x30
            event.xfer_desc = p_cb->xfer_desc;
    4948:	683b      	ldr	r3, [r7, #0]
    494a:	f8c4 c160 	str.w	ip, [r4, #352]	; 0x160
    494e:	6033      	str	r3, [r6, #0]
    4950:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
    4954:	f8c4 c15c 	str.w	ip, [r4, #348]	; 0x15c
    4958:	f8d4 315c 	ldr.w	r3, [r4, #348]	; 0x15c
            if (!p_cb->repeated || p_cb->error)
    495c:	f1be 0f00 	cmp.w	lr, #0
    4960:	d002      	beq.n	4968 <twim_irq_handler+0xb0>
    4962:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
    4966:	b33b      	cbz	r3, 49b8 <twim_irq_handler+0x100>
    p_reg->SHORTS = mask;
    4968:	2300      	movs	r3, #0
    496a:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
                p_cb->int_mask = 0;
    496e:	60ab      	str	r3, [r5, #8]
    p_reg->INTENCLR = mask;
    4970:	4b2e      	ldr	r3, [pc, #184]	; (4a2c <twim_irq_handler+0x174>)
    4972:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
    4976:	f344 3307 	sbfx	r3, r4, #12, #8
  if ((int32_t)(IRQn) >= 0)
    497a:	2b00      	cmp	r3, #0
    497c:	ea4f 3214 	mov.w	r2, r4, lsr #12
    4980:	db1a      	blt.n	49b8 <twim_irq_handler+0x100>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4982:	f002 011f 	and.w	r1, r2, #31
    4986:	095b      	lsrs	r3, r3, #5
    4988:	2201      	movs	r2, #1
    498a:	408a      	lsls	r2, r1
    498c:	3360      	adds	r3, #96	; 0x60
    498e:	4928      	ldr	r1, [pc, #160]	; (4a30 <twim_irq_handler+0x178>)
    4990:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4994:	e010      	b.n	49b8 <twim_irq_handler+0x100>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4996:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    499a:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
        if (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TX)
    499e:	7b2b      	ldrb	r3, [r5, #12]
    49a0:	bb23      	cbnz	r3, 49ec <twim_irq_handler+0x134>
            event.xfer_desc = p_cb->xfer_desc;
    49a2:	f105 070c 	add.w	r7, r5, #12
    49a6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    49a8:	ae01      	add	r6, sp, #4
    49aa:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    49ac:	683b      	ldr	r3, [r7, #0]
    49ae:	6033      	str	r3, [r6, #0]
            if (!p_cb->repeated)
    49b0:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
    49b4:	2b00      	cmp	r3, #0
    49b6:	d0d8      	beq.n	496a <twim_irq_handler+0xb2>
    uint32_t error_source = p_reg->ERRORSRC;
    49b8:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    49bc:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
    49c0:	0798      	lsls	r0, r3, #30
    49c2:	d525      	bpl.n	4a10 <twim_irq_handler+0x158>
        event.type = NRFX_TWIM_EVT_ADDRESS_NACK;
    49c4:	2301      	movs	r3, #1
        event.type = NRFX_TWIM_EVT_DONE;
    49c6:	f88d 3000 	strb.w	r3, [sp]
    if (!p_cb->repeated)
    49ca:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
    49ce:	b90b      	cbnz	r3, 49d4 <twim_irq_handler+0x11c>
        p_cb->busy = false;
    49d0:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
    49d4:	6a2b      	ldr	r3, [r5, #32]
    49d6:	075b      	lsls	r3, r3, #29
    49d8:	d503      	bpl.n	49e2 <twim_irq_handler+0x12a>
    49da:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
    49de:	2b00      	cmp	r3, #0
    49e0:	d08e      	beq.n	4900 <twim_irq_handler+0x48>
        p_cb->handler(&event, p_cb->p_context);
    49e2:	e9d5 3100 	ldrd	r3, r1, [r5]
    49e6:	4668      	mov	r0, sp
    49e8:	4798      	blx	r3
    49ea:	e789      	b.n	4900 <twim_irq_handler+0x48>
    p_reg->SHORTS = mask;
    49ec:	f44f 7300 	mov.w	r3, #512	; 0x200
    49f0:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
    49f4:	f240 2302 	movw	r3, #514	; 0x202
    49f8:	60ab      	str	r3, [r5, #8]
    p_reg->INTENCLR = mask;
    49fa:	f103 73ce 	add.w	r3, r3, #27000832	; 0x19c0000
    49fe:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
    4a02:	68ab      	ldr	r3, [r5, #8]
    p_reg->INTENSET = mask;
    4a04:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4a08:	2301      	movs	r3, #1
    4a0a:	60a3      	str	r3, [r4, #8]
    4a0c:	6223      	str	r3, [r4, #32]
            return;
    4a0e:	e777      	b.n	4900 <twim_irq_handler+0x48>
    else if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
    4a10:	0759      	lsls	r1, r3, #29
    4a12:	d501      	bpl.n	4a18 <twim_irq_handler+0x160>
        event.type = NRFX_TWIM_EVT_DATA_NACK;
    4a14:	2302      	movs	r3, #2
    4a16:	e7d6      	b.n	49c6 <twim_irq_handler+0x10e>
    else if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
    4a18:	07da      	lsls	r2, r3, #31
    4a1a:	d501      	bpl.n	4a20 <twim_irq_handler+0x168>
        event.type = NRFX_TWIM_EVT_OVERRUN;
    4a1c:	2303      	movs	r3, #3
    4a1e:	e7d2      	b.n	49c6 <twim_irq_handler+0x10e>
    else if (p_cb->error)
    4a20:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
    4a24:	2b00      	cmp	r3, #0
    4a26:	d0ce      	beq.n	49c6 <twim_irq_handler+0x10e>
        event.type = NRFX_TWIM_EVT_BUS_ERROR;
    4a28:	2304      	movs	r3, #4
    4a2a:	e7cc      	b.n	49c6 <twim_irq_handler+0x10e>
    4a2c:	019c0202 	.word	0x019c0202
    4a30:	e000e100 	.word	0xe000e100

00004a34 <nrfx_twim_init>:
{
    4a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    4a36:	7906      	ldrb	r6, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    4a38:	4d23      	ldr	r5, [pc, #140]	; (4ac8 <nrfx_twim_init+0x94>)
    4a3a:	f04f 0c34 	mov.w	ip, #52	; 0x34
    4a3e:	fb0c fc06 	mul.w	ip, ip, r6
    4a42:	eb05 040c 	add.w	r4, r5, ip
    4a46:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
    4a4a:	2f00      	cmp	r7, #0
    4a4c:	d13a      	bne.n	4ac4 <nrfx_twim_init+0x90>
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    4a4e:	6800      	ldr	r0, [r0, #0]
    p_cb->p_context       = p_context;
    4a50:	6063      	str	r3, [r4, #4]
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
    4a52:	7b4b      	ldrb	r3, [r1, #13]
    4a54:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
    4a58:	7b8b      	ldrb	r3, [r1, #14]
    p_cb->int_mask        = 0;
    4a5a:	60a7      	str	r7, [r4, #8]
    p_cb->repeated        = false;
    4a5c:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
    p_cb->busy            = false;
    4a60:	f884 702f 	strb.w	r7, [r4, #47]	; 0x2f
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
    4a64:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    p_cb->handler         = event_handler;
    4a68:	f845 200c 	str.w	r2, [r5, ip]
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
    4a6c:	7bcc      	ldrb	r4, [r1, #15]
    4a6e:	b1b3      	cbz	r3, 4a9e <nrfx_twim_init+0x6a>
    4a70:	b92c      	cbnz	r4, 4a7e <nrfx_twim_init+0x4a>
        nrf_twim_pins_set(p_twim, p_config->scl, p_config->sda);
    4a72:	e9d1 4300 	ldrd	r4, r3, [r1]
    p_reg->PSEL.SCL = scl_pin;
    4a76:	f8c0 4508 	str.w	r4, [r0, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
    4a7a:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
    nrf_twim_frequency_set(p_twim, (nrf_twim_frequency_t)p_config->frequency);
    4a7e:	688b      	ldr	r3, [r1, #8]
    p_reg->FREQUENCY = frequency;
    4a80:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
    if (p_cb->handler)
    4a84:	b11a      	cbz	r2, 4a8e <nrfx_twim_init+0x5a>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twim));
    4a86:	f340 3007 	sbfx	r0, r0, #12, #8
    4a8a:	f7fd faf9 	bl	2080 <arch_irq_enable>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    4a8e:	2334      	movs	r3, #52	; 0x34
    4a90:	fb03 5506 	mla	r5, r3, r6, r5
    return err_code;
    4a94:	480d      	ldr	r0, [pc, #52]	; (4acc <nrfx_twim_init+0x98>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    4a96:	2301      	movs	r3, #1
    4a98:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
    4a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    *p_pin = pin_number & 0x1F;
    4a9e:	680b      	ldr	r3, [r1, #0]
    4aa0:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    4aa4:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
    4aa8:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    4aac:	f240 6c0c 	movw	ip, #1548	; 0x60c
    4ab0:	f847 c023 	str.w	ip, [r7, r3, lsl #2]
    *p_pin = pin_number & 0x1F;
    4ab4:	684b      	ldr	r3, [r1, #4]
    4ab6:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    4aba:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    4abe:	f847 c023 	str.w	ip, [r7, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
    4ac2:	e7d5      	b.n	4a70 <nrfx_twim_init+0x3c>
        return err_code;
    4ac4:	4802      	ldr	r0, [pc, #8]	; (4ad0 <nrfx_twim_init+0x9c>)
    4ac6:	e7e9      	b.n	4a9c <nrfx_twim_init+0x68>
    4ac8:	20000630 	.word	0x20000630
    4acc:	0bad0000 	.word	0x0bad0000
    4ad0:	0bad0005 	.word	0x0bad0005

00004ad4 <nrfx_twim_enable>:
    nrf_twim_enable(p_instance->p_twim);
    4ad4:	6803      	ldr	r3, [r0, #0]
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    4ad6:	7902      	ldrb	r2, [r0, #4]
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
    4ad8:	2106      	movs	r1, #6
    4ada:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    4ade:	4b04      	ldr	r3, [pc, #16]	; (4af0 <nrfx_twim_enable+0x1c>)
    4ae0:	2134      	movs	r1, #52	; 0x34
    4ae2:	fb01 3302 	mla	r3, r1, r2, r3
    4ae6:	2202      	movs	r2, #2
    4ae8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
    4aec:	4770      	bx	lr
    4aee:	bf00      	nop
    4af0:	20000630 	.word	0x20000630

00004af4 <nrfx_twim_disable>:
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    4af4:	7901      	ldrb	r1, [r0, #4]
    p_cb->int_mask = 0;
    4af6:	4b0c      	ldr	r3, [pc, #48]	; (4b28 <nrfx_twim_disable+0x34>)
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    4af8:	6802      	ldr	r2, [r0, #0]
    p_cb->int_mask = 0;
    4afa:	2034      	movs	r0, #52	; 0x34
    4afc:	fb00 3301 	mla	r3, r0, r1, r3
    4b00:	2100      	movs	r1, #0
    p_reg->INTENCLR = mask;
    4b02:	480a      	ldr	r0, [pc, #40]	; (4b2c <nrfx_twim_disable+0x38>)
    4b04:	6099      	str	r1, [r3, #8]
    4b06:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
    4b0a:	f8d2 0200 	ldr.w	r0, [r2, #512]	; 0x200
    4b0e:	f420 50bc 	bic.w	r0, r0, #6016	; 0x1780
    4b12:	f8c2 0200 	str.w	r0, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
    4b16:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    4b1a:	2201      	movs	r2, #1
    4b1c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    p_cb->busy = false;
    4b20:	f883 102f 	strb.w	r1, [r3, #47]	; 0x2f
}
    4b24:	4770      	bx	lr
    4b26:	bf00      	nop
    4b28:	20000630 	.word	0x20000630
    4b2c:	019c0202 	.word	0x019c0202

00004b30 <nrfx_twim_uninit>:
{
    4b30:	b570      	push	{r4, r5, r6, lr}
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    4b32:	7906      	ldrb	r6, [r0, #4]
    if (p_cb->handler)
    4b34:	4d18      	ldr	r5, [pc, #96]	; (4b98 <nrfx_twim_uninit+0x68>)
    4b36:	2334      	movs	r3, #52	; 0x34
    4b38:	4373      	muls	r3, r6
{
    4b3a:	4604      	mov	r4, r0
    if (p_cb->handler)
    4b3c:	58eb      	ldr	r3, [r5, r3]
    4b3e:	b123      	cbz	r3, 4b4a <nrfx_twim_uninit+0x1a>
    4b40:	6800      	ldr	r0, [r0, #0]
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_twim));
    4b42:	f340 3007 	sbfx	r0, r0, #12, #8
    4b46:	f7fd faab 	bl	20a0 <arch_irq_disable>
    nrfx_twim_disable(p_instance);
    4b4a:	4620      	mov	r0, r4
    4b4c:	f7ff ffd2 	bl	4af4 <nrfx_twim_disable>
    if (!p_cb->skip_gpio_cfg && !p_cb->hold_bus_uninit)
    4b50:	2334      	movs	r3, #52	; 0x34
    4b52:	fb03 5306 	mla	r3, r3, r6, r5
    4b56:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
    4b5a:	b9b2      	cbnz	r2, 4b8a <nrfx_twim_uninit+0x5a>
    4b5c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
    4b60:	b99b      	cbnz	r3, 4b8a <nrfx_twim_uninit+0x5a>
        nrf_gpio_cfg_default(nrf_twim_scl_pin_get(p_instance->p_twim));
    4b62:	6820      	ldr	r0, [r4, #0]
    return p_reg->PSEL.SCL;
    4b64:	f8d0 3508 	ldr.w	r3, [r0, #1288]	; 0x508
    *p_pin = pin_number & 0x1F;
    4b68:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    4b6c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    4b70:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    4b74:	2102      	movs	r1, #2
    4b76:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    return p_reg->PSEL.SDA;
    4b7a:	f8d0 350c 	ldr.w	r3, [r0, #1292]	; 0x50c
    *p_pin = pin_number & 0x1F;
    4b7e:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    4b82:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    4b86:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
    4b8a:	2334      	movs	r3, #52	; 0x34
    4b8c:	fb03 5506 	mla	r5, r3, r6, r5
    4b90:	2300      	movs	r3, #0
    4b92:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
    4b96:	bd70      	pop	{r4, r5, r6, pc}
    4b98:	20000630 	.word	0x20000630

00004b9c <nrfx_twim_xfer>:
{
    4b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    p_cb->error = false;
    4ba0:	f8df c2d0 	ldr.w	ip, [pc, #720]	; 4e74 <nrfx_twim_xfer+0x2d8>
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    4ba4:	f890 e004 	ldrb.w	lr, [r0, #4]
    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
    4ba8:	6804      	ldr	r4, [r0, #0]
    p_cb->error = false;
    4baa:	2334      	movs	r3, #52	; 0x34
    4bac:	fb03 c30e 	mla	r3, r3, lr, ip
{
    4bb0:	4617      	mov	r7, r2
    p_cb->error = false;
    4bb2:	2200      	movs	r2, #0
    4bb4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
    4bb8:	684b      	ldr	r3, [r1, #4]
{
    4bba:	460d      	mov	r5, r1
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
    4bbc:	b14b      	cbz	r3, 4bd2 <nrfx_twim_xfer+0x36>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    4bbe:	68cb      	ldr	r3, [r1, #12]
    4bc0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
    4bc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    4bc8:	d003      	beq.n	4bd2 <nrfx_twim_xfer+0x36>
        return err_code;
    4bca:	4eab      	ldr	r6, [pc, #684]	; (4e78 <nrfx_twim_xfer+0x2dc>)
}
    4bcc:	4630      	mov	r0, r6
    4bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (p_cb->busy)
    4bd2:	2634      	movs	r6, #52	; 0x34
    p_reg->INTENCLR = mask;
    4bd4:	4ba9      	ldr	r3, [pc, #676]	; (4e7c <nrfx_twim_xfer+0x2e0>)
    4bd6:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    4bda:	fb06 c60e 	mla	r6, r6, lr, ip
    4bde:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
    4be2:	f003 0aff 	and.w	sl, r3, #255	; 0xff
    4be6:	b123      	cbz	r3, 4bf2 <nrfx_twim_xfer+0x56>
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
    4be8:	68b3      	ldr	r3, [r6, #8]
    p_reg->INTENSET = mask;
    4bea:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
        return err_code;
    4bee:	4ea4      	ldr	r6, [pc, #656]	; (4e80 <nrfx_twim_xfer+0x2e4>)
    4bf0:	e7ec      	b.n	4bcc <nrfx_twim_xfer+0x30>
                      (NRFX_TWIM_FLAG_REPEATED_XFER & flags)) ? false: true;
    4bf2:	f017 0f14 	tst.w	r7, #20
    4bf6:	bf0c      	ite	eq
    4bf8:	2301      	moveq	r3, #1
    4bfa:	2300      	movne	r3, #0
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
    4bfc:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
    p_cb->xfer_desc = *p_xfer_desc;
    4c00:	46a9      	mov	r9, r5
    4c02:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
    4c06:	f106 080c 	add.w	r8, r6, #12
    4c0a:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
    4c0e:	f8d9 3000 	ldr.w	r3, [r9]
    4c12:	f8c8 3000 	str.w	r3, [r8]
    p_cb->repeated = (flags & NRFX_TWIM_FLAG_REPEATED_XFER) ? true : false;
    4c16:	f3c7 1300 	ubfx	r3, r7, #4, #1
    4c1a:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
    p_cb->flags = flags;
    4c1e:	6237      	str	r7, [r6, #32]
    p_reg->ADDRESS = address;
    4c20:	786b      	ldrb	r3, [r5, #1]
    4c22:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4c26:	f8c4 a104 	str.w	sl, [r4, #260]	; 0x104
    4c2a:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    4c2e:	f8c4 a124 	str.w	sl, [r4, #292]	; 0x124
    4c32:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    4c36:	f8c4 a160 	str.w	sl, [r4, #352]	; 0x160
    4c3a:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
    4c3e:	f8c4 a148 	str.w	sl, [r4, #328]	; 0x148
    4c42:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    if (NRFX_TWIM_FLAG_TX_POSTINC & flags)
    4c46:	f017 0301 	ands.w	r3, r7, #1
    return p_reg->RXD.AMOUNT;
}

NRF_STATIC_INLINE void nrf_twim_tx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_ArrayList << TWIM_TXD_LIST_LIST_Pos;
    4c4a:	bf18      	it	ne
    4c4c:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_tx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_Disabled << TWIM_TXD_LIST_LIST_Pos;
    4c4e:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
    if (NRFX_TWIM_FLAG_RX_POSTINC & flags)
    4c52:	f017 0302 	ands.w	r3, r7, #2
}

NRF_STATIC_INLINE void nrf_twim_rx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_ArrayList << TWIM_RXD_LIST_LIST_Pos;
    4c56:	bf18      	it	ne
    4c58:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_rx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_Disabled << TWIM_RXD_LIST_LIST_Pos;
    4c5a:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
    switch (p_xfer_desc->type)
    4c5e:	782a      	ldrb	r2, [r5, #0]
    4c60:	2a03      	cmp	r2, #3
    4c62:	f200 80b5 	bhi.w	4dd0 <nrfx_twim_xfer+0x234>
    4c66:	e8df f002 	tbb	[pc, r2]
    4c6a:	a084      	.short	0xa084
    4c6c:	0269      	.short	0x0269
    4c6e:	692b      	ldr	r3, [r5, #16]
    4c70:	f003 4160 	and.w	r1, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
    4c74:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
    4c78:	d1a7      	bne.n	4bca <nrfx_twim_xfer+0x2e>
    p_reg->SHORTS = mask;
    4c7a:	f44f 7180 	mov.w	r1, #256	; 0x100
    4c7e:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    4c82:	68e8      	ldr	r0, [r5, #12]
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    4c84:	6869      	ldr	r1, [r5, #4]
    4c86:	f8c4 0544 	str.w	r0, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    4c8a:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4c8e:	2100      	movs	r1, #0
    4c90:	f8c4 1150 	str.w	r1, [r4, #336]	; 0x150
    4c94:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4c98:	2001      	movs	r0, #1
    4c9a:	6220      	str	r0, [r4, #32]
    4c9c:	60a0      	str	r0, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4c9e:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
        while (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_TXSTARTED))
    4ca2:	2800      	cmp	r0, #0
    4ca4:	d0fb      	beq.n	4c9e <nrfx_twim_xfer+0x102>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4ca6:	f8c4 1150 	str.w	r1, [r4, #336]	; 0x150
    4caa:	f8d4 1150 	ldr.w	r1, [r4, #336]	; 0x150
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
    4cae:	68a9      	ldr	r1, [r5, #8]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    4cb0:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
        p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
    4cb4:	2334      	movs	r3, #52	; 0x34
    4cb6:	fb03 c30e 	mla	r3, r3, lr, ip
    p_reg->TXD.MAXCNT = length;
    4cba:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
    4cbe:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    4cc2:	6099      	str	r1, [r3, #8]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
    4cc4:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
    4cc6:	4e6f      	ldr	r6, [pc, #444]	; (4e84 <nrfx_twim_xfer+0x2e8>)
    if (!(flags & NRFX_TWIM_FLAG_HOLD_XFER) && (p_xfer_desc->type != NRFX_TWIM_XFER_TXTX))
    4cc8:	0739      	lsls	r1, r7, #28
    4cca:	d406      	bmi.n	4cda <nrfx_twim_xfer+0x13e>
    4ccc:	2a03      	cmp	r2, #3
    4cce:	d004      	beq.n	4cda <nrfx_twim_xfer+0x13e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4cd0:	2201      	movs	r2, #1
    4cd2:	50e2      	str	r2, [r4, r3]
        if (p_xfer_desc->primary_length == 0)
    4cd4:	686b      	ldr	r3, [r5, #4]
    4cd6:	b903      	cbnz	r3, 4cda <nrfx_twim_xfer+0x13e>
    4cd8:	6162      	str	r2, [r4, #20]
    if (p_cb->handler)
    4cda:	2334      	movs	r3, #52	; 0x34
    4cdc:	fb03 f30e 	mul.w	r3, r3, lr
    4ce0:	eb0c 0103 	add.w	r1, ip, r3
    4ce4:	f85c 2003 	ldr.w	r2, [ip, r3]
    4ce8:	2a00      	cmp	r2, #0
    4cea:	d174      	bne.n	4dd6 <nrfx_twim_xfer+0x23a>
                transmission_finished = true;
    4cec:	2101      	movs	r1, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4cee:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    4cf2:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    4cf6:	2800      	cmp	r0, #0
    4cf8:	f040 8088 	bne.w	4e0c <nrfx_twim_xfer+0x270>
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_SUSPENDED))
    4cfc:	3b00      	subs	r3, #0
    4cfe:	bf18      	it	ne
    4d00:	2301      	movne	r3, #1
    4d02:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
    4d06:	2800      	cmp	r0, #0
    4d08:	f000 8086 	beq.w	4e18 <nrfx_twim_xfer+0x27c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4d0c:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
    4d10:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4d14:	f8d4 5160 	ldr.w	r5, [r4, #352]	; 0x160
    return p_reg->SHORTS;
    4d18:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
                if (!(lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_STOP_MASK)))
    4d1c:	b115      	cbz	r5, 4d24 <nrfx_twim_xfer+0x188>
    4d1e:	f410 7f00 	tst.w	r0, #512	; 0x200
    4d22:	d104      	bne.n	4d2e <nrfx_twim_xfer+0x192>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4d24:	6221      	str	r1, [r4, #32]
    4d26:	6161      	str	r1, [r4, #20]
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
    4d28:	2d00      	cmp	r5, #0
    4d2a:	d0e0      	beq.n	4cee <nrfx_twim_xfer+0x152>
                    transmission_finished = false;
    4d2c:	2300      	movs	r3, #0
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
    4d2e:	05c0      	lsls	r0, r0, #23
    4d30:	d572      	bpl.n	4e18 <nrfx_twim_xfer+0x27c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4d32:	f8c4 2148 	str.w	r2, [r4, #328]	; 0x148
    4d36:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
        } while (!transmission_finished);
    4d3a:	e7d8      	b.n	4cee <nrfx_twim_xfer+0x152>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    4d3c:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    4d3e:	68e9      	ldr	r1, [r5, #12]
    4d40:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    4d44:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    4d48:	692b      	ldr	r3, [r5, #16]
    4d4a:	f003 4160 	and.w	r1, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
    4d4e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
    4d52:	f47f af3a 	bne.w	4bca <nrfx_twim_xfer+0x2e>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
    4d56:	68a9      	ldr	r1, [r5, #8]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    4d58:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->SHORTS = mask;
    4d5c:	f44f 5384 	mov.w	r3, #4224	; 0x1080
    p_reg->RXD.MAXCNT = length;
    4d60:	f8c4 1538 	str.w	r1, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
    4d64:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    4d68:	2334      	movs	r3, #52	; 0x34
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    4d6a:	fb03 c30e 	mla	r3, r3, lr, ip
    4d6e:	2102      	movs	r1, #2
    4d70:	e012      	b.n	4d98 <nrfx_twim_xfer+0x1fc>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    4d72:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    4d74:	68e9      	ldr	r1, [r5, #12]
    4d76:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
        if (NRFX_TWIM_FLAG_TX_NO_STOP & flags)
    4d7a:	f017 0f20 	tst.w	r7, #32
    p_reg->TXD.MAXCNT = length;
    4d7e:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    4d82:	f04f 0334 	mov.w	r3, #52	; 0x34
    4d86:	d00b      	beq.n	4da0 <nrfx_twim_xfer+0x204>
    p_reg->SHORTS = mask;
    4d88:	f44f 7180 	mov.w	r1, #256	; 0x100
    4d8c:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
    4d90:	fb03 c30e 	mla	r3, r3, lr, ip
    4d94:	f44f 2180 	mov.w	r1, #262144	; 0x40000
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    4d98:	6099      	str	r1, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4d9a:	2301      	movs	r3, #1
    4d9c:	6223      	str	r3, [r4, #32]
    4d9e:	e791      	b.n	4cc4 <nrfx_twim_xfer+0x128>
    p_reg->SHORTS = mask;
    4da0:	f44f 7100 	mov.w	r1, #512	; 0x200
    4da4:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
    4da8:	e7df      	b.n	4d6a <nrfx_twim_xfer+0x1ce>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    4daa:	686b      	ldr	r3, [r5, #4]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    4dac:	68e9      	ldr	r1, [r5, #12]
    4dae:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    4db2:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
    4db6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    4dba:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    4dbe:	2334      	movs	r3, #52	; 0x34
    4dc0:	fb03 c30e 	mla	r3, r3, lr, ip
    4dc4:	2102      	movs	r1, #2
    4dc6:	6099      	str	r1, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4dc8:	2301      	movs	r3, #1
    4dca:	6223      	str	r3, [r4, #32]
        start_task = NRF_TWIM_TASK_STARTRX;
    4dcc:	2300      	movs	r3, #0
    4dce:	e77a      	b.n	4cc6 <nrfx_twim_xfer+0x12a>
    switch (p_xfer_desc->type)
    4dd0:	4e2d      	ldr	r6, [pc, #180]	; (4e88 <nrfx_twim_xfer+0x2ec>)
    4dd2:	2308      	movs	r3, #8
    4dd4:	e778      	b.n	4cc8 <nrfx_twim_xfer+0x12c>
        if (flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER)
    4dd6:	077a      	lsls	r2, r7, #29
            p_cb->int_mask = 0;
    4dd8:	bf44      	itt	mi
    4dda:	2300      	movmi	r3, #0
    4ddc:	608b      	strmi	r3, [r1, #8]
        if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK))
    4dde:	067b      	lsls	r3, r7, #25
    4de0:	d406      	bmi.n	4df0 <nrfx_twim_xfer+0x254>
            p_cb->int_mask |= NRF_TWIM_INT_STOPPED_MASK;
    4de2:	2334      	movs	r3, #52	; 0x34
    4de4:	fb03 c30e 	mla	r3, r3, lr, ip
    4de8:	689a      	ldr	r2, [r3, #8]
    4dea:	f042 0202 	orr.w	r2, r2, #2
    4dee:	609a      	str	r2, [r3, #8]
        p_cb->int_mask |= NRF_TWIM_INT_ERROR_MASK;
    4df0:	2334      	movs	r3, #52	; 0x34
    4df2:	fb03 cc0e 	mla	ip, r3, lr, ip
    4df6:	f8dc 3008 	ldr.w	r3, [ip, #8]
    4dfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    4dfe:	f8cc 3008 	str.w	r3, [ip, #8]
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
    4e02:	f8dc 3008 	ldr.w	r3, [ip, #8]
    p_reg->INTENSET = mask;
    4e06:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    4e0a:	e6df      	b.n	4bcc <nrfx_twim_xfer+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4e0c:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
    4e10:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
                transmission_finished = true;
    4e14:	2301      	movs	r3, #1
    4e16:	e774      	b.n	4d02 <nrfx_twim_xfer+0x166>
        } while (!transmission_finished);
    4e18:	2b00      	cmp	r3, #0
    4e1a:	f43f af68 	beq.w	4cee <nrfx_twim_xfer+0x152>
        p_cb->busy = false;
    4e1e:	2134      	movs	r1, #52	; 0x34
    uint32_t error_source = p_reg->ERRORSRC;
    4e20:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    4e24:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
    4e28:	fb01 c20e 	mla	r2, r1, lr, ip
    4e2c:	2000      	movs	r0, #0
    4e2e:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
        if (errorsrc)
    4e32:	b18b      	cbz	r3, 4e58 <nrfx_twim_xfer+0x2bc>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    4e34:	4a15      	ldr	r2, [pc, #84]	; (4e8c <nrfx_twim_xfer+0x2f0>)
    4e36:	4e16      	ldr	r6, [pc, #88]	; (4e90 <nrfx_twim_xfer+0x2f4>)
    4e38:	f013 0f01 	tst.w	r3, #1
    4e3c:	bf18      	it	ne
    4e3e:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    4e40:	f013 0f02 	tst.w	r3, #2
    4e44:	f102 0201 	add.w	r2, r2, #1
    4e48:	bf18      	it	ne
    4e4a:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    4e4c:	f013 0f04 	tst.w	r3, #4
    4e50:	4b10      	ldr	r3, [pc, #64]	; (4e94 <nrfx_twim_xfer+0x2f8>)
    4e52:	bf18      	it	ne
    4e54:	461e      	movne	r6, r3
    4e56:	e6b9      	b.n	4bcc <nrfx_twim_xfer+0x30>
            if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) &&
    4e58:	067b      	lsls	r3, r7, #25
    4e5a:	f53f aeb7 	bmi.w	4bcc <nrfx_twim_xfer+0x30>
                !xfer_completeness_check(p_twim, p_cb))
    4e5e:	fb0e c101 	mla	r1, lr, r1, ip
    4e62:	4620      	mov	r0, r4
    4e64:	f002 fb9e 	bl	75a4 <xfer_completeness_check>
                err_code = NRFX_ERROR_INTERNAL;
    4e68:	4b09      	ldr	r3, [pc, #36]	; (4e90 <nrfx_twim_xfer+0x2f4>)
    4e6a:	2800      	cmp	r0, #0
    4e6c:	bf08      	it	eq
    4e6e:	461e      	moveq	r6, r3
    4e70:	e6ac      	b.n	4bcc <nrfx_twim_xfer+0x30>
    4e72:	bf00      	nop
    4e74:	20000630 	.word	0x20000630
    4e78:	0bad000a 	.word	0x0bad000a
    4e7c:	019c0202 	.word	0x019c0202
    4e80:	0bad000b 	.word	0x0bad000b
    4e84:	0bad0000 	.word	0x0bad0000
    4e88:	0bad0004 	.word	0x0bad0004
    4e8c:	0bae0000 	.word	0x0bae0000
    4e90:	0bad0001 	.word	0x0bad0001
    4e94:	0bae0002 	.word	0x0bae0002

00004e98 <nrfx_twim_0_irq_handler>:

#if NRFX_CHECK(NRFX_TWIM0_ENABLED)
void nrfx_twim_0_irq_handler(void)
{
    twim_irq_handler(NRF_TWIM0, &m_cb[NRFX_TWIM0_INST_IDX]);
    4e98:	4901      	ldr	r1, [pc, #4]	; (4ea0 <nrfx_twim_0_irq_handler+0x8>)
    4e9a:	4802      	ldr	r0, [pc, #8]	; (4ea4 <nrfx_twim_0_irq_handler+0xc>)
    4e9c:	f7ff bd0c 	b.w	48b8 <twim_irq_handler>
    4ea0:	20000630 	.word	0x20000630
    4ea4:	40003000 	.word	0x40003000

00004ea8 <nrfx_twim_1_irq_handler>:
#endif

#if NRFX_CHECK(NRFX_TWIM1_ENABLED)
void nrfx_twim_1_irq_handler(void)
{
    twim_irq_handler(NRF_TWIM1, &m_cb[NRFX_TWIM1_INST_IDX]);
    4ea8:	4902      	ldr	r1, [pc, #8]	; (4eb4 <nrfx_twim_1_irq_handler+0xc>)
    4eaa:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
    4eae:	f7ff bd03 	b.w	48b8 <twim_irq_handler>
    4eb2:	bf00      	nop
    4eb4:	20000664 	.word	0x20000664

00004eb8 <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    4eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    *p_pin = pin_number & 0x1F;
    4ebc:	f000 001f 	and.w	r0, r0, #31
    4ec0:	f001 061f 	and.w	r6, r1, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    4ec4:	2401      	movs	r4, #1
    p_reg->OUTSET = set_mask;
    4ec6:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    4eca:	fa04 f800 	lsl.w	r8, r4, r0
    reg->PIN_CNF[pin_number] = cnf;
    4ece:	f506 72e0 	add.w	r2, r6, #448	; 0x1c0
    4ed2:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
    4ed6:	f240 630d 	movw	r3, #1549	; 0x60d
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    4eda:	40b4      	lsls	r4, r6
    p_reg->OUTSET = set_mask;
    4edc:	f8c5 8508 	str.w	r8, [r5, #1288]	; 0x508
    4ee0:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = cnf;
    4ee4:	f845 3020 	str.w	r3, [r5, r0, lsl #2]
    4ee8:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
    nrf_gpio_pin_set(scl_pin);
    nrf_gpio_pin_set(sda_pin);

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
    4eec:	2004      	movs	r0, #4
    4eee:	f002 fb3f 	bl	7570 <nrfx_busy_wait>
    4ef2:	2709      	movs	r7, #9
    return p_reg->IN;
    4ef4:	f8d5 3510 	ldr.w	r3, [r5, #1296]	; 0x510

    for (uint8_t i = 0; i < 9; i++)
    {
        if (nrf_gpio_pin_read(sda_pin))
    4ef8:	421c      	tst	r4, r3
    4efa:	d10d      	bne.n	4f18 <nrfx_twi_twim_bus_recover+0x60>
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
    4efc:	2004      	movs	r0, #4
    p_reg->OUTCLR = clr_mask;
    4efe:	f8c5 850c 	str.w	r8, [r5, #1292]	; 0x50c
    4f02:	f002 fb35 	bl	7570 <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
    4f06:	3f01      	subs	r7, #1
    p_reg->OUTSET = set_mask;
    4f08:	f8c5 8508 	str.w	r8, [r5, #1288]	; 0x508
            nrf_gpio_pin_set(scl_pin);
            NRFX_DELAY_US(4);
    4f0c:	2004      	movs	r0, #4
    4f0e:	f002 fb2f 	bl	7570 <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
    4f12:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
    4f16:	d1ed      	bne.n	4ef4 <nrfx_twi_twim_bus_recover+0x3c>
    p_reg->OUTCLR = clr_mask;
    4f18:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
    4f1c:	2004      	movs	r0, #4
    4f1e:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
    4f22:	f002 fb25 	bl	7570 <nrfx_busy_wait>
    p_reg->OUTSET = set_mask;
    4f26:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    nrf_gpio_pin_set(sda_pin);
    NRFX_DELAY_US(4);
    4f2a:	2004      	movs	r0, #4
    4f2c:	f002 fb20 	bl	7570 <nrfx_busy_wait>
    return p_reg->IN;
    4f30:	f8d5 1510 	ldr.w	r1, [r5, #1296]	; 0x510

    if (nrf_gpio_pin_read(sda_pin))
    4f34:	4803      	ldr	r0, [pc, #12]	; (4f44 <nrfx_twi_twim_bus_recover+0x8c>)
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    4f36:	fa21 f606 	lsr.w	r6, r1, r6
    4f3a:	f006 0601 	and.w	r6, r6, #1
    4f3e:	1b80      	subs	r0, r0, r6
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
    4f40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4f44:	0bad0001 	.word	0x0bad0001

00004f48 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    4f48:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    4f4a:	4c14      	ldr	r4, [pc, #80]	; (4f9c <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    4f4c:	4a14      	ldr	r2, [pc, #80]	; (4fa0 <_DoInit+0x58>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    4f4e:	4915      	ldr	r1, [pc, #84]	; (4fa4 <_DoInit+0x5c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    4f50:	2303      	movs	r3, #3
    4f52:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    4f54:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    4f56:	4b14      	ldr	r3, [pc, #80]	; (4fa8 <_DoInit+0x60>)
  p->aUp[0].sName         = "Terminal";
    4f58:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    4f5a:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    4f5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    4f60:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    4f62:	2300      	movs	r3, #0
    4f64:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    4f66:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    4f68:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    4f6a:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    4f6c:	4a0f      	ldr	r2, [pc, #60]	; (4fac <_DoInit+0x64>)
    4f6e:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
    4f70:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    4f72:	2210      	movs	r2, #16
    4f74:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    4f76:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    4f78:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    4f7a:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    4f7c:	f001 fb79 	bl	6672 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    4f80:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
    4f84:	490a      	ldr	r1, [pc, #40]	; (4fb0 <_DoInit+0x68>)
    4f86:	4620      	mov	r0, r4
    4f88:	f001 fb73 	bl	6672 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    4f8c:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
    4f90:	2320      	movs	r3, #32
    4f92:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    4f94:	f3bf 8f5f 	dmb	sy
}
    4f98:	bd10      	pop	{r4, pc}
    4f9a:	bf00      	nop
    4f9c:	20000698 	.word	0x20000698
    4fa0:	00008276 	.word	0x00008276
    4fa4:	0000827f 	.word	0x0000827f
    4fa8:	200007c5 	.word	0x200007c5
    4fac:	200007b5 	.word	0x200007b5
    4fb0:	00008283 	.word	0x00008283

00004fb4 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    4fb4:	b570      	push	{r4, r5, r6, lr}
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    4fb6:	4b16      	ldr	r3, [pc, #88]	; (5010 <SEGGER_RTT_WriteNoLock+0x5c>)
    4fb8:	2418      	movs	r4, #24
    4fba:	fb00 4504 	mla	r5, r0, r4, r4
    4fbe:	441d      	add	r5, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    4fc0:	fb04 3300 	mla	r3, r4, r0, r3
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    4fc4:	4616      	mov	r6, r2
  switch (pRing->Flags) {
    4fc6:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    4fc8:	2c01      	cmp	r4, #1
    4fca:	d00e      	beq.n	4fea <SEGGER_RTT_WriteNoLock+0x36>
    4fcc:	2c02      	cmp	r4, #2
    4fce:	d018      	beq.n	5002 <SEGGER_RTT_WriteNoLock+0x4e>
    4fd0:	b9e4      	cbnz	r4, 500c <SEGGER_RTT_WriteNoLock+0x58>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
    4fd2:	4628      	mov	r0, r5
    4fd4:	f002 fb16 	bl	7604 <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
    4fd8:	4286      	cmp	r6, r0
    4fda:	d804      	bhi.n	4fe6 <SEGGER_RTT_WriteNoLock+0x32>
      Status = 0u;
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    4fdc:	4632      	mov	r2, r6
    4fde:	4628      	mov	r0, r5
    4fe0:	f002 fb19 	bl	7616 <_WriteNoCheck>
    4fe4:	4634      	mov	r4, r6
  }
  //
  // Finish up.
  //
  return Status;
}
    4fe6:	4620      	mov	r0, r4
    4fe8:	bd70      	pop	{r4, r5, r6, pc}
    Avail = _GetAvailWriteSpace(pRing);
    4fea:	4628      	mov	r0, r5
    4fec:	f002 fb0a 	bl	7604 <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
    4ff0:	4286      	cmp	r6, r0
    4ff2:	4634      	mov	r4, r6
    4ff4:	bf28      	it	cs
    4ff6:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
    4ff8:	4622      	mov	r2, r4
    4ffa:	4628      	mov	r0, r5
    4ffc:	f002 fb0b 	bl	7616 <_WriteNoCheck>
    break;
    5000:	e7f1      	b.n	4fe6 <SEGGER_RTT_WriteNoLock+0x32>
    Status = _WriteBlocking(pRing, pData, NumBytes);
    5002:	4628      	mov	r0, r5
}
    5004:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
    5008:	f002 bb23 	b.w	7652 <_WriteBlocking>
  switch (pRing->Flags) {
    500c:	2400      	movs	r4, #0
  return Status;
    500e:	e7ea      	b.n	4fe6 <SEGGER_RTT_WriteNoLock+0x32>
    5010:	20000698 	.word	0x20000698

00005014 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    5014:	4b0e      	ldr	r3, [pc, #56]	; (5050 <z_sys_init_run_level+0x3c>)
{
    5016:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    5018:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    501c:	3001      	adds	r0, #1
    501e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    5022:	42a6      	cmp	r6, r4
    5024:	d800      	bhi.n	5028 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    5026:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    5028:	e9d4 3500 	ldrd	r3, r5, [r4]
    502c:	4628      	mov	r0, r5
    502e:	4798      	blx	r3
		if (dev != NULL) {
    5030:	b165      	cbz	r5, 504c <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
    5032:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
    5034:	b130      	cbz	r0, 5044 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    5036:	2800      	cmp	r0, #0
    5038:	bfb8      	it	lt
    503a:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    503c:	28ff      	cmp	r0, #255	; 0xff
    503e:	bfa8      	it	ge
    5040:	20ff      	movge	r0, #255	; 0xff
    5042:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    5044:	785a      	ldrb	r2, [r3, #1]
    5046:	f042 0201 	orr.w	r2, r2, #1
    504a:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    504c:	3408      	adds	r4, #8
    504e:	e7e8      	b.n	5022 <z_sys_init_run_level+0xe>
    5050:	00008098 	.word	0x00008098

00005054 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    5054:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    5056:	4605      	mov	r5, r0
    5058:	b910      	cbnz	r0, 5060 <z_impl_device_get_binding+0xc>
		return NULL;
    505a:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    505c:	4620      	mov	r0, r4
    505e:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    5060:	7803      	ldrb	r3, [r0, #0]
    5062:	2b00      	cmp	r3, #0
    5064:	d0f9      	beq.n	505a <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    5066:	4c0e      	ldr	r4, [pc, #56]	; (50a0 <z_impl_device_get_binding+0x4c>)
    5068:	4e0e      	ldr	r6, [pc, #56]	; (50a4 <z_impl_device_get_binding+0x50>)
    506a:	42b4      	cmp	r4, r6
    506c:	d108      	bne.n	5080 <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
    506e:	4c0c      	ldr	r4, [pc, #48]	; (50a0 <z_impl_device_get_binding+0x4c>)
    5070:	42b4      	cmp	r4, r6
    5072:	d0f2      	beq.n	505a <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    5074:	4620      	mov	r0, r4
    5076:	f002 fb20 	bl	76ba <z_device_is_ready>
    507a:	b950      	cbnz	r0, 5092 <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
    507c:	3418      	adds	r4, #24
    507e:	e7f7      	b.n	5070 <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
    5080:	4620      	mov	r0, r4
    5082:	f002 fb1a 	bl	76ba <z_device_is_ready>
    5086:	b110      	cbz	r0, 508e <z_impl_device_get_binding+0x3a>
    5088:	6823      	ldr	r3, [r4, #0]
    508a:	42ab      	cmp	r3, r5
    508c:	d0e6      	beq.n	505c <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    508e:	3418      	adds	r4, #24
    5090:	e7eb      	b.n	506a <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    5092:	6821      	ldr	r1, [r4, #0]
    5094:	4628      	mov	r0, r5
    5096:	f001 fb06 	bl	66a6 <strcmp>
    509a:	2800      	cmp	r0, #0
    509c:	d1ee      	bne.n	507c <z_impl_device_get_binding+0x28>
    509e:	e7dd      	b.n	505c <z_impl_device_get_binding+0x8>
    50a0:	00007a94 	.word	0x00007a94
    50a4:	00007c2c 	.word	0x00007c2c

000050a8 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    50a8:	b530      	push	{r4, r5, lr}
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
    50aa:	2300      	movs	r3, #0
{
    50ac:	b087      	sub	sp, #28
	z_setup_new_thread(thread, stack,
    50ae:	2201      	movs	r2, #1
    50b0:	e9cd 2304 	strd	r2, r3, [sp, #16]
    50b4:	220f      	movs	r2, #15
    50b6:	e9cd 3202 	strd	r3, r2, [sp, #8]
    50ba:	9301      	str	r3, [sp, #4]
	struct k_thread *thread = &z_idle_threads[i];
    50bc:	4c0c      	ldr	r4, [pc, #48]	; (50f0 <init_idle_thread+0x48>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    50be:	4b0d      	ldr	r3, [pc, #52]	; (50f4 <init_idle_thread+0x4c>)
	z_setup_new_thread(thread, stack,
    50c0:	490d      	ldr	r1, [pc, #52]	; (50f8 <init_idle_thread+0x50>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    50c2:	2218      	movs	r2, #24
	struct k_thread *thread = &z_idle_threads[i];
    50c4:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    50c8:	fb02 3300 	mla	r3, r2, r0, r3
	z_setup_new_thread(thread, stack,
    50cc:	f44f 75b0 	mov.w	r5, #352	; 0x160
    50d0:	9300      	str	r3, [sp, #0]
    50d2:	fb05 1100 	mla	r1, r5, r0, r1
    50d6:	4b09      	ldr	r3, [pc, #36]	; (50fc <init_idle_thread+0x54>)
    50d8:	f44f 72a0 	mov.w	r2, #320	; 0x140
    50dc:	4620      	mov	r0, r4
    50de:	f000 f8a7 	bl	5230 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    50e2:	7b63      	ldrb	r3, [r4, #13]
    50e4:	f023 0304 	bic.w	r3, r3, #4
    50e8:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    50ea:	b007      	add	sp, #28
    50ec:	bd30      	pop	{r4, r5, pc}
    50ee:	bf00      	nop
    50f0:	20000360 	.word	0x20000360
    50f4:	20000740 	.word	0x20000740
    50f8:	20001420 	.word	0x20001420
    50fc:	000053a5 	.word	0x000053a5

00005100 <bg_thread_main>:
{
    5100:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    5102:	4b0a      	ldr	r3, [pc, #40]	; (512c <bg_thread_main+0x2c>)
    5104:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    5106:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    5108:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    510a:	f7ff ff83 	bl	5014 <z_sys_init_run_level>
	boot_banner();
    510e:	f001 f861 	bl	61d4 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    5112:	2003      	movs	r0, #3
    5114:	f7ff ff7e 	bl	5014 <z_sys_init_run_level>
	z_init_static_threads();
    5118:	f000 f8e8 	bl	52ec <z_init_static_threads>
	main();
    511c:	f001 f881 	bl	6222 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    5120:	4a03      	ldr	r2, [pc, #12]	; (5130 <bg_thread_main+0x30>)
    5122:	7b13      	ldrb	r3, [r2, #12]
    5124:	f023 0301 	bic.w	r3, r3, #1
    5128:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    512a:	bd08      	pop	{r3, pc}
    512c:	20000bc5 	.word	0x20000bc5
    5130:	200003e0 	.word	0x200003e0

00005134 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    5134:	4802      	ldr	r0, [pc, #8]	; (5140 <z_bss_zero+0xc>)
    5136:	4a03      	ldr	r2, [pc, #12]	; (5144 <z_bss_zero+0x10>)
    5138:	2100      	movs	r1, #0
    513a:	1a12      	subs	r2, r2, r0
    513c:	f001 baca 	b.w	66d4 <memset>
    5140:	200001b8 	.word	0x200001b8
    5144:	20000bc8 	.word	0x20000bc8

00005148 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    5148:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    514a:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 5210 <z_cstart+0xc8>
    514e:	b0a6      	sub	sp, #152	; 0x98
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    5150:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    5154:	4d2f      	ldr	r5, [pc, #188]	; (5214 <z_cstart+0xcc>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
    5156:	4e30      	ldr	r6, [pc, #192]	; (5218 <z_cstart+0xd0>)
    5158:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    515a:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 521c <z_cstart+0xd4>
    515e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5162:	2400      	movs	r4, #0
    5164:	616b      	str	r3, [r5, #20]
    5166:	23e0      	movs	r3, #224	; 0xe0
    5168:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    516c:	77ec      	strb	r4, [r5, #31]
    516e:	762c      	strb	r4, [r5, #24]
    5170:	766c      	strb	r4, [r5, #25]
    5172:	76ac      	strb	r4, [r5, #26]
    5174:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    5178:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    517a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    517e:	626b      	str	r3, [r5, #36]	; 0x24
    5180:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    5184:	f7fd f9a0 	bl	24c8 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    5188:	f7fc ff5c 	bl	2044 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    518c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5190:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    5192:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    5194:	f7fd fa76 	bl	2684 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    5198:	f7fd f9de 	bl	2558 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    519c:	f240 1301 	movw	r3, #257	; 0x101
    51a0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    51a4:	ab06      	add	r3, sp, #24
    51a6:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    51a8:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
    51ac:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    51ae:	f002 fa83 	bl	76b8 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    51b2:	4620      	mov	r0, r4
    51b4:	f7ff ff2e 	bl	5014 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    51b8:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    51ba:	4d19      	ldr	r5, [pc, #100]	; (5220 <z_cstart+0xd8>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    51bc:	f7ff ff2a 	bl	5014 <z_sys_init_run_level>
	z_sched_init();
    51c0:	f000 fd9e 	bl	5d00 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    51c4:	4b17      	ldr	r3, [pc, #92]	; (5224 <z_cstart+0xdc>)
    51c6:	9305      	str	r3, [sp, #20]
    51c8:	2301      	movs	r3, #1
    51ca:	4917      	ldr	r1, [pc, #92]	; (5228 <z_cstart+0xe0>)
    51cc:	9400      	str	r4, [sp, #0]
    51ce:	e9cd 4303 	strd	r4, r3, [sp, #12]
    51d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    51d6:	464b      	mov	r3, r9
    51d8:	e9cd 4401 	strd	r4, r4, [sp, #4]
    51dc:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
    51de:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    51e0:	f000 f826 	bl	5230 <z_setup_new_thread>
    51e4:	7b6a      	ldrb	r2, [r5, #13]
    51e6:	4607      	mov	r7, r0
    51e8:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    51ec:	4628      	mov	r0, r5
    51ee:	736a      	strb	r2, [r5, #13]
    51f0:	f002 fb19 	bl	7826 <z_ready_thread>
		init_idle_thread(i);
    51f4:	4620      	mov	r0, r4
    51f6:	f7ff ff57 	bl	50a8 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    51fa:	4b0c      	ldr	r3, [pc, #48]	; (522c <z_cstart+0xe4>)
    51fc:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    51fe:	464a      	mov	r2, r9
    5200:	4639      	mov	r1, r7
    5202:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
    5204:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
    5206:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    520a:	f7fd f831 	bl	2270 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    520e:	bf00      	nop
    5210:	20001da0 	.word	0x20001da0
    5214:	e000ed00 	.word	0xe000ed00
    5218:	20000740 	.word	0x20000740
    521c:	00005101 	.word	0x00005101
    5220:	200003e0 	.word	0x200003e0
    5224:	0000828a 	.word	0x0000828a
    5228:	20001000 	.word	0x20001000
    522c:	20000360 	.word	0x20000360

00005230 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    5230:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    5234:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    5236:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    5238:	2604      	movs	r6, #4
    523a:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    523c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    523e:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    5240:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
    5244:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    5246:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    5248:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    524c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    524e:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    5250:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    5254:	3720      	adds	r7, #32
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    5256:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    525a:	e9c0 7619 	strd	r7, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    525e:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    5260:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    5262:	66c5      	str	r5, [r0, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    5264:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    5268:	9202      	str	r2, [sp, #8]
    526a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    526c:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    526e:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    5270:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    5272:	9200      	str	r2, [sp, #0]
    5274:	4642      	mov	r2, r8
{
    5276:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    5278:	f7fc ffc8 	bl	220c <arch_new_thread>
	if (!_current) {
    527c:	4b04      	ldr	r3, [pc, #16]	; (5290 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
    527e:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    5280:	689b      	ldr	r3, [r3, #8]
    5282:	b103      	cbz	r3, 5286 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
    5284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    5286:	6723      	str	r3, [r4, #112]	; 0x70
}
    5288:	4640      	mov	r0, r8
    528a:	b004      	add	sp, #16
    528c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5290:	20000740 	.word	0x20000740

00005294 <z_impl_k_thread_create>:
{
    5294:	b5f0      	push	{r4, r5, r6, r7, lr}
    5296:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    5298:	2700      	movs	r7, #0
    529a:	9705      	str	r7, [sp, #20]
    529c:	9f10      	ldr	r7, [sp, #64]	; 0x40
    529e:	9704      	str	r7, [sp, #16]
    52a0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    52a2:	9703      	str	r7, [sp, #12]
    52a4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    52a6:	9702      	str	r7, [sp, #8]
{
    52a8:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    52ac:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    52ae:	9701      	str	r7, [sp, #4]
    52b0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    52b2:	9700      	str	r7, [sp, #0]
{
    52b4:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    52b6:	f7ff ffbb 	bl	5230 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    52ba:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    52be:	bf08      	it	eq
    52c0:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    52c4:	d005      	beq.n	52d2 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    52c6:	ea55 0306 	orrs.w	r3, r5, r6
    52ca:	d105      	bne.n	52d8 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
    52cc:	4620      	mov	r0, r4
    52ce:	f000 fc11 	bl	5af4 <z_sched_start>
}
    52d2:	4620      	mov	r0, r4
    52d4:	b007      	add	sp, #28
    52d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    52d8:	4903      	ldr	r1, [pc, #12]	; (52e8 <z_impl_k_thread_create+0x54>)
    52da:	4632      	mov	r2, r6
    52dc:	462b      	mov	r3, r5
    52de:	f104 0018 	add.w	r0, r4, #24
    52e2:	f000 fe89 	bl	5ff8 <z_add_timeout>
    52e6:	e7f4      	b.n	52d2 <z_impl_k_thread_create+0x3e>
    52e8:	00007847 	.word	0x00007847

000052ec <z_init_static_threads>:
{
    52ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    52f0:	4c29      	ldr	r4, [pc, #164]	; (5398 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    52f2:	4d2a      	ldr	r5, [pc, #168]	; (539c <z_init_static_threads+0xb0>)
{
    52f4:	b087      	sub	sp, #28
    52f6:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    52f8:	42ae      	cmp	r6, r5
    52fa:	f104 0430 	add.w	r4, r4, #48	; 0x30
    52fe:	d30f      	bcc.n	5320 <z_init_static_threads+0x34>
	k_sched_lock();
    5300:	f000 fb14 	bl	592c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    5304:	4c24      	ldr	r4, [pc, #144]	; (5398 <z_init_static_threads+0xac>)
    5306:	f8df 9098 	ldr.w	r9, [pc, #152]	; 53a0 <z_init_static_threads+0xb4>
    530a:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    530e:	f240 37e7 	movw	r7, #999	; 0x3e7
    5312:	42ac      	cmp	r4, r5
    5314:	d320      	bcc.n	5358 <z_init_static_threads+0x6c>
}
    5316:	b007      	add	sp, #28
    5318:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    531c:	f000 bcd4 	b.w	5cc8 <k_sched_unlock>
		z_setup_new_thread(
    5320:	f854 3c04 	ldr.w	r3, [r4, #-4]
    5324:	9305      	str	r3, [sp, #20]
    5326:	f854 3c10 	ldr.w	r3, [r4, #-16]
    532a:	9304      	str	r3, [sp, #16]
    532c:	f854 3c14 	ldr.w	r3, [r4, #-20]
    5330:	9303      	str	r3, [sp, #12]
    5332:	f854 3c18 	ldr.w	r3, [r4, #-24]
    5336:	9302      	str	r3, [sp, #8]
    5338:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    533c:	9301      	str	r3, [sp, #4]
    533e:	f854 3c20 	ldr.w	r3, [r4, #-32]
    5342:	9300      	str	r3, [sp, #0]
    5344:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    5348:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    534c:	f7ff ff70 	bl	5230 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    5350:	f854 3c30 	ldr.w	r3, [r4, #-48]
    5354:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    5356:	e7ce      	b.n	52f6 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    5358:	6a63      	ldr	r3, [r4, #36]	; 0x24
    535a:	1c5a      	adds	r2, r3, #1
    535c:	d00d      	beq.n	537a <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
    535e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    5362:	2100      	movs	r1, #0
    5364:	4638      	mov	r0, r7
    5366:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    536a:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    536e:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    5372:	d104      	bne.n	537e <z_init_static_threads+0x92>
	z_sched_start(thread);
    5374:	4640      	mov	r0, r8
    5376:	f000 fbbd 	bl	5af4 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    537a:	3430      	adds	r4, #48	; 0x30
    537c:	e7c9      	b.n	5312 <z_init_static_threads+0x26>
    537e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5382:	2300      	movs	r3, #0
    5384:	f7fb faca 	bl	91c <__aeabi_uldivmod>
    5388:	4602      	mov	r2, r0
    538a:	460b      	mov	r3, r1
    538c:	f108 0018 	add.w	r0, r8, #24
    5390:	4649      	mov	r1, r9
    5392:	f000 fe31 	bl	5ff8 <z_add_timeout>
    5396:	e7f0      	b.n	537a <z_init_static_threads+0x8e>
    5398:	20000184 	.word	0x20000184
    539c:	200001b4 	.word	0x200001b4
    53a0:	00007847 	.word	0x00007847

000053a4 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    53a4:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    53a6:	4c0b      	ldr	r4, [pc, #44]	; (53d4 <idle+0x30>)
	return !z_sys_post_kernel;
    53a8:	4d0b      	ldr	r5, [pc, #44]	; (53d8 <idle+0x34>)
	__asm__ volatile(
    53aa:	f04f 0220 	mov.w	r2, #32
    53ae:	f3ef 8311 	mrs	r3, BASEPRI
    53b2:	f382 8812 	msr	BASEPRI_MAX, r2
    53b6:	f3bf 8f6f 	isb	sy
    53ba:	f002 fadb 	bl	7974 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    53be:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    53c0:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    53c2:	b913      	cbnz	r3, 53ca <idle+0x26>
	arch_cpu_idle();
    53c4:	f7fc fe44 	bl	2050 <arch_cpu_idle>
}
    53c8:	e7ef      	b.n	53aa <idle+0x6>
    53ca:	f7fc fd63 	bl	1e94 <pm_system_suspend>
    53ce:	2800      	cmp	r0, #0
    53d0:	d1eb      	bne.n	53aa <idle+0x6>
    53d2:	e7f7      	b.n	53c4 <idle+0x20>
    53d4:	20000740 	.word	0x20000740
    53d8:	20000bc5 	.word	0x20000bc5

000053dc <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    53dc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    53e0:	4604      	mov	r4, r0
    53e2:	4617      	mov	r7, r2
    53e4:	461e      	mov	r6, r3
    53e6:	f04f 0320 	mov.w	r3, #32
    53ea:	f3ef 8811 	mrs	r8, BASEPRI
    53ee:	f383 8812 	msr	BASEPRI_MAX, r3
    53f2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    53f6:	68c3      	ldr	r3, [r0, #12]
    53f8:	4a32      	ldr	r2, [pc, #200]	; (54c4 <z_impl_k_mutex_lock+0xe8>)
    53fa:	b16b      	cbz	r3, 5418 <z_impl_k_mutex_lock+0x3c>
    53fc:	6880      	ldr	r0, [r0, #8]
    53fe:	6891      	ldr	r1, [r2, #8]
    5400:	4288      	cmp	r0, r1
    5402:	d019      	beq.n	5438 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    5404:	ea57 0306 	orrs.w	r3, r7, r6
    5408:	d118      	bne.n	543c <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    540a:	f388 8811 	msr	BASEPRI, r8
    540e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    5412:	f06f 000f 	mvn.w	r0, #15
    5416:	e00c      	b.n	5432 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
    5418:	6891      	ldr	r1, [r2, #8]
    541a:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    541e:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    5420:	3301      	adds	r3, #1
    5422:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    5424:	6893      	ldr	r3, [r2, #8]
    5426:	60a3      	str	r3, [r4, #8]
    5428:	f388 8811 	msr	BASEPRI, r8
    542c:	f3bf 8f6f 	isb	sy
		return 0;
    5430:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    5432:	b002      	add	sp, #8
    5434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    5438:	6921      	ldr	r1, [r4, #16]
    543a:	e7f0      	b.n	541e <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    543c:	f991 100e 	ldrsb.w	r1, [r1, #14]
    5440:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
    5444:	4299      	cmp	r1, r3
    5446:	bfa8      	it	ge
    5448:	4619      	movge	r1, r3
    544a:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    544e:	4291      	cmp	r1, r2
    5450:	bfb8      	it	lt
    5452:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    5454:	428b      	cmp	r3, r1
    5456:	dd2e      	ble.n	54b6 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    5458:	f002 f972 	bl	7740 <adjust_owner_prio.isra.0>
    545c:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    545e:	e9cd 7600 	strd	r7, r6, [sp]
    5462:	4819      	ldr	r0, [pc, #100]	; (54c8 <z_impl_k_mutex_lock+0xec>)
    5464:	4622      	mov	r2, r4
    5466:	4641      	mov	r1, r8
    5468:	f000 fba0 	bl	5bac <z_pend_curr>
	if (got_mutex == 0) {
    546c:	2800      	cmp	r0, #0
    546e:	d0e0      	beq.n	5432 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
    5470:	f04f 0320 	mov.w	r3, #32
    5474:	f3ef 8611 	mrs	r6, BASEPRI
    5478:	f383 8812 	msr	BASEPRI_MAX, r3
    547c:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    5480:	6823      	ldr	r3, [r4, #0]
    5482:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5484:	429c      	cmp	r4, r3
    5486:	d00a      	beq.n	549e <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    5488:	b14b      	cbz	r3, 549e <z_impl_k_mutex_lock+0xc2>
    548a:	f993 300e 	ldrsb.w	r3, [r3, #14]
    548e:	4299      	cmp	r1, r3
    5490:	bfa8      	it	ge
    5492:	4619      	movge	r1, r3
    5494:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    5498:	4299      	cmp	r1, r3
    549a:	bfb8      	it	lt
    549c:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    549e:	68a0      	ldr	r0, [r4, #8]
    54a0:	f002 f94e 	bl	7740 <adjust_owner_prio.isra.0>
    54a4:	b900      	cbnz	r0, 54a8 <z_impl_k_mutex_lock+0xcc>
	if (resched) {
    54a6:	b145      	cbz	r5, 54ba <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    54a8:	4807      	ldr	r0, [pc, #28]	; (54c8 <z_impl_k_mutex_lock+0xec>)
    54aa:	4631      	mov	r1, r6
    54ac:	f000 fa2c 	bl	5908 <z_reschedule>
	return -EAGAIN;
    54b0:	f06f 000a 	mvn.w	r0, #10
    54b4:	e7bd      	b.n	5432 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
    54b6:	2500      	movs	r5, #0
    54b8:	e7d1      	b.n	545e <z_impl_k_mutex_lock+0x82>
	__asm__ volatile(
    54ba:	f386 8811 	msr	BASEPRI, r6
    54be:	f3bf 8f6f 	isb	sy
    54c2:	e7f5      	b.n	54b0 <z_impl_k_mutex_lock+0xd4>
    54c4:	20000740 	.word	0x20000740
    54c8:	20000bc6 	.word	0x20000bc6

000054cc <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    54cc:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    54ce:	6883      	ldr	r3, [r0, #8]
{
    54d0:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    54d2:	2b00      	cmp	r3, #0
    54d4:	d032      	beq.n	553c <z_impl_k_mutex_unlock+0x70>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    54d6:	4a1c      	ldr	r2, [pc, #112]	; (5548 <z_impl_k_mutex_unlock+0x7c>)
    54d8:	6892      	ldr	r2, [r2, #8]
    54da:	4293      	cmp	r3, r2
    54dc:	d131      	bne.n	5542 <z_impl_k_mutex_unlock+0x76>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    54de:	7bda      	ldrb	r2, [r3, #15]
    54e0:	3a01      	subs	r2, #1
    54e2:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    54e4:	68c3      	ldr	r3, [r0, #12]
    54e6:	2b01      	cmp	r3, #1
    54e8:	d905      	bls.n	54f6 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    54ea:	3b01      	subs	r3, #1
    54ec:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    54ee:	f000 fbeb 	bl	5cc8 <k_sched_unlock>

	return 0;
    54f2:	2000      	movs	r0, #0
}
    54f4:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    54f6:	f04f 0320 	mov.w	r3, #32
    54fa:	f3ef 8511 	mrs	r5, BASEPRI
    54fe:	f383 8812 	msr	BASEPRI_MAX, r3
    5502:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    5506:	6901      	ldr	r1, [r0, #16]
    5508:	6880      	ldr	r0, [r0, #8]
    550a:	f002 f919 	bl	7740 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    550e:	4620      	mov	r0, r4
    5510:	f002 f9e5 	bl	78de <z_unpend_first_thread>
	mutex->owner = new_owner;
    5514:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    5516:	b158      	cbz	r0, 5530 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
    5518:	f990 200e 	ldrsb.w	r2, [r0, #14]
    551c:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    551e:	2200      	movs	r2, #0
    5520:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    5522:	f002 f980 	bl	7826 <z_ready_thread>
		z_reschedule(&lock, key);
    5526:	4809      	ldr	r0, [pc, #36]	; (554c <z_impl_k_mutex_unlock+0x80>)
    5528:	4629      	mov	r1, r5
    552a:	f000 f9ed 	bl	5908 <z_reschedule>
    552e:	e7de      	b.n	54ee <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    5530:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    5532:	f385 8811 	msr	BASEPRI, r5
    5536:	f3bf 8f6f 	isb	sy
    553a:	e7d8      	b.n	54ee <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    553c:	f06f 0015 	mvn.w	r0, #21
    5540:	e7d8      	b.n	54f4 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
    5542:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5546:	e7d5      	b.n	54f4 <z_impl_k_mutex_unlock+0x28>
    5548:	20000740 	.word	0x20000740
    554c:	20000bc6 	.word	0x20000bc6

00005550 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    5550:	b538      	push	{r3, r4, r5, lr}
    5552:	4604      	mov	r4, r0
	__asm__ volatile(
    5554:	f04f 0320 	mov.w	r3, #32
    5558:	f3ef 8511 	mrs	r5, BASEPRI
    555c:	f383 8812 	msr	BASEPRI_MAX, r3
    5560:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    5564:	f002 f9bb 	bl	78de <z_unpend_first_thread>

	if (thread != NULL) {
    5568:	b148      	cbz	r0, 557e <z_impl_k_sem_give+0x2e>
    556a:	2200      	movs	r2, #0
    556c:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    556e:	f002 f95a 	bl	7826 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    5572:	4629      	mov	r1, r5
    5574:	4805      	ldr	r0, [pc, #20]	; (558c <z_impl_k_sem_give+0x3c>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    5576:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    557a:	f000 b9c5 	b.w	5908 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    557e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    5582:	429a      	cmp	r2, r3
    5584:	bf18      	it	ne
    5586:	3301      	addne	r3, #1
    5588:	60a3      	str	r3, [r4, #8]
}
    558a:	e7f2      	b.n	5572 <z_impl_k_sem_give+0x22>
    558c:	20000bc6 	.word	0x20000bc6

00005590 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    5590:	b513      	push	{r0, r1, r4, lr}
    5592:	f04f 0420 	mov.w	r4, #32
    5596:	f3ef 8111 	mrs	r1, BASEPRI
    559a:	f384 8812 	msr	BASEPRI_MAX, r4
    559e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    55a2:	6884      	ldr	r4, [r0, #8]
    55a4:	b144      	cbz	r4, 55b8 <z_impl_k_sem_take+0x28>
		sem->count--;
    55a6:	3c01      	subs	r4, #1
    55a8:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    55aa:	f381 8811 	msr	BASEPRI, r1
    55ae:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    55b2:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    55b4:	b002      	add	sp, #8
    55b6:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    55b8:	ea52 0403 	orrs.w	r4, r2, r3
    55bc:	d106      	bne.n	55cc <z_impl_k_sem_take+0x3c>
    55be:	f381 8811 	msr	BASEPRI, r1
    55c2:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    55c6:	f06f 000f 	mvn.w	r0, #15
    55ca:	e7f3      	b.n	55b4 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    55cc:	e9cd 2300 	strd	r2, r3, [sp]
    55d0:	4602      	mov	r2, r0
    55d2:	4802      	ldr	r0, [pc, #8]	; (55dc <z_impl_k_sem_take+0x4c>)
    55d4:	f000 faea 	bl	5bac <z_pend_curr>
	return ret;
    55d8:	e7ec      	b.n	55b4 <z_impl_k_sem_take+0x24>
    55da:	bf00      	nop
    55dc:	20000bc6 	.word	0x20000bc6

000055e0 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    55e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
    55e4:	4e47      	ldr	r6, [pc, #284]	; (5704 <work_queue_main+0x124>)
    55e6:	b085      	sub	sp, #20
    55e8:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
    55ea:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    55ee:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	__asm__ volatile(
    55f2:	f04f 0320 	mov.w	r3, #32
    55f6:	f3ef 8711 	mrs	r7, BASEPRI
    55fa:	f383 8812 	msr	BASEPRI_MAX, r3
    55fe:	f3bf 8f6f 	isb	sy
    5602:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    5606:	b98d      	cbnz	r5, 562c <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
    5608:	2102      	movs	r1, #2
    560a:	f104 0098 	add.w	r0, r4, #152	; 0x98
    560e:	f002 f89f 	bl	7750 <flag_test_and_clear>
    5612:	2800      	cmp	r0, #0
    5614:	d135      	bne.n	5682 <work_queue_main+0xa2>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
    5616:	2300      	movs	r3, #0
    5618:	e9cd 8900 	strd	r8, r9, [sp]
    561c:	9302      	str	r3, [sp, #8]
    561e:	f104 0288 	add.w	r2, r4, #136	; 0x88
    5622:	4639      	mov	r1, r7
    5624:	4838      	ldr	r0, [pc, #224]	; (5708 <work_queue_main+0x128>)
    5626:	f000 fc71 	bl	5f0c <z_sched_wait>
			continue;
    562a:	e7e2      	b.n	55f2 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    562c:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
    5630:	682b      	ldr	r3, [r5, #0]
	list->head = node;
    5632:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    5636:	4295      	cmp	r5, r2
    5638:	d101      	bne.n	563e <work_queue_main+0x5e>
	list->tail = node;
    563a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
    563e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    5642:	f043 0302 	orr.w	r3, r3, #2
    5646:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
    564a:	68eb      	ldr	r3, [r5, #12]
    564c:	f023 0304 	bic.w	r3, r3, #4
    5650:	f043 0301 	orr.w	r3, r3, #1
    5654:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
    5656:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
    5658:	f387 8811 	msr	BASEPRI, r7
    565c:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
    5660:	4628      	mov	r0, r5
    5662:	4798      	blx	r3
	__asm__ volatile(
    5664:	f04f 0320 	mov.w	r3, #32
    5668:	f3ef 8b11 	mrs	fp, BASEPRI
    566c:	f383 8812 	msr	BASEPRI_MAX, r3
    5670:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
    5674:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    5676:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
    5678:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    567c:	d40b      	bmi.n	5696 <work_queue_main+0xb6>
	*flagp &= ~BIT(bit);
    567e:	60ea      	str	r2, [r5, #12]
    5680:	e00e      	b.n	56a0 <work_queue_main+0xc0>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    5682:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    5686:	2200      	movs	r2, #0
    5688:	2101      	movs	r1, #1
    568a:	4628      	mov	r0, r5
    568c:	f002 f93f 	bl	790e <z_sched_wake>
    5690:	2800      	cmp	r0, #0
    5692:	d1f8      	bne.n	5686 <work_queue_main+0xa6>
    5694:	e7bf      	b.n	5616 <work_queue_main+0x36>
	return list->head;
    5696:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
    5698:	f023 0303 	bic.w	r3, r3, #3
    569c:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    569e:	b970      	cbnz	r0, 56be <work_queue_main+0xde>
	*flagp &= ~BIT(bit);
    56a0:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    56a4:	f023 0302 	bic.w	r3, r3, #2
    56a8:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
    56ac:	f38b 8811 	msr	BASEPRI, fp
    56b0:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
    56b4:	05d8      	lsls	r0, r3, #23
    56b6:	d49c      	bmi.n	55f2 <work_queue_main+0x12>
	z_impl_k_yield();
    56b8:	f000 fb2e 	bl	5d18 <z_impl_k_yield>
}
    56bc:	e799      	b.n	55f2 <work_queue_main+0x12>
	return node->next;
    56be:	2700      	movs	r7, #0
    56c0:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
    56c4:	463b      	mov	r3, r7
		if (wc->work == work) {
    56c6:	6842      	ldr	r2, [r0, #4]
    56c8:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
    56ca:	4601      	mov	r1, r0
		if (wc->work == work) {
    56cc:	d10c      	bne.n	56e8 <work_queue_main+0x108>
	return node->next;
    56ce:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    56d0:	b997      	cbnz	r7, 56f8 <work_queue_main+0x118>
    56d2:	6872      	ldr	r2, [r6, #4]
	list->head = node;
    56d4:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
    56d6:	4282      	cmp	r2, r0
    56d8:	d100      	bne.n	56dc <work_queue_main+0xfc>
	list->tail = node;
    56da:	6071      	str	r1, [r6, #4]
	parent->next = child;
    56dc:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
    56e0:	f7ff ff36 	bl	5550 <z_impl_k_sem_give>
}
    56e4:	4639      	mov	r1, r7
    56e6:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    56e8:	f1ba 0f00 	cmp.w	sl, #0
    56ec:	d0d8      	beq.n	56a0 <work_queue_main+0xc0>
	return node->next;
    56ee:	4650      	mov	r0, sl
    56f0:	460f      	mov	r7, r1
    56f2:	f8da a000 	ldr.w	sl, [sl]
    56f6:	e7e6      	b.n	56c6 <work_queue_main+0xe6>
	return list->tail;
    56f8:	6872      	ldr	r2, [r6, #4]
	parent->next = child;
    56fa:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
    56fc:	4290      	cmp	r0, r2
	list->tail = node;
    56fe:	bf08      	it	eq
    5700:	6077      	streq	r7, [r6, #4]
}
    5702:	e7eb      	b.n	56dc <work_queue_main+0xfc>
    5704:	20000768 	.word	0x20000768
    5708:	20000bc6 	.word	0x20000bc6

0000570c <submit_to_queue_locked>:
{
    570c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
    570e:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    5710:	079a      	lsls	r2, r3, #30
{
    5712:	4604      	mov	r4, r0
    5714:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    5716:	f3c3 0540 	ubfx	r5, r3, #1, #1
    571a:	d41f      	bmi.n	575c <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    571c:	075f      	lsls	r7, r3, #29
    571e:	d41f      	bmi.n	5760 <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
    5720:	680a      	ldr	r2, [r1, #0]
    5722:	b90a      	cbnz	r2, 5728 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
    5724:	6882      	ldr	r2, [r0, #8]
    5726:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    5728:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
    572a:	bf44      	itt	mi
    572c:	68a3      	ldrmi	r3, [r4, #8]
    572e:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
    5730:	6837      	ldr	r7, [r6, #0]
			ret = 2;
    5732:	bf4c      	ite	mi
    5734:	2502      	movmi	r5, #2
		ret = 1;
    5736:	2501      	movpl	r5, #1
	if (queue == NULL) {
    5738:	b37f      	cbz	r7, 579a <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    573a:	4b1b      	ldr	r3, [pc, #108]	; (57a8 <submit_to_queue_locked+0x9c>)
    573c:	689b      	ldr	r3, [r3, #8]
    573e:	42bb      	cmp	r3, r7
    5740:	d111      	bne.n	5766 <submit_to_queue_locked+0x5a>
    5742:	f001 ffeb 	bl	771c <k_is_in_isr>
    5746:	f080 0001 	eor.w	r0, r0, #1
    574a:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
    574c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    5750:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    5752:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    5756:	d523      	bpl.n	57a0 <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
    5758:	b13a      	cbz	r2, 576a <submit_to_queue_locked+0x5e>
    575a:	b940      	cbnz	r0, 576e <submit_to_queue_locked+0x62>
		ret = -EBUSY;
    575c:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
    5760:	2300      	movs	r3, #0
    5762:	6033      	str	r3, [r6, #0]
	return ret;
    5764:	e013      	b.n	578e <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    5766:	2000      	movs	r0, #0
    5768:	e7f0      	b.n	574c <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
    576a:	071b      	lsls	r3, r3, #28
    576c:	d4f6      	bmi.n	575c <submit_to_queue_locked+0x50>
	parent->next = child;
    576e:	2300      	movs	r3, #0
    5770:	6023      	str	r3, [r4, #0]
	return list->tail;
    5772:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
    5776:	b963      	cbnz	r3, 5792 <submit_to_queue_locked+0x86>
	list->head = node;
    5778:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
    577c:	4638      	mov	r0, r7
    577e:	f001 fff2 	bl	7766 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
    5782:	68e3      	ldr	r3, [r4, #12]
    5784:	f043 0304 	orr.w	r3, r3, #4
    5788:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
    578a:	6833      	ldr	r3, [r6, #0]
    578c:	60a3      	str	r3, [r4, #8]
}
    578e:	4628      	mov	r0, r5
    5790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    5792:	601c      	str	r4, [r3, #0]
	list->tail = node;
    5794:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
    5798:	e7f0      	b.n	577c <submit_to_queue_locked+0x70>
		return -EINVAL;
    579a:	f06f 0515 	mvn.w	r5, #21
    579e:	e7df      	b.n	5760 <submit_to_queue_locked+0x54>
		ret = -ENODEV;
    57a0:	f06f 0512 	mvn.w	r5, #18
    57a4:	e7dc      	b.n	5760 <submit_to_queue_locked+0x54>
    57a6:	bf00      	nop
    57a8:	20000740 	.word	0x20000740

000057ac <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    57ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    57ae:	b089      	sub	sp, #36	; 0x24
    57b0:	4604      	mov	r4, r0
	list->head = NULL;
    57b2:	2000      	movs	r0, #0
	list->tail = NULL;
    57b4:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
    57b8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    57ba:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
    57be:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
    57c2:	f104 0090 	add.w	r0, r4, #144	; 0x90
    57c6:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    57ca:	b31d      	cbz	r5, 5814 <k_work_queue_start+0x68>
    57cc:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
    57ce:	2800      	cmp	r0, #0
    57d0:	f240 1001 	movw	r0, #257	; 0x101
    57d4:	bf08      	it	eq
    57d6:	2001      	moveq	r0, #1
	*flagp = flags;
    57d8:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    57dc:	2000      	movs	r0, #0
    57de:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    57e2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    57e6:	e9cd 3003 	strd	r3, r0, [sp, #12]
    57ea:	e9cd 0001 	strd	r0, r0, [sp, #4]
    57ee:	e9cd 6706 	strd	r6, r7, [sp, #24]
    57f2:	4b09      	ldr	r3, [pc, #36]	; (5818 <k_work_queue_start+0x6c>)
    57f4:	9400      	str	r4, [sp, #0]
    57f6:	4620      	mov	r0, r4
    57f8:	f7ff fd4c 	bl	5294 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    57fc:	b125      	cbz	r5, 5808 <k_work_queue_start+0x5c>
    57fe:	6829      	ldr	r1, [r5, #0]
    5800:	b111      	cbz	r1, 5808 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
    5802:	4620      	mov	r0, r4
    5804:	f001 ff90 	bl	7728 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    5808:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    580a:	b009      	add	sp, #36	; 0x24
    580c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    5810:	f001 bf8d 	b.w	772e <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    5814:	2001      	movs	r0, #1
    5816:	e7df      	b.n	57d8 <k_work_queue_start+0x2c>
    5818:	000055e1 	.word	0x000055e1

0000581c <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
    581c:	b513      	push	{r0, r1, r4, lr}
    581e:	9001      	str	r0, [sp, #4]
    5820:	4608      	mov	r0, r1
	__asm__ volatile(
    5822:	f04f 0120 	mov.w	r1, #32
    5826:	f3ef 8411 	mrs	r4, BASEPRI
    582a:	f381 8812 	msr	BASEPRI_MAX, r1
    582e:	f3bf 8f6f 	isb	sy
	return *flagp;
    5832:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
    5834:	f011 0f0e 	tst.w	r1, #14
    5838:	d116      	bne.n	5868 <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    583a:	ea53 0c02 	orrs.w	ip, r3, r2
    583e:	d108      	bne.n	5852 <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
    5840:	a901      	add	r1, sp, #4
    5842:	f7ff ff63 	bl	570c <submit_to_queue_locked>
	__asm__ volatile(
    5846:	f384 8811 	msr	BASEPRI, r4
    584a:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
    584e:	b002      	add	sp, #8
    5850:	bd10      	pop	{r4, pc}
	*flagp |= BIT(bit);
    5852:	f041 0108 	orr.w	r1, r1, #8
    5856:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
    5858:	9901      	ldr	r1, [sp, #4]
    585a:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
    585c:	3010      	adds	r0, #16
    585e:	4903      	ldr	r1, [pc, #12]	; (586c <k_work_schedule_for_queue+0x50>)
    5860:	f000 fbca 	bl	5ff8 <z_add_timeout>
	return ret;
    5864:	2001      	movs	r0, #1
    5866:	e7ee      	b.n	5846 <k_work_schedule_for_queue+0x2a>
	int ret = 0;
    5868:	2000      	movs	r0, #0
    586a:	e7ec      	b.n	5846 <k_work_schedule_for_queue+0x2a>
    586c:	00007775 	.word	0x00007775

00005870 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
    5870:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
    5872:	4801      	ldr	r0, [pc, #4]	; (5878 <k_work_schedule+0x8>)
    5874:	f7ff bfd2 	b.w	581c <k_work_schedule_for_queue>
    5878:	20000468 	.word	0x20000468

0000587c <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    587c:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    587e:	4c08      	ldr	r4, [pc, #32]	; (58a0 <z_reset_time_slice+0x24>)
    5880:	6823      	ldr	r3, [r4, #0]
    5882:	b15b      	cbz	r3, 589c <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    5884:	f7fe fa78 	bl	3d78 <sys_clock_elapsed>
    5888:	4603      	mov	r3, r0
    588a:	6820      	ldr	r0, [r4, #0]
    588c:	4a05      	ldr	r2, [pc, #20]	; (58a4 <z_reset_time_slice+0x28>)
    588e:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
    5890:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    5894:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    5896:	2100      	movs	r1, #0
    5898:	f002 b87c 	b.w	7994 <z_set_timeout_expiry>
}
    589c:	bd10      	pop	{r4, pc}
    589e:	bf00      	nop
    58a0:	20000778 	.word	0x20000778
    58a4:	20000740 	.word	0x20000740

000058a8 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    58a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    58aa:	4604      	mov	r4, r0
    58ac:	460d      	mov	r5, r1
	__asm__ volatile(
    58ae:	f04f 0320 	mov.w	r3, #32
    58b2:	f3ef 8611 	mrs	r6, BASEPRI
    58b6:	f383 8812 	msr	BASEPRI_MAX, r3
    58ba:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    58be:	4b0f      	ldr	r3, [pc, #60]	; (58fc <k_sched_time_slice_set+0x54>)
    58c0:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
    58c2:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    58c6:	f240 30e7 	movw	r0, #999	; 0x3e7
    58ca:	6119      	str	r1, [r3, #16]
    58cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    58d0:	2300      	movs	r3, #0
    58d2:	fbe4 0107 	umlal	r0, r1, r4, r7
    58d6:	f7fb f821 	bl	91c <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    58da:	2c00      	cmp	r4, #0
    58dc:	4b08      	ldr	r3, [pc, #32]	; (5900 <k_sched_time_slice_set+0x58>)
    58de:	dc09      	bgt.n	58f4 <k_sched_time_slice_set+0x4c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
    58e0:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    58e2:	4b08      	ldr	r3, [pc, #32]	; (5904 <k_sched_time_slice_set+0x5c>)
    58e4:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    58e6:	f7ff ffc9 	bl	587c <z_reset_time_slice>
	__asm__ volatile(
    58ea:	f386 8811 	msr	BASEPRI, r6
    58ee:	f3bf 8f6f 	isb	sy
	}
}
    58f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
    58f4:	2802      	cmp	r0, #2
    58f6:	bfb8      	it	lt
    58f8:	2002      	movlt	r0, #2
    58fa:	e7f1      	b.n	58e0 <k_sched_time_slice_set+0x38>
    58fc:	20000740 	.word	0x20000740
    5900:	20000778 	.word	0x20000778
    5904:	20000774 	.word	0x20000774

00005908 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    5908:	b949      	cbnz	r1, 591e <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    590a:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
    590e:	b930      	cbnz	r0, 591e <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    5910:	4b05      	ldr	r3, [pc, #20]	; (5928 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    5912:	69da      	ldr	r2, [r3, #28]
    5914:	689b      	ldr	r3, [r3, #8]
    5916:	429a      	cmp	r2, r3
    5918:	d001      	beq.n	591e <z_reschedule+0x16>
	ret = arch_swap(key);
    591a:	f7fc bc23 	b.w	2164 <arch_swap>
    591e:	f381 8811 	msr	BASEPRI, r1
    5922:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    5926:	4770      	bx	lr
    5928:	20000740 	.word	0x20000740

0000592c <k_sched_lock>:
	__asm__ volatile(
    592c:	f04f 0320 	mov.w	r3, #32
    5930:	f3ef 8111 	mrs	r1, BASEPRI
    5934:	f383 8812 	msr	BASEPRI_MAX, r3
    5938:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
    593c:	4b04      	ldr	r3, [pc, #16]	; (5950 <k_sched_lock+0x24>)
    593e:	689a      	ldr	r2, [r3, #8]
    5940:	7bd3      	ldrb	r3, [r2, #15]
    5942:	3b01      	subs	r3, #1
    5944:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    5946:	f381 8811 	msr	BASEPRI, r1
    594a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    594e:	4770      	bx	lr
    5950:	20000740 	.word	0x20000740

00005954 <update_cache>:
{
    5954:	b538      	push	{r3, r4, r5, lr}
    5956:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
    5958:	480c      	ldr	r0, [pc, #48]	; (598c <update_cache+0x38>)
    595a:	4d0d      	ldr	r5, [pc, #52]	; (5990 <update_cache+0x3c>)
    595c:	f001 ff5d 	bl	781a <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    5960:	4604      	mov	r4, r0
    5962:	b900      	cbnz	r0, 5966 <update_cache+0x12>
    5964:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    5966:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    5968:	b94a      	cbnz	r2, 597e <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
    596a:	7b5a      	ldrb	r2, [r3, #13]
    596c:	06d2      	lsls	r2, r2, #27
    596e:	d106      	bne.n	597e <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    5970:	69a2      	ldr	r2, [r4, #24]
    5972:	b922      	cbnz	r2, 597e <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
    5974:	89da      	ldrh	r2, [r3, #14]
    5976:	2a7f      	cmp	r2, #127	; 0x7f
    5978:	d901      	bls.n	597e <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
    597a:	61eb      	str	r3, [r5, #28]
}
    597c:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    597e:	429c      	cmp	r4, r3
    5980:	d001      	beq.n	5986 <update_cache+0x32>
			z_reset_time_slice();
    5982:	f7ff ff7b 	bl	587c <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    5986:	61ec      	str	r4, [r5, #28]
}
    5988:	e7f8      	b.n	597c <update_cache+0x28>
    598a:	bf00      	nop
    598c:	20000760 	.word	0x20000760
    5990:	20000740 	.word	0x20000740

00005994 <move_thread_to_end_of_prio_q>:
{
    5994:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    5996:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    599a:	7b43      	ldrb	r3, [r0, #13]
    599c:	2a00      	cmp	r2, #0
{
    599e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    59a0:	da04      	bge.n	59ac <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    59a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    59a6:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    59a8:	f001 ff0f 	bl	77ca <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    59ac:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    59ae:	4a15      	ldr	r2, [pc, #84]	; (5a04 <move_thread_to_end_of_prio_q+0x70>)
    59b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    59b4:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    59b6:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    59ba:	f102 0520 	add.w	r5, r2, #32
    59be:	42ab      	cmp	r3, r5
    59c0:	d01b      	beq.n	59fa <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    59c2:	b1d3      	cbz	r3, 59fa <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
    59c4:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    59c8:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    59cc:	4286      	cmp	r6, r0
    59ce:	d00f      	beq.n	59f0 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
    59d0:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    59d2:	2800      	cmp	r0, #0
    59d4:	dd0c      	ble.n	59f0 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    59d6:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    59d8:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    59dc:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    59de:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    59e0:	6890      	ldr	r0, [r2, #8]
    59e2:	1a43      	subs	r3, r0, r1
    59e4:	4258      	negs	r0, r3
}
    59e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    59ea:	4158      	adcs	r0, r3
    59ec:	f7ff bfb2 	b.w	5954 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    59f0:	42a3      	cmp	r3, r4
    59f2:	d002      	beq.n	59fa <move_thread_to_end_of_prio_q+0x66>
    59f4:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    59f6:	2b00      	cmp	r3, #0
    59f8:	d1e6      	bne.n	59c8 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
    59fa:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
    59fe:	6021      	str	r1, [r4, #0]
	list->tail = node;
    5a00:	6251      	str	r1, [r2, #36]	; 0x24
}
    5a02:	e7ed      	b.n	59e0 <move_thread_to_end_of_prio_q+0x4c>
    5a04:	20000740 	.word	0x20000740

00005a08 <z_time_slice>:
{
    5a08:	b538      	push	{r3, r4, r5, lr}
    5a0a:	4601      	mov	r1, r0
	__asm__ volatile(
    5a0c:	f04f 0320 	mov.w	r3, #32
    5a10:	f3ef 8411 	mrs	r4, BASEPRI
    5a14:	f383 8812 	msr	BASEPRI_MAX, r3
    5a18:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    5a1c:	4b15      	ldr	r3, [pc, #84]	; (5a74 <z_time_slice+0x6c>)
    5a1e:	4a16      	ldr	r2, [pc, #88]	; (5a78 <z_time_slice+0x70>)
    5a20:	6898      	ldr	r0, [r3, #8]
    5a22:	6815      	ldr	r5, [r2, #0]
    5a24:	42a8      	cmp	r0, r5
    5a26:	d106      	bne.n	5a36 <z_time_slice+0x2e>
			z_reset_time_slice();
    5a28:	f7ff ff28 	bl	587c <z_reset_time_slice>
	__asm__ volatile(
    5a2c:	f384 8811 	msr	BASEPRI, r4
    5a30:	f3bf 8f6f 	isb	sy
}
    5a34:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    5a36:	2500      	movs	r5, #0
    5a38:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
    5a3a:	4a10      	ldr	r2, [pc, #64]	; (5a7c <z_time_slice+0x74>)
    5a3c:	6812      	ldr	r2, [r2, #0]
    5a3e:	b1ba      	cbz	r2, 5a70 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
    5a40:	89c2      	ldrh	r2, [r0, #14]
    5a42:	2a7f      	cmp	r2, #127	; 0x7f
    5a44:	d814      	bhi.n	5a70 <z_time_slice+0x68>
		&& !z_is_thread_prevented_from_running(thread)
    5a46:	7b42      	ldrb	r2, [r0, #13]
    5a48:	06d2      	lsls	r2, r2, #27
    5a4a:	d111      	bne.n	5a70 <z_time_slice+0x68>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    5a4c:	4a0c      	ldr	r2, [pc, #48]	; (5a80 <z_time_slice+0x78>)
    5a4e:	f990 500e 	ldrsb.w	r5, [r0, #14]
    5a52:	6812      	ldr	r2, [r2, #0]
    5a54:	4295      	cmp	r5, r2
    5a56:	db0b      	blt.n	5a70 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
    5a58:	4a0a      	ldr	r2, [pc, #40]	; (5a84 <z_time_slice+0x7c>)
    5a5a:	4290      	cmp	r0, r2
    5a5c:	d008      	beq.n	5a70 <z_time_slice+0x68>
		if (ticks >= _current_cpu->slice_ticks) {
    5a5e:	691a      	ldr	r2, [r3, #16]
    5a60:	428a      	cmp	r2, r1
    5a62:	dc02      	bgt.n	5a6a <z_time_slice+0x62>
			move_thread_to_end_of_prio_q(_current);
    5a64:	f7ff ff96 	bl	5994 <move_thread_to_end_of_prio_q>
    5a68:	e7de      	b.n	5a28 <z_time_slice+0x20>
			_current_cpu->slice_ticks -= ticks;
    5a6a:	1a52      	subs	r2, r2, r1
		_current_cpu->slice_ticks = 0;
    5a6c:	611a      	str	r2, [r3, #16]
    5a6e:	e7dd      	b.n	5a2c <z_time_slice+0x24>
    5a70:	2200      	movs	r2, #0
    5a72:	e7fb      	b.n	5a6c <z_time_slice+0x64>
    5a74:	20000740 	.word	0x20000740
    5a78:	20000770 	.word	0x20000770
    5a7c:	20000778 	.word	0x20000778
    5a80:	20000774 	.word	0x20000774
    5a84:	20000360 	.word	0x20000360

00005a88 <ready_thread>:
{
    5a88:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    5a8a:	f990 200d 	ldrsb.w	r2, [r0, #13]
    5a8e:	7b43      	ldrb	r3, [r0, #13]
    5a90:	2a00      	cmp	r2, #0
    5a92:	db2a      	blt.n	5aea <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    5a94:	06da      	lsls	r2, r3, #27
    5a96:	d128      	bne.n	5aea <ready_thread+0x62>
    5a98:	6982      	ldr	r2, [r0, #24]
    5a9a:	bb32      	cbnz	r2, 5aea <ready_thread+0x62>
	return list->head == list;
    5a9c:	4a14      	ldr	r2, [pc, #80]	; (5af0 <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
    5a9e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5aa2:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
    5aa4:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5aa8:	f102 0520 	add.w	r5, r2, #32
    5aac:	42ab      	cmp	r3, r5
    5aae:	d017      	beq.n	5ae0 <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5ab0:	b1b3      	cbz	r3, 5ae0 <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
    5ab2:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    5ab6:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    5aba:	428e      	cmp	r6, r1
    5abc:	d00b      	beq.n	5ad6 <ready_thread+0x4e>
		return b2 - b1;
    5abe:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    5ac0:	2900      	cmp	r1, #0
    5ac2:	dd08      	ble.n	5ad6 <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
    5ac4:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    5ac6:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    5aca:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    5acc:	6058      	str	r0, [r3, #4]
}
    5ace:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    5ad0:	2000      	movs	r0, #0
    5ad2:	f7ff bf3f 	b.w	5954 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    5ad6:	42a3      	cmp	r3, r4
    5ad8:	d002      	beq.n	5ae0 <ready_thread+0x58>
    5ada:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5adc:	2b00      	cmp	r3, #0
    5ade:	d1ea      	bne.n	5ab6 <ready_thread+0x2e>
	node->prev = tail;
    5ae0:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
    5ae4:	6020      	str	r0, [r4, #0]
	list->tail = node;
    5ae6:	6250      	str	r0, [r2, #36]	; 0x24
}
    5ae8:	e7f1      	b.n	5ace <ready_thread+0x46>
}
    5aea:	bc70      	pop	{r4, r5, r6}
    5aec:	4770      	bx	lr
    5aee:	bf00      	nop
    5af0:	20000740 	.word	0x20000740

00005af4 <z_sched_start>:
{
    5af4:	b510      	push	{r4, lr}
	__asm__ volatile(
    5af6:	f04f 0220 	mov.w	r2, #32
    5afa:	f3ef 8411 	mrs	r4, BASEPRI
    5afe:	f382 8812 	msr	BASEPRI_MAX, r2
    5b02:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    5b06:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    5b08:	0751      	lsls	r1, r2, #29
    5b0a:	d404      	bmi.n	5b16 <z_sched_start+0x22>
	__asm__ volatile(
    5b0c:	f384 8811 	msr	BASEPRI, r4
    5b10:	f3bf 8f6f 	isb	sy
}
    5b14:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    5b16:	f022 0204 	bic.w	r2, r2, #4
    5b1a:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    5b1c:	f7ff ffb4 	bl	5a88 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    5b20:	4621      	mov	r1, r4
    5b22:	4802      	ldr	r0, [pc, #8]	; (5b2c <z_sched_start+0x38>)
}
    5b24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    5b28:	f7ff beee 	b.w	5908 <z_reschedule>
    5b2c:	20000bc6 	.word	0x20000bc6

00005b30 <unready_thread>:
{
    5b30:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    5b32:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    5b36:	7b43      	ldrb	r3, [r0, #13]
    5b38:	2a00      	cmp	r2, #0
{
    5b3a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    5b3c:	da04      	bge.n	5b48 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5b3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5b42:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    5b44:	f001 fe41 	bl	77ca <sys_dlist_remove>
	update_cache(thread == _current);
    5b48:	4b04      	ldr	r3, [pc, #16]	; (5b5c <unready_thread+0x2c>)
    5b4a:	6898      	ldr	r0, [r3, #8]
    5b4c:	1a43      	subs	r3, r0, r1
    5b4e:	4258      	negs	r0, r3
    5b50:	4158      	adcs	r0, r3
}
    5b52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    5b56:	f7ff befd 	b.w	5954 <update_cache>
    5b5a:	bf00      	nop
    5b5c:	20000740 	.word	0x20000740

00005b60 <pend>:
{
    5b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5b64:	4606      	mov	r6, r0
    5b66:	4615      	mov	r5, r2
    5b68:	461c      	mov	r4, r3
	__asm__ volatile(
    5b6a:	f04f 0320 	mov.w	r3, #32
    5b6e:	f3ef 8711 	mrs	r7, BASEPRI
    5b72:	f383 8812 	msr	BASEPRI_MAX, r3
    5b76:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    5b7a:	f001 fe86 	bl	788a <add_to_waitq_locked>
	__asm__ volatile(
    5b7e:	f387 8811 	msr	BASEPRI, r7
    5b82:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5b86:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    5b8a:	bf08      	it	eq
    5b8c:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    5b90:	d008      	beq.n	5ba4 <pend+0x44>
    5b92:	462a      	mov	r2, r5
    5b94:	4623      	mov	r3, r4
    5b96:	f106 0018 	add.w	r0, r6, #24
    5b9a:	4903      	ldr	r1, [pc, #12]	; (5ba8 <pend+0x48>)
}
    5b9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5ba0:	f000 ba2a 	b.w	5ff8 <z_add_timeout>
    5ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5ba8:	00007847 	.word	0x00007847

00005bac <z_pend_curr>:
{
    5bac:	b510      	push	{r4, lr}
	pending_current = _current;
    5bae:	4b07      	ldr	r3, [pc, #28]	; (5bcc <z_pend_curr+0x20>)
    5bb0:	6898      	ldr	r0, [r3, #8]
    5bb2:	4b07      	ldr	r3, [pc, #28]	; (5bd0 <z_pend_curr+0x24>)
{
    5bb4:	460c      	mov	r4, r1
	pending_current = _current;
    5bb6:	6018      	str	r0, [r3, #0]
{
    5bb8:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    5bba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    5bbe:	f7ff ffcf 	bl	5b60 <pend>
    5bc2:	4620      	mov	r0, r4
}
    5bc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5bc8:	f7fc bacc 	b.w	2164 <arch_swap>
    5bcc:	20000740 	.word	0x20000740
    5bd0:	20000770 	.word	0x20000770

00005bd4 <z_set_prio>:
{
    5bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5bd6:	4604      	mov	r4, r0
	__asm__ volatile(
    5bd8:	f04f 0320 	mov.w	r3, #32
    5bdc:	f3ef 8611 	mrs	r6, BASEPRI
    5be0:	f383 8812 	msr	BASEPRI_MAX, r3
    5be4:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    5be8:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    5bea:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
    5bec:	b249      	sxtb	r1, r1
    5bee:	d133      	bne.n	5c58 <z_set_prio+0x84>
		if (need_sched) {
    5bf0:	6982      	ldr	r2, [r0, #24]
    5bf2:	bb8a      	cbnz	r2, 5c58 <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5bf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5bf8:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    5bfa:	f001 fde6 	bl	77ca <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    5bfe:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    5c00:	4a17      	ldr	r2, [pc, #92]	; (5c60 <z_set_prio+0x8c>)
				thread->base.prio = prio;
    5c02:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    5c04:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5c08:	7343      	strb	r3, [r0, #13]
    5c0a:	4610      	mov	r0, r2
    5c0c:	f850 3f20 	ldr.w	r3, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5c10:	4283      	cmp	r3, r0
    5c12:	d01b      	beq.n	5c4c <z_set_prio+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5c14:	b1d3      	cbz	r3, 5c4c <z_set_prio+0x78>
	return (node == list->tail) ? NULL : node->next;
    5c16:	6a57      	ldr	r7, [r2, #36]	; 0x24
	int32_t b2 = thread_2->base.prio;
    5c18:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
    5c1c:	42a9      	cmp	r1, r5
    5c1e:	d010      	beq.n	5c42 <z_set_prio+0x6e>
		return b2 - b1;
    5c20:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    5c22:	2d00      	cmp	r5, #0
    5c24:	dd0d      	ble.n	5c42 <z_set_prio+0x6e>
	sys_dnode_t *const prev = successor->prev;
    5c26:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    5c28:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    5c2c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    5c2e:	605c      	str	r4, [r3, #4]
			update_cache(1);
    5c30:	2001      	movs	r0, #1
    5c32:	f7ff fe8f 	bl	5954 <update_cache>
    5c36:	2001      	movs	r0, #1
	__asm__ volatile(
    5c38:	f386 8811 	msr	BASEPRI, r6
    5c3c:	f3bf 8f6f 	isb	sy
}
    5c40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    5c42:	42bb      	cmp	r3, r7
    5c44:	d002      	beq.n	5c4c <z_set_prio+0x78>
    5c46:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5c48:	2b00      	cmp	r3, #0
    5c4a:	d1e5      	bne.n	5c18 <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
    5c4c:	6a53      	ldr	r3, [r2, #36]	; 0x24
	node->prev = tail;
    5c4e:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
    5c52:	601c      	str	r4, [r3, #0]
	list->tail = node;
    5c54:	6254      	str	r4, [r2, #36]	; 0x24
}
    5c56:	e7eb      	b.n	5c30 <z_set_prio+0x5c>
			thread->base.prio = prio;
    5c58:	73a1      	strb	r1, [r4, #14]
    5c5a:	2000      	movs	r0, #0
    5c5c:	e7ec      	b.n	5c38 <z_set_prio+0x64>
    5c5e:	bf00      	nop
    5c60:	20000740 	.word	0x20000740

00005c64 <z_impl_k_thread_suspend>:
{
    5c64:	b570      	push	{r4, r5, r6, lr}
    5c66:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    5c68:	3018      	adds	r0, #24
    5c6a:	f001 fe6d 	bl	7948 <z_abort_timeout>
	__asm__ volatile(
    5c6e:	f04f 0320 	mov.w	r3, #32
    5c72:	f3ef 8611 	mrs	r6, BASEPRI
    5c76:	f383 8812 	msr	BASEPRI_MAX, r3
    5c7a:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    5c7e:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    5c82:	7b63      	ldrb	r3, [r4, #13]
    5c84:	2a00      	cmp	r2, #0
    5c86:	da05      	bge.n	5c94 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5c88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5c8c:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    5c8e:	4620      	mov	r0, r4
    5c90:	f001 fd9b 	bl	77ca <sys_dlist_remove>
		update_cache(thread == _current);
    5c94:	4d0b      	ldr	r5, [pc, #44]	; (5cc4 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    5c96:	7b63      	ldrb	r3, [r4, #13]
    5c98:	68a8      	ldr	r0, [r5, #8]
    5c9a:	f043 0310 	orr.w	r3, r3, #16
    5c9e:	7363      	strb	r3, [r4, #13]
    5ca0:	1b03      	subs	r3, r0, r4
    5ca2:	4258      	negs	r0, r3
    5ca4:	4158      	adcs	r0, r3
    5ca6:	f7ff fe55 	bl	5954 <update_cache>
	__asm__ volatile(
    5caa:	f386 8811 	msr	BASEPRI, r6
    5cae:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    5cb2:	68ab      	ldr	r3, [r5, #8]
    5cb4:	42a3      	cmp	r3, r4
    5cb6:	d103      	bne.n	5cc0 <z_impl_k_thread_suspend+0x5c>
}
    5cb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    5cbc:	f001 bda3 	b.w	7806 <z_reschedule_unlocked>
}
    5cc0:	bd70      	pop	{r4, r5, r6, pc}
    5cc2:	bf00      	nop
    5cc4:	20000740 	.word	0x20000740

00005cc8 <k_sched_unlock>:
{
    5cc8:	b510      	push	{r4, lr}
	__asm__ volatile(
    5cca:	f04f 0320 	mov.w	r3, #32
    5cce:	f3ef 8411 	mrs	r4, BASEPRI
    5cd2:	f383 8812 	msr	BASEPRI_MAX, r3
    5cd6:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    5cda:	4b08      	ldr	r3, [pc, #32]	; (5cfc <k_sched_unlock+0x34>)
    5cdc:	689a      	ldr	r2, [r3, #8]
    5cde:	7bd3      	ldrb	r3, [r2, #15]
    5ce0:	3301      	adds	r3, #1
    5ce2:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    5ce4:	2000      	movs	r0, #0
    5ce6:	f7ff fe35 	bl	5954 <update_cache>
	__asm__ volatile(
    5cea:	f384 8811 	msr	BASEPRI, r4
    5cee:	f3bf 8f6f 	isb	sy
}
    5cf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    5cf6:	f001 bd86 	b.w	7806 <z_reschedule_unlocked>
    5cfa:	bf00      	nop
    5cfc:	20000740 	.word	0x20000740

00005d00 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    5d00:	4b04      	ldr	r3, [pc, #16]	; (5d14 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    5d02:	2100      	movs	r1, #0
    5d04:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    5d08:	e9c3 2208 	strd	r2, r2, [r3, #32]
    5d0c:	4608      	mov	r0, r1
    5d0e:	f7ff bdcb 	b.w	58a8 <k_sched_time_slice_set>
    5d12:	bf00      	nop
    5d14:	20000740 	.word	0x20000740

00005d18 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    5d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    5d1a:	f04f 0320 	mov.w	r3, #32
    5d1e:	f3ef 8511 	mrs	r5, BASEPRI
    5d22:	f383 8812 	msr	BASEPRI_MAX, r3
    5d26:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    5d2a:	491a      	ldr	r1, [pc, #104]	; (5d94 <z_impl_k_yield+0x7c>)
    5d2c:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5d2e:	7b43      	ldrb	r3, [r0, #13]
    5d30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5d34:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    5d36:	f001 fd48 	bl	77ca <sys_dlist_remove>
	}
	queue_thread(_current);
    5d3a:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    5d3c:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
    5d3e:	4608      	mov	r0, r1
    5d40:	f062 027f 	orn	r2, r2, #127	; 0x7f
    5d44:	735a      	strb	r2, [r3, #13]
    5d46:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5d4a:	4282      	cmp	r2, r0
    5d4c:	d01c      	beq.n	5d88 <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5d4e:	b1da      	cbz	r2, 5d88 <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
    5d50:	6a4f      	ldr	r7, [r1, #36]	; 0x24
	int32_t b1 = thread_1->base.prio;
    5d52:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    5d56:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
    5d5a:	42a6      	cmp	r6, r4
    5d5c:	d00f      	beq.n	5d7e <z_impl_k_yield+0x66>
		return b2 - b1;
    5d5e:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    5d60:	2c00      	cmp	r4, #0
    5d62:	dd0c      	ble.n	5d7e <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
    5d64:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    5d66:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    5d6a:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    5d6c:	6053      	str	r3, [r2, #4]
	update_cache(1);
    5d6e:	2001      	movs	r0, #1
    5d70:	f7ff fdf0 	bl	5954 <update_cache>
    5d74:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    5d76:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    5d7a:	f7fc b9f3 	b.w	2164 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    5d7e:	42ba      	cmp	r2, r7
    5d80:	d002      	beq.n	5d88 <z_impl_k_yield+0x70>
    5d82:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5d84:	2a00      	cmp	r2, #0
    5d86:	d1e6      	bne.n	5d56 <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
    5d88:	6a4a      	ldr	r2, [r1, #36]	; 0x24
	node->prev = tail;
    5d8a:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
    5d8e:	6013      	str	r3, [r2, #0]
	list->tail = node;
    5d90:	624b      	str	r3, [r1, #36]	; 0x24
}
    5d92:	e7ec      	b.n	5d6e <z_impl_k_yield+0x56>
    5d94:	20000740 	.word	0x20000740

00005d98 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    5d98:	ea50 0301 	orrs.w	r3, r0, r1
{
    5d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5da0:	4605      	mov	r5, r0
    5da2:	460e      	mov	r6, r1
	if (ticks == 0) {
    5da4:	d103      	bne.n	5dae <z_tick_sleep+0x16>
	z_impl_k_yield();
    5da6:	f7ff ffb7 	bl	5d18 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
    5daa:	2000      	movs	r0, #0
    5dac:	e033      	b.n	5e16 <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
    5dae:	f06f 0401 	mvn.w	r4, #1
    5db2:	1a24      	subs	r4, r4, r0
    5db4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5db8:	eb63 0301 	sbc.w	r3, r3, r1
    5dbc:	2c01      	cmp	r4, #1
    5dbe:	f173 0300 	sbcs.w	r3, r3, #0
    5dc2:	da02      	bge.n	5dca <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    5dc4:	f001 fe00 	bl	79c8 <sys_clock_tick_get_32>
    5dc8:	1944      	adds	r4, r0, r5
    5dca:	f04f 0320 	mov.w	r3, #32
    5dce:	f3ef 8811 	mrs	r8, BASEPRI
    5dd2:	f383 8812 	msr	BASEPRI_MAX, r3
    5dd6:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    5dda:	4f10      	ldr	r7, [pc, #64]	; (5e1c <z_tick_sleep+0x84>)
    5ddc:	4b10      	ldr	r3, [pc, #64]	; (5e20 <z_tick_sleep+0x88>)
    5dde:	68b8      	ldr	r0, [r7, #8]
    5de0:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    5de2:	f7ff fea5 	bl	5b30 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    5de6:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    5de8:	490e      	ldr	r1, [pc, #56]	; (5e24 <z_tick_sleep+0x8c>)
    5dea:	462a      	mov	r2, r5
    5dec:	4633      	mov	r3, r6
    5dee:	3018      	adds	r0, #24
    5df0:	f000 f902 	bl	5ff8 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    5df4:	68ba      	ldr	r2, [r7, #8]
    5df6:	7b53      	ldrb	r3, [r2, #13]
    5df8:	f043 0310 	orr.w	r3, r3, #16
    5dfc:	7353      	strb	r3, [r2, #13]
    5dfe:	4640      	mov	r0, r8
    5e00:	f7fc f9b0 	bl	2164 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    5e04:	f001 fde0 	bl	79c8 <sys_clock_tick_get_32>
    5e08:	1a20      	subs	r0, r4, r0
    5e0a:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    5e0e:	2801      	cmp	r0, #1
    5e10:	f173 0300 	sbcs.w	r3, r3, #0
    5e14:	dbc9      	blt.n	5daa <z_tick_sleep+0x12>
}
    5e16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5e1a:	bf00      	nop
    5e1c:	20000740 	.word	0x20000740
    5e20:	20000770 	.word	0x20000770
    5e24:	00007847 	.word	0x00007847

00005e28 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5e28:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    5e2c:	bf08      	it	eq
    5e2e:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    5e32:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5e34:	d106      	bne.n	5e44 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    5e36:	4b08      	ldr	r3, [pc, #32]	; (5e58 <z_impl_k_sleep+0x30>)
    5e38:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    5e3a:	f7ff ff13 	bl	5c64 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    5e3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    5e42:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    5e44:	f7ff ffa8 	bl	5d98 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
    5e48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    5e4c:	fb80 0303 	smull	r0, r3, r0, r3
    5e50:	0bc0      	lsrs	r0, r0, #15
    5e52:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    5e56:	e7f4      	b.n	5e42 <z_impl_k_sleep+0x1a>
    5e58:	20000740 	.word	0x20000740

00005e5c <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    5e5c:	4b01      	ldr	r3, [pc, #4]	; (5e64 <z_impl_z_current_get+0x8>)
    5e5e:	6898      	ldr	r0, [r3, #8]
    5e60:	4770      	bx	lr
    5e62:	bf00      	nop
    5e64:	20000740 	.word	0x20000740

00005e68 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    5e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5e6c:	4604      	mov	r4, r0
    5e6e:	f04f 0320 	mov.w	r3, #32
    5e72:	f3ef 8611 	mrs	r6, BASEPRI
    5e76:	f383 8812 	msr	BASEPRI_MAX, r3
    5e7a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    5e7e:	7b43      	ldrb	r3, [r0, #13]
    5e80:	071a      	lsls	r2, r3, #28
    5e82:	d505      	bpl.n	5e90 <z_thread_abort+0x28>
	__asm__ volatile(
    5e84:	f386 8811 	msr	BASEPRI, r6
    5e88:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    5e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    5e90:	f023 0220 	bic.w	r2, r3, #32
    5e94:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    5e98:	09d2      	lsrs	r2, r2, #7
    5e9a:	d120      	bne.n	5ede <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    5e9c:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    5e9e:	68a3      	ldr	r3, [r4, #8]
    5ea0:	b113      	cbz	r3, 5ea8 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
    5ea2:	4620      	mov	r0, r4
    5ea4:	f001 fc99 	bl	77da <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    5ea8:	f104 0018 	add.w	r0, r4, #24
    5eac:	f001 fd4c 	bl	7948 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    5eb0:	f104 0758 	add.w	r7, r4, #88	; 0x58
    5eb4:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    5eb8:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5eba:	42bd      	cmp	r5, r7
    5ebc:	d000      	beq.n	5ec0 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    5ebe:	b9b5      	cbnz	r5, 5eee <z_thread_abort+0x86>
		update_cache(1);
    5ec0:	2001      	movs	r0, #1
    5ec2:	f7ff fd47 	bl	5954 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    5ec6:	4b10      	ldr	r3, [pc, #64]	; (5f08 <z_thread_abort+0xa0>)
    5ec8:	689b      	ldr	r3, [r3, #8]
    5eca:	42a3      	cmp	r3, r4
    5ecc:	d1da      	bne.n	5e84 <z_thread_abort+0x1c>
    5ece:	f3ef 8305 	mrs	r3, IPSR
    5ed2:	2b00      	cmp	r3, #0
    5ed4:	d1d6      	bne.n	5e84 <z_thread_abort+0x1c>
    5ed6:	4630      	mov	r0, r6
    5ed8:	f7fc f944 	bl	2164 <arch_swap>
	return ret;
    5edc:	e7d2      	b.n	5e84 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5ede:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    5ee2:	f043 0308 	orr.w	r3, r3, #8
    5ee6:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    5ee8:	f001 fc6f 	bl	77ca <sys_dlist_remove>
}
    5eec:	e7d7      	b.n	5e9e <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
    5eee:	4628      	mov	r0, r5
    5ef0:	f001 fc73 	bl	77da <unpend_thread_no_timeout>
    5ef4:	f105 0018 	add.w	r0, r5, #24
    5ef8:	f001 fd26 	bl	7948 <z_abort_timeout>
    5efc:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    5f00:	4628      	mov	r0, r5
    5f02:	f7ff fdc1 	bl	5a88 <ready_thread>
    5f06:	e7d7      	b.n	5eb8 <z_thread_abort+0x50>
    5f08:	20000740 	.word	0x20000740

00005f0c <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    5f0c:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    5f0e:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
    5f12:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    5f14:	e9cd 6700 	strd	r6, r7, [sp]
    5f18:	f7ff fe48 	bl	5bac <z_pend_curr>

	if (data != NULL) {
    5f1c:	b11c      	cbz	r4, 5f26 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
    5f1e:	4b03      	ldr	r3, [pc, #12]	; (5f2c <z_sched_wait+0x20>)
    5f20:	689b      	ldr	r3, [r3, #8]
    5f22:	695b      	ldr	r3, [r3, #20]
    5f24:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    5f26:	b002      	add	sp, #8
    5f28:	bdd0      	pop	{r4, r6, r7, pc}
    5f2a:	bf00      	nop
    5f2c:	20000740 	.word	0x20000740

00005f30 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    5f30:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
    5f32:	4806      	ldr	r0, [pc, #24]	; (5f4c <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
    5f34:	4a06      	ldr	r2, [pc, #24]	; (5f50 <z_data_copy+0x20>)
    5f36:	4907      	ldr	r1, [pc, #28]	; (5f54 <z_data_copy+0x24>)
    5f38:	1a12      	subs	r2, r2, r0
    5f3a:	f000 fbc0 	bl	66be <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    5f3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
    5f42:	4a05      	ldr	r2, [pc, #20]	; (5f58 <z_data_copy+0x28>)
    5f44:	4905      	ldr	r1, [pc, #20]	; (5f5c <z_data_copy+0x2c>)
    5f46:	4806      	ldr	r0, [pc, #24]	; (5f60 <z_data_copy+0x30>)
    5f48:	f000 bbb9 	b.w	66be <memcpy>
    5f4c:	20000000 	.word	0x20000000
    5f50:	200001b4 	.word	0x200001b4
    5f54:	000082d0 	.word	0x000082d0
    5f58:	00000000 	.word	0x00000000
    5f5c:	000082d0 	.word	0x000082d0
    5f60:	20000000 	.word	0x20000000

00005f64 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    5f64:	4b03      	ldr	r3, [pc, #12]	; (5f74 <elapsed+0x10>)
    5f66:	681b      	ldr	r3, [r3, #0]
    5f68:	b90b      	cbnz	r3, 5f6e <elapsed+0xa>
    5f6a:	f7fd bf05 	b.w	3d78 <sys_clock_elapsed>
}
    5f6e:	2000      	movs	r0, #0
    5f70:	4770      	bx	lr
    5f72:	bf00      	nop
    5f74:	2000077c 	.word	0x2000077c

00005f78 <next_timeout>:
	return list->head == list;
    5f78:	4b10      	ldr	r3, [pc, #64]	; (5fbc <next_timeout+0x44>)

static int32_t next_timeout(void)
{
    5f7a:	b510      	push	{r4, lr}
    5f7c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5f7e:	429c      	cmp	r4, r3
    5f80:	bf08      	it	eq
    5f82:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    5f84:	f7ff ffee 	bl	5f64 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    5f88:	b1a4      	cbz	r4, 5fb4 <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    5f8a:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    5f8e:	1a1b      	subs	r3, r3, r0
    5f90:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
    5f94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    5f98:	f170 0200 	sbcs.w	r2, r0, #0
    5f9c:	da0a      	bge.n	5fb4 <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    5f9e:	2800      	cmp	r0, #0
    5fa0:	bfac      	ite	ge
    5fa2:	4618      	movge	r0, r3
    5fa4:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    5fa6:	4b06      	ldr	r3, [pc, #24]	; (5fc0 <next_timeout+0x48>)
    5fa8:	691b      	ldr	r3, [r3, #16]
    5faa:	b113      	cbz	r3, 5fb2 <next_timeout+0x3a>
    5fac:	4298      	cmp	r0, r3
    5fae:	bfa8      	it	ge
    5fb0:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    5fb2:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
    5fb4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    5fb8:	e7f5      	b.n	5fa6 <next_timeout+0x2e>
    5fba:	bf00      	nop
    5fbc:	20000138 	.word	0x20000138
    5fc0:	20000740 	.word	0x20000740

00005fc4 <remove_timeout>:
{
    5fc4:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
    5fc6:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    5fc8:	b168      	cbz	r0, 5fe6 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    5fca:	4a0a      	ldr	r2, [pc, #40]	; (5ff4 <remove_timeout+0x30>)
    5fcc:	6852      	ldr	r2, [r2, #4]
    5fce:	4290      	cmp	r0, r2
    5fd0:	d009      	beq.n	5fe6 <remove_timeout+0x22>
	if (next(t) != NULL) {
    5fd2:	b143      	cbz	r3, 5fe6 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    5fd4:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    5fd8:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    5fdc:	1912      	adds	r2, r2, r4
    5fde:	eb41 0105 	adc.w	r1, r1, r5
    5fe2:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    5fe6:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
    5fe8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    5fea:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    5fec:	2300      	movs	r3, #0
	node->prev = NULL;
    5fee:	e9c0 3300 	strd	r3, r3, [r0]
}
    5ff2:	bd30      	pop	{r4, r5, pc}
    5ff4:	20000138 	.word	0x20000138

00005ff8 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5ff8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    5ffc:	bf08      	it	eq
    5ffe:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    6002:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6004:	4604      	mov	r4, r0
    6006:	461f      	mov	r7, r3
    6008:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    600a:	d067      	beq.n	60dc <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    600c:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    600e:	f04f 0320 	mov.w	r3, #32
    6012:	f3ef 8611 	mrs	r6, BASEPRI
    6016:	f383 8812 	msr	BASEPRI_MAX, r3
    601a:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    601e:	f06f 0201 	mvn.w	r2, #1
    6022:	1b53      	subs	r3, r2, r5
    6024:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    6028:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    602c:	2b00      	cmp	r3, #0
    602e:	db1b      	blt.n	6068 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    6030:	4b2b      	ldr	r3, [pc, #172]	; (60e0 <z_add_timeout+0xe8>)
    6032:	e9d3 1300 	ldrd	r1, r3, [r3]
    6036:	1a52      	subs	r2, r2, r1
    6038:	eb6c 0303 	sbc.w	r3, ip, r3
    603c:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
    603e:	eb63 0307 	sbc.w	r3, r3, r7
    6042:	2d01      	cmp	r5, #1
    6044:	f173 0200 	sbcs.w	r2, r3, #0
    6048:	bfbc      	itt	lt
    604a:	2501      	movlt	r5, #1
    604c:	2300      	movlt	r3, #0
    604e:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
    6052:	4824      	ldr	r0, [pc, #144]	; (60e4 <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
    6054:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6058:	4283      	cmp	r3, r0
    605a:	d118      	bne.n	608e <z_add_timeout+0x96>
	node->prev = tail;
    605c:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
    6060:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
    6064:	6044      	str	r4, [r0, #4]
}
    6066:	e026      	b.n	60b6 <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    6068:	f7ff ff7c 	bl	5f64 <elapsed>
    606c:	3501      	adds	r5, #1
    606e:	f147 0700 	adc.w	r7, r7, #0
    6072:	182d      	adds	r5, r5, r0
    6074:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
    6078:	e9c4 5704 	strd	r5, r7, [r4, #16]
    607c:	e7e9      	b.n	6052 <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    607e:	1a52      	subs	r2, r2, r1
    6080:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
    6084:	459c      	cmp	ip, r3
    6086:	e9c4 2504 	strd	r2, r5, [r4, #16]
    608a:	d0e7      	beq.n	605c <z_add_timeout+0x64>
    608c:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    608e:	2b00      	cmp	r3, #0
    6090:	d0e4      	beq.n	605c <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
    6092:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
    6096:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
    609a:	428a      	cmp	r2, r1
    609c:	eb75 0e07 	sbcs.w	lr, r5, r7
    60a0:	daed      	bge.n	607e <z_add_timeout+0x86>
				t->dticks -= to->dticks;
    60a2:	1a8a      	subs	r2, r1, r2
    60a4:	eb67 0505 	sbc.w	r5, r7, r5
    60a8:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    60ac:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    60ae:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    60b2:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    60b4:	605c      	str	r4, [r3, #4]
	return list->head == list;
    60b6:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    60b8:	4283      	cmp	r3, r0
    60ba:	d00b      	beq.n	60d4 <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    60bc:	429c      	cmp	r4, r3
    60be:	d109      	bne.n	60d4 <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    60c0:	f7ff ff5a 	bl	5f78 <next_timeout>

			if (next_time == 0 ||
    60c4:	b118      	cbz	r0, 60ce <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
    60c6:	4b08      	ldr	r3, [pc, #32]	; (60e8 <z_add_timeout+0xf0>)
			if (next_time == 0 ||
    60c8:	691b      	ldr	r3, [r3, #16]
    60ca:	4283      	cmp	r3, r0
    60cc:	d002      	beq.n	60d4 <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
    60ce:	2100      	movs	r1, #0
    60d0:	f7fd fe20 	bl	3d14 <sys_clock_set_timeout>
	__asm__ volatile(
    60d4:	f386 8811 	msr	BASEPRI, r6
    60d8:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    60dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    60de:	bf00      	nop
    60e0:	20000460 	.word	0x20000460
    60e4:	20000138 	.word	0x20000138
    60e8:	20000740 	.word	0x20000740

000060ec <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    60ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    60f0:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    60f2:	f7ff fc89 	bl	5a08 <z_time_slice>
	__asm__ volatile(
    60f6:	f04f 0320 	mov.w	r3, #32
    60fa:	f3ef 8411 	mrs	r4, BASEPRI
    60fe:	f383 8812 	msr	BASEPRI_MAX, r3
    6102:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    6106:	4e24      	ldr	r6, [pc, #144]	; (6198 <sys_clock_announce+0xac>)
	return list->head == list;
    6108:	f8df 8090 	ldr.w	r8, [pc, #144]	; 619c <sys_clock_announce+0xb0>
    610c:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    610e:	4d24      	ldr	r5, [pc, #144]	; (61a0 <sys_clock_announce+0xb4>)
    6110:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    6114:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6116:	4540      	cmp	r0, r8
		curr_tick += dt;
    6118:	e9d5 1e00 	ldrd	r1, lr, [r5]
    611c:	ea4f 77e2 	mov.w	r7, r2, asr #31
    6120:	d00b      	beq.n	613a <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    6122:	b150      	cbz	r0, 613a <sys_clock_announce+0x4e>
    6124:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
    6128:	429a      	cmp	r2, r3
    612a:	eb77 090c 	sbcs.w	r9, r7, ip
    612e:	da16      	bge.n	615e <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    6130:	1a9b      	subs	r3, r3, r2
    6132:	eb6c 0c07 	sbc.w	ip, ip, r7
    6136:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
    613a:	1852      	adds	r2, r2, r1
    613c:	eb4e 0707 	adc.w	r7, lr, r7
    6140:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
    6144:	2500      	movs	r5, #0
    6146:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
    6148:	f7ff ff16 	bl	5f78 <next_timeout>
    614c:	4629      	mov	r1, r5
    614e:	f7fd fde1 	bl	3d14 <sys_clock_set_timeout>
	__asm__ volatile(
    6152:	f384 8811 	msr	BASEPRI, r4
    6156:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    615a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    615e:	1859      	adds	r1, r3, r1
    6160:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
    6164:	1ad3      	subs	r3, r2, r3
    6166:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
    6168:	2200      	movs	r2, #0
    616a:	2300      	movs	r3, #0
    616c:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
    6170:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
    6174:	f7ff ff26 	bl	5fc4 <remove_timeout>
    6178:	f384 8811 	msr	BASEPRI, r4
    617c:	f3bf 8f6f 	isb	sy
		t->fn(t);
    6180:	6883      	ldr	r3, [r0, #8]
    6182:	4798      	blx	r3
	__asm__ volatile(
    6184:	f04f 0320 	mov.w	r3, #32
    6188:	f3ef 8411 	mrs	r4, BASEPRI
    618c:	f383 8812 	msr	BASEPRI_MAX, r3
    6190:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    6194:	e7bc      	b.n	6110 <sys_clock_announce+0x24>
    6196:	bf00      	nop
    6198:	2000077c 	.word	0x2000077c
    619c:	20000138 	.word	0x20000138
    61a0:	20000460 	.word	0x20000460

000061a4 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    61a4:	b510      	push	{r4, lr}
    61a6:	f04f 0320 	mov.w	r3, #32
    61aa:	f3ef 8411 	mrs	r4, BASEPRI
    61ae:	f383 8812 	msr	BASEPRI_MAX, r3
    61b2:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    61b6:	f7fd fddf 	bl	3d78 <sys_clock_elapsed>
    61ba:	4a05      	ldr	r2, [pc, #20]	; (61d0 <sys_clock_tick_get+0x2c>)
    61bc:	e9d2 3100 	ldrd	r3, r1, [r2]
    61c0:	18c0      	adds	r0, r0, r3
    61c2:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
    61c6:	f384 8811 	msr	BASEPRI, r4
    61ca:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    61ce:	bd10      	pop	{r4, pc}
    61d0:	20000460 	.word	0x20000460

000061d4 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    61d4:	4a02      	ldr	r2, [pc, #8]	; (61e0 <boot_banner+0xc>)
    61d6:	4903      	ldr	r1, [pc, #12]	; (61e4 <boot_banner+0x10>)
    61d8:	4803      	ldr	r0, [pc, #12]	; (61e8 <boot_banner+0x14>)
    61da:	f000 b844 	b.w	6266 <printk>
    61de:	bf00      	nop
    61e0:	000081cb 	.word	0x000081cb
    61e4:	0000828f 	.word	0x0000828f
    61e8:	0000829d 	.word	0x0000829d

000061ec <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
    61ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
    61ee:	4b09      	ldr	r3, [pc, #36]	; (6214 <k_sys_work_q_init+0x28>)
    61f0:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    61f2:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
    61f4:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
    61f6:	9300      	str	r3, [sp, #0]
    61f8:	4907      	ldr	r1, [pc, #28]	; (6218 <k_sys_work_q_init+0x2c>)
    61fa:	4808      	ldr	r0, [pc, #32]	; (621c <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
    61fc:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
    6200:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6204:	f44f 6280 	mov.w	r2, #1024	; 0x400
    6208:	f7ff fad0 	bl	57ac <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    620c:	4620      	mov	r0, r4
    620e:	b004      	add	sp, #16
    6210:	bd10      	pop	{r4, pc}
    6212:	bf00      	nop
    6214:	000082c4 	.word	0x000082c4
    6218:	20001da0 	.word	0x20001da0
    621c:	20000468 	.word	0x20000468

00006220 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    6220:	4770      	bx	lr

00006222 <main>:
	//get_temp_humidity_sen();
	//get_motion_values();
	//get_air_quality_val();
	
    return 0;
}
    6222:	2000      	movs	r0, #0
    6224:	4770      	bx	lr

00006226 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    6226:	4603      	mov	r3, r0
    6228:	b158      	cbz	r0, 6242 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    622a:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    622c:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    6230:	2a01      	cmp	r2, #1
    6232:	d003      	beq.n	623c <sys_notify_validate+0x16>
    6234:	2a03      	cmp	r2, #3
    6236:	d104      	bne.n	6242 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    6238:	6802      	ldr	r2, [r0, #0]
    623a:	b112      	cbz	r2, 6242 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    623c:	2000      	movs	r0, #0
    623e:	6098      	str	r0, [r3, #8]
    6240:	4770      	bx	lr
		return -EINVAL;
    6242:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    6246:	4770      	bx	lr

00006248 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    6248:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    624a:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    624c:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    6250:	2a03      	cmp	r2, #3
    6252:	f04f 0200 	mov.w	r2, #0
{
    6256:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    6258:	bf0c      	ite	eq
    625a:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    625c:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    625e:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    6260:	4770      	bx	lr

00006262 <arch_printk_char_out>:
}
    6262:	2000      	movs	r0, #0
    6264:	4770      	bx	lr

00006266 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    6266:	b40f      	push	{r0, r1, r2, r3}
    6268:	b507      	push	{r0, r1, r2, lr}
    626a:	a904      	add	r1, sp, #16
    626c:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    6270:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    6272:	f7fa fe13 	bl	e9c <vprintk>

	va_end(ap);
}
    6276:	b003      	add	sp, #12
    6278:	f85d eb04 	ldr.w	lr, [sp], #4
    627c:	b004      	add	sp, #16
    627e:	4770      	bx	lr

00006280 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    6280:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    6282:	f013 0307 	ands.w	r3, r3, #7
    6286:	d105      	bne.n	6294 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    6288:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    628a:	2b00      	cmp	r3, #0
    628c:	bf0c      	ite	eq
    628e:	2000      	moveq	r0, #0
    6290:	2003      	movne	r0, #3
    6292:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    6294:	2b02      	cmp	r3, #2
    6296:	d105      	bne.n	62a4 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    6298:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
    629a:	2b00      	cmp	r3, #0
    629c:	bf14      	ite	ne
    629e:	2000      	movne	r0, #0
    62a0:	2004      	moveq	r0, #4
    62a2:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    62a4:	2b01      	cmp	r3, #1
    62a6:	d105      	bne.n	62b4 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    62a8:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    62aa:	2b00      	cmp	r3, #0
    62ac:	bf0c      	ite	eq
    62ae:	2000      	moveq	r0, #0
    62b0:	2005      	movne	r0, #5
    62b2:	4770      	bx	lr
	int evt = EVT_NOP;
    62b4:	2000      	movs	r0, #0
}
    62b6:	4770      	bx	lr

000062b8 <notify_one>:
{
    62b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    62bc:	460d      	mov	r5, r1
    62be:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    62c0:	4619      	mov	r1, r3
    62c2:	1d28      	adds	r0, r5, #4
{
    62c4:	4690      	mov	r8, r2
    62c6:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    62c8:	f7ff ffbe 	bl	6248 <sys_notify_finalize>
	if (cb) {
    62cc:	4604      	mov	r4, r0
    62ce:	b138      	cbz	r0, 62e0 <notify_one+0x28>
		cb(mgr, cli, state, res);
    62d0:	4633      	mov	r3, r6
    62d2:	4642      	mov	r2, r8
    62d4:	4629      	mov	r1, r5
    62d6:	4638      	mov	r0, r7
    62d8:	46a4      	mov	ip, r4
}
    62da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    62de:	4760      	bx	ip
}
    62e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000062e4 <transition_complete>:
{
    62e4:	b410      	push	{r4}
	__asm__ volatile(
    62e6:	f04f 0420 	mov.w	r4, #32
    62ea:	f3ef 8211 	mrs	r2, BASEPRI
    62ee:	f384 8812 	msr	BASEPRI_MAX, r4
    62f2:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    62f6:	6141      	str	r1, [r0, #20]
}
    62f8:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    62fa:	2101      	movs	r1, #1
    62fc:	f7fa bddc 	b.w	eb8 <process_event>

00006300 <validate_args>:
{
    6300:	b510      	push	{r4, lr}
    6302:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    6304:	b140      	cbz	r0, 6318 <validate_args+0x18>
    6306:	b139      	cbz	r1, 6318 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    6308:	1d08      	adds	r0, r1, #4
    630a:	f7ff ff8c 	bl	6226 <sys_notify_validate>
	if ((rv == 0)
    630e:	b928      	cbnz	r0, 631c <validate_args+0x1c>
	    && ((cli->notify.flags
    6310:	68a3      	ldr	r3, [r4, #8]
    6312:	f033 0303 	bics.w	r3, r3, #3
    6316:	d001      	beq.n	631c <validate_args+0x1c>
		rv = -EINVAL;
    6318:	f06f 0015 	mvn.w	r0, #21
}
    631c:	bd10      	pop	{r4, pc}

0000631e <onoff_manager_init>:
{
    631e:	b538      	push	{r3, r4, r5, lr}
    6320:	460c      	mov	r4, r1
	if ((mgr == NULL)
    6322:	4605      	mov	r5, r0
    6324:	b158      	cbz	r0, 633e <onoff_manager_init+0x20>
	    || (transitions == NULL)
    6326:	b151      	cbz	r1, 633e <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    6328:	680b      	ldr	r3, [r1, #0]
    632a:	b143      	cbz	r3, 633e <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    632c:	684b      	ldr	r3, [r1, #4]
    632e:	b133      	cbz	r3, 633e <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    6330:	221c      	movs	r2, #28
    6332:	2100      	movs	r1, #0
    6334:	f000 f9ce 	bl	66d4 <memset>
    6338:	612c      	str	r4, [r5, #16]
	return 0;
    633a:	2000      	movs	r0, #0
}
    633c:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    633e:	f06f 0015 	mvn.w	r0, #21
    6342:	e7fb      	b.n	633c <onoff_manager_init+0x1e>

00006344 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    6344:	b570      	push	{r4, r5, r6, lr}
    6346:	4604      	mov	r4, r0
    6348:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    634a:	f7ff ffd9 	bl	6300 <validate_args>

	if (rv < 0) {
    634e:	1e05      	subs	r5, r0, #0
    6350:	db31      	blt.n	63b6 <onoff_request+0x72>
    6352:	f04f 0320 	mov.w	r3, #32
    6356:	f3ef 8111 	mrs	r1, BASEPRI
    635a:	f383 8812 	msr	BASEPRI_MAX, r3
    635e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    6362:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    6364:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
    6366:	f64f 75ff 	movw	r5, #65535	; 0xffff
    636a:	42ab      	cmp	r3, r5
    636c:	f000 0207 	and.w	r2, r0, #7
    6370:	d02e      	beq.n	63d0 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    6372:	2a02      	cmp	r2, #2
    6374:	d10e      	bne.n	6394 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    6376:	3301      	adds	r3, #1
    6378:	8363      	strh	r3, [r4, #26]
	rv = state;
    637a:	4615      	mov	r5, r2
		notify = true;
    637c:	2301      	movs	r3, #1
	__asm__ volatile(
    637e:	f381 8811 	msr	BASEPRI, r1
    6382:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    6386:	b1b3      	cbz	r3, 63b6 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
    6388:	2300      	movs	r3, #0
    638a:	4631      	mov	r1, r6
    638c:	4620      	mov	r0, r4
    638e:	f7ff ff93 	bl	62b8 <notify_one>
    6392:	e010      	b.n	63b6 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
    6394:	0783      	lsls	r3, r0, #30
    6396:	d001      	beq.n	639c <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
    6398:	2a06      	cmp	r2, #6
    639a:	d10e      	bne.n	63ba <onoff_request+0x76>
	parent->next = child;
    639c:	2300      	movs	r3, #0
    639e:	6033      	str	r3, [r6, #0]
	return list->tail;
    63a0:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
    63a2:	b993      	cbnz	r3, 63ca <onoff_request+0x86>
	list->head = node;
    63a4:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
    63a8:	4615      	mov	r5, r2
    63aa:	b962      	cbnz	r2, 63c6 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
    63ac:	460a      	mov	r2, r1
    63ae:	4620      	mov	r0, r4
    63b0:	2102      	movs	r1, #2
    63b2:	f7fa fd81 	bl	eb8 <process_event>
		}
	}

	return rv;
}
    63b6:	4628      	mov	r0, r5
    63b8:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
    63ba:	2a05      	cmp	r2, #5
    63bc:	bf0c      	ite	eq
    63be:	f06f 0585 	mvneq.w	r5, #133	; 0x85
    63c2:	f06f 0504 	mvnne.w	r5, #4
    63c6:	2300      	movs	r3, #0
    63c8:	e7d9      	b.n	637e <onoff_request+0x3a>
	parent->next = child;
    63ca:	601e      	str	r6, [r3, #0]
	list->tail = node;
    63cc:	6066      	str	r6, [r4, #4]
}
    63ce:	e7eb      	b.n	63a8 <onoff_request+0x64>
		rv = -EAGAIN;
    63d0:	f06f 050a 	mvn.w	r5, #10
    63d4:	e7f7      	b.n	63c6 <onoff_request+0x82>

000063d6 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
    63d6:	b510      	push	{r4, lr}
	__asm__ volatile(
    63d8:	f04f 0320 	mov.w	r3, #32
    63dc:	f3ef 8211 	mrs	r2, BASEPRI
    63e0:	f383 8812 	msr	BASEPRI_MAX, r3
    63e4:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    63e8:	8b04      	ldrh	r4, [r0, #24]
    63ea:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
    63ee:	2c02      	cmp	r4, #2
    63f0:	d00a      	beq.n	6408 <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
    63f2:	2c01      	cmp	r4, #1
    63f4:	bf0c      	ite	eq
    63f6:	f06f 0004 	mvneq.w	r0, #4
    63fa:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
    63fe:	f382 8811 	msr	BASEPRI, r2
    6402:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
    6406:	e008      	b.n	641a <onoff_release+0x44>
	mgr->refs -= 1U;
    6408:	8b43      	ldrh	r3, [r0, #26]
    640a:	3b01      	subs	r3, #1
    640c:	b29b      	uxth	r3, r3
    640e:	8343      	strh	r3, [r0, #26]
	if (stop) {
    6410:	b923      	cbnz	r3, 641c <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
    6412:	4621      	mov	r1, r4
    6414:	f7fa fd50 	bl	eb8 <process_event>
	int rv = state;
    6418:	4620      	mov	r0, r4
}
    641a:	bd10      	pop	{r4, pc}
	int rv = state;
    641c:	4620      	mov	r0, r4
    641e:	e7ee      	b.n	63fe <onoff_release+0x28>

00006420 <onoff_sync_lock>:
	__asm__ volatile(
    6420:	f04f 0220 	mov.w	r2, #32
    6424:	f3ef 8311 	mrs	r3, BASEPRI
    6428:	f382 8812 	msr	BASEPRI_MAX, r2
    642c:	f3bf 8f6f 	isb	sy
int onoff_sync_lock(struct onoff_sync_service *srv,
		    k_spinlock_key_t *keyp)
{
	*keyp = k_spin_lock(&srv->lock);
	return srv->count;
}
    6430:	6800      	ldr	r0, [r0, #0]
	*keyp = k_spin_lock(&srv->lock);
    6432:	600b      	str	r3, [r1, #0]
}
    6434:	4770      	bx	lr

00006436 <onoff_sync_finalize>:
int onoff_sync_finalize(struct onoff_sync_service *srv,
			k_spinlock_key_t key,
			struct onoff_client *cli,
			int res,
			bool on)
{
    6436:	b538      	push	{r3, r4, r5, lr}

	/* Clear errors visible when locked.  If they are to be
	 * preserved the caller must finalize with the previous
	 * error code.
	 */
	if (srv->count < 0) {
    6438:	6804      	ldr	r4, [r0, #0]
    643a:	2c00      	cmp	r4, #0
		srv->count = 0;
    643c:	bfbc      	itt	lt
    643e:	2400      	movlt	r4, #0
    6440:	6004      	strlt	r4, [r0, #0]
	}
	if (res < 0) {
    6442:	2b00      	cmp	r3, #0
{
    6444:	460d      	mov	r5, r1
    6446:	4611      	mov	r1, r2
    6448:	f89d 2010 	ldrb.w	r2, [sp, #16]
	if (res < 0) {
    644c:	da0c      	bge.n	6468 <onoff_sync_finalize+0x32>
		srv->count = res;
    644e:	6003      	str	r3, [r0, #0]
		state = ONOFF_STATE_ERROR;
    6450:	2201      	movs	r2, #1
		 * callbacks are used only when turning on don't
		 * bother changing it.
		 */
	}

	int rv = srv->count;
    6452:	6804      	ldr	r4, [r0, #0]
	__asm__ volatile(
    6454:	f385 8811 	msr	BASEPRI, r5
    6458:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&srv->lock, key);

	if (cli) {
    645c:	b111      	cbz	r1, 6464 <onoff_sync_finalize+0x2e>
		/* Detect service mis-use: onoff does not callback on transition
		 * to off, so no client should have been passed.
		 */
		__ASSERT_NO_MSG(on);
		notify_one(NULL, cli, state, res);
    645e:	2000      	movs	r0, #0
    6460:	f7ff ff2a 	bl	62b8 <notify_one>
	}

	return rv;
}
    6464:	4620      	mov	r0, r4
    6466:	bd38      	pop	{r3, r4, r5, pc}
		srv->count += 1;
    6468:	6804      	ldr	r4, [r0, #0]
	} else if (on) {
    646a:	b11a      	cbz	r2, 6474 <onoff_sync_finalize+0x3e>
		srv->count += 1;
    646c:	3401      	adds	r4, #1
		srv->count -= 1;
    646e:	6004      	str	r4, [r0, #0]
	uint32_t state = ONOFF_STATE_ON;
    6470:	2202      	movs	r2, #2
    6472:	e7ee      	b.n	6452 <onoff_sync_finalize+0x1c>
		srv->count -= 1;
    6474:	3c01      	subs	r4, #1
    6476:	e7fa      	b.n	646e <onoff_sync_finalize+0x38>

00006478 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    6478:	4604      	mov	r4, r0
    647a:	b508      	push	{r3, lr}
    647c:	4608      	mov	r0, r1
    647e:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    6480:	461a      	mov	r2, r3
    6482:	47a0      	blx	r4
	return z_impl_z_current_get();
    6484:	f7ff fcea 	bl	5e5c <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    6488:	f7fc f854 	bl	2534 <z_impl_k_thread_abort>

0000648c <_ldiv5>:
	uint32_t v_lo = *v;
    648c:	e9d0 2100 	ldrd	r2, r1, [r0]
{
    6490:	b530      	push	{r4, r5, lr}
	__asm__ ("" : "+r" (m));
    6492:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
    6496:	fba2 2403 	umull	r2, r4, r2, r3
    649a:	18d5      	adds	r5, r2, r3
    649c:	eb43 0504 	adc.w	r5, r3, r4
	result += (uint64_t)v_hi * m;
    64a0:	fba1 1303 	umull	r1, r3, r1, r3
    64a4:	1852      	adds	r2, r2, r1
    64a6:	eb44 0403 	adc.w	r4, r4, r3
    64aa:	1952      	adds	r2, r2, r5
    64ac:	f144 0200 	adc.w	r2, r4, #0
	result += (uint64_t)v_hi * m;
    64b0:	1889      	adds	r1, r1, r2
    64b2:	f143 0300 	adc.w	r3, r3, #0
	*v = result;
    64b6:	e9c0 1300 	strd	r1, r3, [r0]
}
    64ba:	bd30      	pop	{r4, r5, pc}

000064bc <_get_digit>:
	if (*digit_count > 0) {
    64bc:	680a      	ldr	r2, [r1, #0]
    64be:	2a00      	cmp	r2, #0
{
    64c0:	b510      	push	{r4, lr}
    64c2:	4603      	mov	r3, r0
	if (*digit_count > 0) {
    64c4:	dd0f      	ble.n	64e6 <_get_digit+0x2a>
		--*digit_count;
    64c6:	3a01      	subs	r2, #1
    64c8:	600a      	str	r2, [r1, #0]
		*fr *= 10U;
    64ca:	681a      	ldr	r2, [r3, #0]
    64cc:	6844      	ldr	r4, [r0, #4]
    64ce:	200a      	movs	r0, #10
    64d0:	fba2 1200 	umull	r1, r2, r2, r0
    64d4:	fb00 2204 	mla	r2, r0, r4, r2
		rval = ((*fr >> 60) & 0xF) + '0';
    64d8:	0f10      	lsrs	r0, r2, #28
		*fr &= (BIT64(60) - 1U);
    64da:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
    64de:	e9c3 1200 	strd	r1, r2, [r3]
		rval = ((*fr >> 60) & 0xF) + '0';
    64e2:	3030      	adds	r0, #48	; 0x30
}
    64e4:	bd10      	pop	{r4, pc}
		rval = '0';
    64e6:	2030      	movs	r0, #48	; 0x30
    64e8:	e7fc      	b.n	64e4 <_get_digit+0x28>

000064ea <encode_uint>:
{
    64ea:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    64ee:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    64f0:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
    64f2:	2b6f      	cmp	r3, #111	; 0x6f
{
    64f4:	4680      	mov	r8, r0
    64f6:	460f      	mov	r7, r1
    64f8:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    64fa:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    64fe:	d029      	beq.n	6554 <encode_uint+0x6a>
    6500:	d824      	bhi.n	654c <encode_uint+0x62>
		return 16;
    6502:	2b58      	cmp	r3, #88	; 0x58
    6504:	bf14      	ite	ne
    6506:	260a      	movne	r6, #10
    6508:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
    650a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    650e:	4632      	mov	r2, r6
    6510:	2300      	movs	r3, #0
    6512:	4640      	mov	r0, r8
    6514:	4639      	mov	r1, r7
    6516:	f7fa fa01 	bl	91c <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    651a:	2a09      	cmp	r2, #9
    651c:	b2d4      	uxtb	r4, r2
    651e:	d81e      	bhi.n	655e <encode_uint+0x74>
    6520:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    6522:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    6524:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    6526:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    652a:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    652e:	d301      	bcc.n	6534 <encode_uint+0x4a>
    6530:	45d1      	cmp	r9, sl
    6532:	d811      	bhi.n	6558 <encode_uint+0x6e>
	if (conv->flag_hash) {
    6534:	782b      	ldrb	r3, [r5, #0]
    6536:	069b      	lsls	r3, r3, #26
    6538:	d505      	bpl.n	6546 <encode_uint+0x5c>
		if (radix == 8) {
    653a:	2e08      	cmp	r6, #8
    653c:	d115      	bne.n	656a <encode_uint+0x80>
			conv->altform_0 = true;
    653e:	78ab      	ldrb	r3, [r5, #2]
    6540:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    6544:	70ab      	strb	r3, [r5, #2]
}
    6546:	4648      	mov	r0, r9
    6548:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    654c:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    6550:	2b70      	cmp	r3, #112	; 0x70
    6552:	e7d7      	b.n	6504 <encode_uint+0x1a>
	switch (specifier) {
    6554:	2608      	movs	r6, #8
    6556:	e7d8      	b.n	650a <encode_uint+0x20>
		value /= radix;
    6558:	4680      	mov	r8, r0
    655a:	460f      	mov	r7, r1
    655c:	e7d7      	b.n	650e <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    655e:	f1bb 0f19 	cmp.w	fp, #25
    6562:	bf94      	ite	ls
    6564:	3437      	addls	r4, #55	; 0x37
    6566:	3457      	addhi	r4, #87	; 0x57
    6568:	e7db      	b.n	6522 <encode_uint+0x38>
		} else if (radix == 16) {
    656a:	2e10      	cmp	r6, #16
    656c:	d1eb      	bne.n	6546 <encode_uint+0x5c>
			conv->altform_0c = true;
    656e:	78ab      	ldrb	r3, [r5, #2]
    6570:	f043 0310 	orr.w	r3, r3, #16
    6574:	e7e6      	b.n	6544 <encode_uint+0x5a>

00006576 <outs>:
{
    6576:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    657a:	4607      	mov	r7, r0
    657c:	4688      	mov	r8, r1
    657e:	4615      	mov	r5, r2
    6580:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    6582:	4614      	mov	r4, r2
    6584:	42b4      	cmp	r4, r6
    6586:	eba4 0005 	sub.w	r0, r4, r5
    658a:	d302      	bcc.n	6592 <outs+0x1c>
    658c:	b93e      	cbnz	r6, 659e <outs+0x28>
    658e:	7823      	ldrb	r3, [r4, #0]
    6590:	b12b      	cbz	r3, 659e <outs+0x28>
		int rc = out((int)*sp++, ctx);
    6592:	f814 0b01 	ldrb.w	r0, [r4], #1
    6596:	4641      	mov	r1, r8
    6598:	47b8      	blx	r7
		if (rc < 0) {
    659a:	2800      	cmp	r0, #0
    659c:	daf2      	bge.n	6584 <outs+0xe>
}
    659e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000065a2 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    65a2:	4770      	bx	lr

000065a4 <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                        uint16_t len)
{
    65a4:	b410      	push	{r4}
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
    65a6:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
    65aa:	46a4      	mov	ip, r4

  return ret;
}
    65ac:	bc10      	pop	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    65ae:	4760      	bx	ip

000065b0 <hts221_write_reg>:
  *
  */
int32_t hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
    65b0:	b410      	push	{r4}
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
    65b2:	6804      	ldr	r4, [r0, #0]
    65b4:	6880      	ldr	r0, [r0, #8]
    65b6:	46a4      	mov	ip, r4

  return ret;
}
    65b8:	bc10      	pop	{r4}
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    65ba:	4760      	bx	ip

000065bc <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
    65bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
    65be:	2301      	movs	r3, #1
{
    65c0:	460d      	mov	r5, r1
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
    65c2:	aa01      	add	r2, sp, #4
    65c4:	2120      	movs	r1, #32
{
    65c6:	4604      	mov	r4, r0
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
    65c8:	f7ff ffec 	bl	65a4 <hts221_read_reg>

  if (ret == 0)
    65cc:	b958      	cbnz	r0, 65e6 <hts221_data_rate_set+0x2a>
  {
    reg.odr = (uint8_t)val;
    65ce:	f89d 3004 	ldrb.w	r3, [sp, #4]
    65d2:	f365 0301 	bfi	r3, r5, #0, #2
    65d6:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
    65da:	aa01      	add	r2, sp, #4
    65dc:	2301      	movs	r3, #1
    65de:	2120      	movs	r1, #32
    65e0:	4620      	mov	r0, r4
    65e2:	f7ff ffe5 	bl	65b0 <hts221_write_reg>
  }

  return ret;
}
    65e6:	b003      	add	sp, #12
    65e8:	bd30      	pop	{r4, r5, pc}

000065ea <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
    65ea:	b537      	push	{r0, r1, r2, r4, r5, lr}
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
    65ec:	2301      	movs	r3, #1
{
    65ee:	460d      	mov	r5, r1
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
    65f0:	aa01      	add	r2, sp, #4
    65f2:	2120      	movs	r1, #32
{
    65f4:	4604      	mov	r4, r0
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
    65f6:	f7ff ffd5 	bl	65a4 <hts221_read_reg>

  if (ret == 0)
    65fa:	b958      	cbnz	r0, 6614 <hts221_block_data_update_set+0x2a>
  {
    reg.bdu = val;
    65fc:	f89d 3004 	ldrb.w	r3, [sp, #4]
    6600:	f365 0382 	bfi	r3, r5, #2, #1
    6604:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
    6608:	aa01      	add	r2, sp, #4
    660a:	2301      	movs	r3, #1
    660c:	2120      	movs	r1, #32
    660e:	4620      	mov	r0, r4
    6610:	f7ff ffce 	bl	65b0 <hts221_write_reg>
  }

  return ret;
}
    6614:	b003      	add	sp, #12
    6616:	bd30      	pop	{r4, r5, pc}

00006618 <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
    6618:	460a      	mov	r2, r1
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
    661a:	2301      	movs	r3, #1
    661c:	210f      	movs	r1, #15
    661e:	f7ff bfc1 	b.w	65a4 <hts221_read_reg>

00006622 <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
    6622:	b537      	push	{r0, r1, r2, r4, r5, lr}
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
    6624:	2301      	movs	r3, #1
{
    6626:	460d      	mov	r5, r1
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
    6628:	aa01      	add	r2, sp, #4
    662a:	2120      	movs	r1, #32
{
    662c:	4604      	mov	r4, r0
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
    662e:	f7ff ffb9 	bl	65a4 <hts221_read_reg>

  if (ret == 0)
    6632:	b958      	cbnz	r0, 664c <hts221_power_on_set+0x2a>
  {
    reg.pd = val;
    6634:	f89d 3004 	ldrb.w	r3, [sp, #4]
    6638:	f365 13c7 	bfi	r3, r5, #7, #1
    663c:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
    6640:	aa01      	add	r2, sp, #4
    6642:	2301      	movs	r3, #1
    6644:	2120      	movs	r1, #32
    6646:	4620      	mov	r0, r4
    6648:	f7ff ffb2 	bl	65b0 <hts221_write_reg>
  }

  return ret;
}
    664c:	b003      	add	sp, #12
    664e:	bd30      	pop	{r4, r5, pc}

00006650 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    6650:	f001 b849 	b.w	76e6 <z_fatal_error>

00006654 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    6654:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    6656:	6800      	ldr	r0, [r0, #0]
    6658:	f001 b845 	b.w	76e6 <z_fatal_error>

0000665c <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    665c:	2100      	movs	r1, #0
    665e:	2001      	movs	r0, #1
    6660:	f7ff bff6 	b.w	6650 <z_arm_fatal_error>

00006664 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    6664:	b508      	push	{r3, lr}
	handler();
    6666:	f7fb fd55 	bl	2114 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    666a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    666e:	f7fb be35 	b.w	22dc <z_arm_exc_exit>

00006672 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    6672:	3901      	subs	r1, #1
    6674:	4603      	mov	r3, r0
    6676:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    667a:	b90a      	cbnz	r2, 6680 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    667c:	701a      	strb	r2, [r3, #0]

	return dest;
}
    667e:	4770      	bx	lr
		*d = *s;
    6680:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    6684:	e7f7      	b.n	6676 <strcpy+0x4>

00006686 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    6686:	4603      	mov	r3, r0
	size_t n = 0;
    6688:	2000      	movs	r0, #0

	while (*s != '\0') {
    668a:	5c1a      	ldrb	r2, [r3, r0]
    668c:	b902      	cbnz	r2, 6690 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    668e:	4770      	bx	lr
		n++;
    6690:	3001      	adds	r0, #1
    6692:	e7fa      	b.n	668a <strlen+0x4>

00006694 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    6694:	4603      	mov	r3, r0
	size_t n = 0;
    6696:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    6698:	5c1a      	ldrb	r2, [r3, r0]
    669a:	b10a      	cbz	r2, 66a0 <strnlen+0xc>
    669c:	4288      	cmp	r0, r1
    669e:	d100      	bne.n	66a2 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    66a0:	4770      	bx	lr
		n++;
    66a2:	3001      	adds	r0, #1
    66a4:	e7f8      	b.n	6698 <strnlen+0x4>

000066a6 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    66a6:	1e43      	subs	r3, r0, #1
    66a8:	3901      	subs	r1, #1
    66aa:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    66ae:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    66b2:	4282      	cmp	r2, r0
    66b4:	d101      	bne.n	66ba <strcmp+0x14>
    66b6:	2a00      	cmp	r2, #0
    66b8:	d1f7      	bne.n	66aa <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    66ba:	1a10      	subs	r0, r2, r0
    66bc:	4770      	bx	lr

000066be <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    66be:	b510      	push	{r4, lr}
    66c0:	1e43      	subs	r3, r0, #1
    66c2:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    66c4:	4291      	cmp	r1, r2
    66c6:	d100      	bne.n	66ca <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    66c8:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    66ca:	f811 4b01 	ldrb.w	r4, [r1], #1
    66ce:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    66d2:	e7f7      	b.n	66c4 <memcpy+0x6>

000066d4 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    66d4:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    66d6:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    66d8:	4603      	mov	r3, r0
	while (n > 0) {
    66da:	4293      	cmp	r3, r2
    66dc:	d100      	bne.n	66e0 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    66de:	4770      	bx	lr
		*(d_byte++) = c_byte;
    66e0:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    66e4:	e7f9      	b.n	66da <memset+0x6>

000066e6 <_stdout_hook_default>:
}
    66e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    66ea:	4770      	bx	lr

000066ec <fputc>:
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&c, *(uintptr_t *)&stream, K_SYSCALL_ZEPHYR_FPUTC);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_fputc(c, stream);
    66ec:	f7fc b800 	b.w	26f0 <z_impl_zephyr_fputc>

000066f0 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
    66f0:	b084      	sub	sp, #16
    66f2:	ab04      	add	r3, sp, #16
    66f4:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
    66f8:	f89d 3004 	ldrb.w	r3, [sp, #4]
    66fc:	2b06      	cmp	r3, #6
    66fe:	d108      	bne.n	6712 <pm_power_state_set+0x22>
#endif // defined(POWER_RAMSTATUS_RAMBLOCK0_Msk)

#if defined(POWER_SYSTEMOFF_SYSTEMOFF_Enter)
NRF_STATIC_INLINE void nrf_power_system_off(NRF_POWER_Type * p_reg)
{
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    6700:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6704:	2201      	movs	r2, #1
    6706:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    670a:	f3bf 8f4f 	dsb	sy
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
    670e:	bf20      	wfe
    while (true)
    6710:	e7fd      	b.n	670e <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
    6712:	b004      	add	sp, #16
    6714:	4770      	bx	lr

00006716 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
    6716:	b084      	sub	sp, #16
    6718:	ab04      	add	r3, sp, #16
    671a:	e903 0007 	stmdb	r3, {r0, r1, r2}
    671e:	2300      	movs	r3, #0
    6720:	f383 8811 	msr	BASEPRI, r3
    6724:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    6728:	b004      	add	sp, #16
    672a:	4770      	bx	lr

0000672c <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    672c:	6903      	ldr	r3, [r0, #16]
    672e:	b2c9      	uxtb	r1, r1
    6730:	220c      	movs	r2, #12
    6732:	fb01 3302 	mla	r3, r1, r2, r3
    6736:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    6738:	f000 0007 	and.w	r0, r0, #7
    673c:	4770      	bx	lr

0000673e <set_on_state>:
	__asm__ volatile(
    673e:	f04f 0320 	mov.w	r3, #32
    6742:	f3ef 8211 	mrs	r2, BASEPRI
    6746:	f383 8812 	msr	BASEPRI_MAX, r3
    674a:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    674e:	6803      	ldr	r3, [r0, #0]
    6750:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    6754:	f043 0302 	orr.w	r3, r3, #2
    6758:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    675a:	f382 8811 	msr	BASEPRI, r2
    675e:	f3bf 8f6f 	isb	sy
}
    6762:	4770      	bx	lr

00006764 <stop>:
{
    6764:	4603      	mov	r3, r0
    6766:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
    6768:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    676a:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    676c:	f04f 0420 	mov.w	r4, #32
    6770:	f3ef 8611 	mrs	r6, BASEPRI
    6774:	f384 8812 	msr	BASEPRI_MAX, r4
    6778:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    677c:	250c      	movs	r5, #12
    677e:	fb05 0401 	mla	r4, r5, r1, r0
    6782:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    6784:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    6788:	d001      	beq.n	678e <stop+0x2a>
    678a:	42a2      	cmp	r2, r4
    678c:	d110      	bne.n	67b0 <stop+0x4c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    678e:	fb05 0001 	mla	r0, r5, r1, r0
    6792:	2201      	movs	r2, #1
    6794:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
    6796:	2000      	movs	r0, #0
	__asm__ volatile(
    6798:	f386 8811 	msr	BASEPRI, r6
    679c:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    67a0:	b928      	cbnz	r0, 67ae <stop+0x4a>
	get_sub_config(dev, type)->stop();
    67a2:	685b      	ldr	r3, [r3, #4]
    67a4:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    67a8:	684b      	ldr	r3, [r1, #4]
    67aa:	4798      	blx	r3
	return 0;
    67ac:	2000      	movs	r0, #0
}
    67ae:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
    67b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    67b4:	e7f0      	b.n	6798 <stop+0x34>

000067b6 <api_stop>:
	return stop(dev, subsys, CTX_API);
    67b6:	2280      	movs	r2, #128	; 0x80
    67b8:	f7ff bfd4 	b.w	6764 <stop>

000067bc <async_start>:
{
    67bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    67be:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    67c0:	6904      	ldr	r4, [r0, #16]
{
    67c2:	4605      	mov	r5, r0
    67c4:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    67c6:	f04f 0020 	mov.w	r0, #32
    67ca:	f3ef 8c11 	mrs	ip, BASEPRI
    67ce:	f380 8812 	msr	BASEPRI_MAX, r0
    67d2:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    67d6:	260c      	movs	r6, #12
    67d8:	fb06 4601 	mla	r6, r6, r1, r4
    67dc:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    67de:	f000 0e07 	and.w	lr, r0, #7
    67e2:	f1be 0f01 	cmp.w	lr, #1
    67e6:	d111      	bne.n	680c <async_start+0x50>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    67e8:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
    67ea:	2600      	movs	r6, #0
	__asm__ volatile(
    67ec:	f38c 8811 	msr	BASEPRI, ip
    67f0:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    67f4:	b946      	cbnz	r6, 6808 <async_start+0x4c>
	subdata->cb = cb;
    67f6:	200c      	movs	r0, #12
    67f8:	fb00 4401 	mla	r4, r0, r1, r4
	subdata->user_data = user_data;
    67fc:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    6800:	686b      	ldr	r3, [r5, #4]
    6802:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
    6806:	4798      	blx	r3
}
    6808:	4630      	mov	r0, r6
    680a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    680c:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
    6810:	4287      	cmp	r7, r0
    6812:	bf14      	ite	ne
    6814:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
    6818:	f06f 0677 	mvneq.w	r6, #119	; 0x77
    681c:	e7e6      	b.n	67ec <async_start+0x30>

0000681e <api_start>:
{
    681e:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    6820:	2480      	movs	r4, #128	; 0x80
    6822:	9400      	str	r4, [sp, #0]
    6824:	f7ff ffca 	bl	67bc <async_start>
}
    6828:	b002      	add	sp, #8
    682a:	bd10      	pop	{r4, pc}

0000682c <onoff_started_callback>:
	return &data->mgr[type];
    682c:	6900      	ldr	r0, [r0, #16]
{
    682e:	b410      	push	{r4}
	return &data->mgr[type];
    6830:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    6832:	241c      	movs	r4, #28
    6834:	fb03 0004 	mla	r0, r3, r4, r0
    6838:	2100      	movs	r1, #0
}
    683a:	bc10      	pop	{r4}
	notify(mgr, 0);
    683c:	4710      	bx	r2

0000683e <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    683e:	2000      	movs	r0, #0
    6840:	f7fd bca4 	b.w	418c <nrfx_clock_stop>

00006844 <blocking_start_callback>:
{
    6844:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    6846:	f7fe be83 	b.w	5550 <z_impl_k_sem_give>

0000684a <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    684a:	6843      	ldr	r3, [r0, #4]
    684c:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    684e:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    6852:	600b      	str	r3, [r1, #0]
}
    6854:	2000      	movs	r0, #0
    6856:	4770      	bx	lr

00006858 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6858:	6843      	ldr	r3, [r0, #4]
    685a:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    685c:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    6860:	4042      	eors	r2, r0
    6862:	400a      	ands	r2, r1
    6864:	4042      	eors	r2, r0
    p_reg->OUT = value;
    6866:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    686a:	2000      	movs	r0, #0
    686c:	4770      	bx	lr

0000686e <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    686e:	6843      	ldr	r3, [r0, #4]
    6870:	685b      	ldr	r3, [r3, #4]
}
    6872:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    6874:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    6878:	4770      	bx	lr

0000687a <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    687a:	6843      	ldr	r3, [r0, #4]
    687c:	685b      	ldr	r3, [r3, #4]
}
    687e:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    6880:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    6884:	4770      	bx	lr

00006886 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6886:	6843      	ldr	r3, [r0, #4]
    6888:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    688a:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    688e:	404b      	eors	r3, r1
    p_reg->OUT = value;
    6890:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    6894:	2000      	movs	r0, #0
    6896:	4770      	bx	lr

00006898 <gpio_nrfx_manage_callback>:
	return port->data;
    6898:	6903      	ldr	r3, [r0, #16]
	return list->head;
    689a:	6858      	ldr	r0, [r3, #4]
{
    689c:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
    689e:	b158      	cbz	r0, 68b8 <gpio_nrfx_manage_callback+0x20>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    68a0:	2400      	movs	r4, #0
    68a2:	4281      	cmp	r1, r0
    68a4:	d112      	bne.n	68cc <gpio_nrfx_manage_callback+0x34>
	return node->next;
    68a6:	6808      	ldr	r0, [r1, #0]
	return list->tail;
    68a8:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
    68aa:	b954      	cbnz	r4, 68c2 <gpio_nrfx_manage_callback+0x2a>
    68ac:	428d      	cmp	r5, r1
	list->head = node;
    68ae:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    68b0:	d100      	bne.n	68b4 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    68b2:	6098      	str	r0, [r3, #8]
	parent->next = child;
    68b4:	2000      	movs	r0, #0
    68b6:	6008      	str	r0, [r1, #0]
	if (set) {
    68b8:	b96a      	cbnz	r2, 68d6 <gpio_nrfx_manage_callback+0x3e>
	return 0;
    68ba:	2000      	movs	r0, #0
}
    68bc:	bd30      	pop	{r4, r5, pc}
    68be:	4628      	mov	r0, r5
    68c0:	e7ef      	b.n	68a2 <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
    68c2:	428d      	cmp	r5, r1
	parent->next = child;
    68c4:	6020      	str	r0, [r4, #0]
	list->tail = node;
    68c6:	bf08      	it	eq
    68c8:	609c      	streq	r4, [r3, #8]
}
    68ca:	e7f3      	b.n	68b4 <gpio_nrfx_manage_callback+0x1c>
	return node->next;
    68cc:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    68ce:	4604      	mov	r4, r0
    68d0:	2d00      	cmp	r5, #0
    68d2:	d1f4      	bne.n	68be <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    68d4:	b13a      	cbz	r2, 68e6 <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
    68d6:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
    68d8:	685a      	ldr	r2, [r3, #4]
    68da:	600a      	str	r2, [r1, #0]
	list->head = node;
    68dc:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    68de:	2800      	cmp	r0, #0
    68e0:	d1eb      	bne.n	68ba <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    68e2:	6099      	str	r1, [r3, #8]
}
    68e4:	e7ea      	b.n	68bc <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    68e6:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    68ea:	e7e7      	b.n	68bc <gpio_nrfx_manage_callback+0x24>

000068ec <pin_interrupt_configure>:
{
	int rc = 0;

	if (!IS_ENABLED(CONFIG_GPIO_SX1509B_INTERRUPT)
	    && (mode != GPIO_INT_MODE_DISABLED)) {
		return -ENOTSUP;
    68ec:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000

	k_sem_give(&drv_data->lock);
#endif /* CONFIG_GPIO_SX1509B_INTERRUPT */

	return rc;
}
    68f0:	bf14      	ite	ne
    68f2:	f06f 0085 	mvnne.w	r0, #133	; 0x85
    68f6:	2000      	moveq	r0, #0
    68f8:	4770      	bx	lr

000068fa <k_sem_take.constprop.0.isra.0>:
	return z_impl_k_sem_take(sem, timeout);
    68fa:	f7fe be49 	b.w	5590 <z_impl_k_sem_take>

000068fe <i2c_write>:
{
    68fe:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	msg.len = num_bytes;
    6900:	e9cd 1201 	strd	r1, r2, [sp, #4]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    6904:	2202      	movs	r2, #2
    6906:	f88d 200c 	strb.w	r2, [sp, #12]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
    690a:	6882      	ldr	r2, [r0, #8]
    690c:	a901      	add	r1, sp, #4
    690e:	6894      	ldr	r4, [r2, #8]
    6910:	2201      	movs	r2, #1
    6912:	47a0      	blx	r4
}
    6914:	b004      	add	sp, #16
    6916:	bd10      	pop	{r4, pc}

00006918 <i2c_reg_write_word_be>:
{
    6918:	b507      	push	{r0, r1, r2, lr}
	uint8_t tx_buf[3] = { reg_addr, value >> 8, value & 0xff };
    691a:	f88d 2004 	strb.w	r2, [sp, #4]
    691e:	0a1a      	lsrs	r2, r3, #8
    6920:	f88d 2005 	strb.w	r2, [sp, #5]
    6924:	f88d 3006 	strb.w	r3, [sp, #6]
	return i2c_write(dev, tx_buf, 3, dev_addr);
    6928:	2203      	movs	r2, #3
    692a:	460b      	mov	r3, r1
    692c:	a901      	add	r1, sp, #4
    692e:	f7ff ffe6 	bl	68fe <i2c_write>
}
    6932:	b003      	add	sp, #12
    6934:	f85d fb04 	ldr.w	pc, [sp], #4

00006938 <port_write>:
{
    6938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    693c:	4605      	mov	r5, r0
    693e:	4689      	mov	r9, r1
    6940:	4614      	mov	r4, r2
    6942:	4698      	mov	r8, r3
	if (k_is_in_isr()) {
    6944:	f000 feea 	bl	771c <k_is_in_isr>
    6948:	bb08      	cbnz	r0, 698e <port_write+0x56>
	const struct sx1509b_config *cfg = dev->config;
    694a:	686f      	ldr	r7, [r5, #4]
	struct sx1509b_drv_data *drv_data = dev->data;
    694c:	692d      	ldr	r5, [r5, #16]
	k_sem_take(&drv_data->lock, K_FOREVER);
    694e:	f105 0620 	add.w	r6, r5, #32
    6952:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6956:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    695a:	4630      	mov	r0, r6
    695c:	f7ff ffcd 	bl	68fa <k_sem_take.constprop.0.isra.0>
	uint16_t orig_out = *outp;
    6960:	8b28      	ldrh	r0, [r5, #24]
	int rc = i2c_reg_write_word_be(drv_data->i2c_master, cfg->i2c_slave_addr,
    6962:	8939      	ldrh	r1, [r7, #8]
	uint16_t out = ((orig_out & ~mask) | (value & mask)) ^ toggle;
    6964:	4044      	eors	r4, r0
    6966:	ea04 0409 	and.w	r4, r4, r9
    696a:	ea84 0408 	eor.w	r4, r4, r8
    696e:	4044      	eors	r4, r0
    6970:	b2a4      	uxth	r4, r4
	int rc = i2c_reg_write_word_be(drv_data->i2c_master, cfg->i2c_slave_addr,
    6972:	6868      	ldr	r0, [r5, #4]
    6974:	4623      	mov	r3, r4
    6976:	2210      	movs	r2, #16
    6978:	f7ff ffce 	bl	6918 <i2c_reg_write_word_be>
	if (rc == 0) {
    697c:	4607      	mov	r7, r0
    697e:	b900      	cbnz	r0, 6982 <port_write+0x4a>
		*outp = out;
    6980:	832c      	strh	r4, [r5, #24]
	z_impl_k_sem_give(sem);
    6982:	4630      	mov	r0, r6
    6984:	f7fe fde4 	bl	5550 <z_impl_k_sem_give>
}
    6988:	4638      	mov	r0, r7
    698a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EWOULDBLOCK;
    698e:	f06f 070a 	mvn.w	r7, #10
    6992:	e7f9      	b.n	6988 <port_write+0x50>

00006994 <port_toggle_bits>:
	return port_write(dev, 0, 0, pins);
    6994:	2200      	movs	r2, #0
{
    6996:	460b      	mov	r3, r1
	return port_write(dev, 0, 0, pins);
    6998:	4611      	mov	r1, r2
    699a:	f7ff bfcd 	b.w	6938 <port_write>

0000699e <port_clear_bits>:
	return port_write(dev, pins, 0, 0);
    699e:	2300      	movs	r3, #0
    69a0:	461a      	mov	r2, r3
    69a2:	f7ff bfc9 	b.w	6938 <port_write>

000069a6 <port_set_bits>:
{
    69a6:	460a      	mov	r2, r1
	return port_write(dev, pins, pins, 0);
    69a8:	2300      	movs	r3, #0
    69aa:	f7ff bfc5 	b.w	6938 <port_write>

000069ae <port_set_masked>:
	return port_write(dev, mask, value, 0);
    69ae:	2300      	movs	r3, #0
    69b0:	f7ff bfc2 	b.w	6938 <port_write>

000069b4 <write_pin_state>:
{
    69b4:	b530      	push	{r4, r5, lr}
    69b6:	b087      	sub	sp, #28
    69b8:	460c      	mov	r4, r1
	pin_buf.reg = SX1509B_REG_INPUT_DISABLE;
    69ba:	2100      	movs	r1, #0
    69bc:	f88d 1004 	strb.w	r1, [sp, #4]
	pin_buf.pins.input_disable = sys_cpu_to_be16(pins->input_disable);
    69c0:	8811      	ldrh	r1, [r2, #0]
    69c2:	ba49      	rev16	r1, r1
    69c4:	f8ad 1005 	strh.w	r1, [sp, #5]
	pin_buf.pins.long_slew = sys_cpu_to_be16(pins->long_slew);
    69c8:	8851      	ldrh	r1, [r2, #2]
    69ca:	ba49      	rev16	r1, r1
    69cc:	f8ad 1007 	strh.w	r1, [sp, #7]
	pin_buf.pins.low_drive = sys_cpu_to_be16(pins->low_drive);
    69d0:	8891      	ldrh	r1, [r2, #4]
    69d2:	ba49      	rev16	r1, r1
    69d4:	f8ad 1009 	strh.w	r1, [sp, #9]
	pin_buf.pins.pull_up = sys_cpu_to_be16(pins->pull_up);
    69d8:	88d1      	ldrh	r1, [r2, #6]
    69da:	ba49      	rev16	r1, r1
    69dc:	f8ad 100b 	strh.w	r1, [sp, #11]
	pin_buf.pins.pull_down = sys_cpu_to_be16(pins->pull_down);
    69e0:	8911      	ldrh	r1, [r2, #8]
    69e2:	ba49      	rev16	r1, r1
    69e4:	f8ad 100d 	strh.w	r1, [sp, #13]
	pin_buf.pins.open_drain = sys_cpu_to_be16(pins->open_drain);
    69e8:	8951      	ldrh	r1, [r2, #10]
    69ea:	ba49      	rev16	r1, r1
    69ec:	f8ad 100f 	strh.w	r1, [sp, #15]
	pin_buf.pins.polarity = sys_cpu_to_be16(pins->polarity);
    69f0:	8991      	ldrh	r1, [r2, #12]
    69f2:	ba49      	rev16	r1, r1
    69f4:	f8ad 1011 	strh.w	r1, [sp, #17]
	pin_buf.pins.dir = sys_cpu_to_be16(pins->dir);
    69f8:	89d1      	ldrh	r1, [r2, #14]
    69fa:	8a12      	ldrh	r2, [r2, #16]
{
    69fc:	4605      	mov	r5, r0
	pin_buf.pins.dir = sys_cpu_to_be16(pins->dir);
    69fe:	ba49      	rev16	r1, r1
    6a00:	f8ad 1013 	strh.w	r1, [sp, #19]
	pin_buf.pins.data = sys_cpu_to_be16(pins->data);
    6a04:	ba51      	rev16	r1, r2
    6a06:	f8ad 1015 	strh.w	r1, [sp, #21]
		rc = i2c_reg_write_word_be(drv_data->i2c_master,
    6a0a:	6860      	ldr	r0, [r4, #4]
    6a0c:	8929      	ldrh	r1, [r5, #8]
	if (data_first) {
    6a0e:	b163      	cbz	r3, 6a2a <write_pin_state+0x76>
		rc = i2c_reg_write_word_be(drv_data->i2c_master,
    6a10:	4613      	mov	r3, r2
    6a12:	2210      	movs	r2, #16
    6a14:	f7ff ff80 	bl	6918 <i2c_reg_write_word_be>
		if (rc == 0) {
    6a18:	b928      	cbnz	r0, 6a26 <write_pin_state+0x72>
			rc = i2c_write(drv_data->i2c_master, &pin_buf.reg,
    6a1a:	892b      	ldrh	r3, [r5, #8]
    6a1c:	6860      	ldr	r0, [r4, #4]
    6a1e:	2211      	movs	r2, #17
    6a20:	a901      	add	r1, sp, #4
		rc = i2c_write(drv_data->i2c_master, &pin_buf.reg,
    6a22:	f7ff ff6c 	bl	68fe <i2c_write>
}
    6a26:	b007      	add	sp, #28
    6a28:	bd30      	pop	{r4, r5, pc}
		rc = i2c_write(drv_data->i2c_master, &pin_buf.reg,
    6a2a:	460b      	mov	r3, r1
    6a2c:	2213      	movs	r2, #19
    6a2e:	a901      	add	r1, sp, #4
    6a30:	e7f7      	b.n	6a22 <write_pin_state+0x6e>

00006a32 <sx1509b_init>:
 *
 * @param dev Device struct
 * @return 0 if successful, failed otherwise.
 */
static int sx1509b_init(const struct device *dev)
{
    6a32:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	const struct sx1509b_config *cfg = dev->config;
    6a36:	6846      	ldr	r6, [r0, #4]
	struct sx1509b_drv_data *drv_data = dev->data;
    6a38:	6905      	ldr	r5, [r0, #16]
	int rc;

	drv_data->i2c_master = device_get_binding(cfg->i2c_master_dev_name);
    6a3a:	6870      	ldr	r0, [r6, #4]
    6a3c:	f7fe fb0a 	bl	5054 <z_impl_device_get_binding>
    6a40:	6068      	str	r0, [r5, #4]
	if (!drv_data->i2c_master) {
    6a42:	2800      	cmp	r0, #0
    6a44:	d061      	beq.n	6b0a <sx1509b_init+0xd8>
	drv_data->irq_state = (struct sx1509b_irq_state) {
		.interrupt_mask = ALL_PINS,
	};
#endif

	rc = i2c_reg_write_byte(drv_data->i2c_master, cfg->i2c_slave_addr,
    6a46:	8933      	ldrh	r3, [r6, #8]
	uint8_t tx_buf[2] = {reg_addr, value};
    6a48:	f04f 087d 	mov.w	r8, #125	; 0x7d
    6a4c:	2712      	movs	r7, #18
	return i2c_write(dev, tx_buf, 2, dev_addr);
    6a4e:	2202      	movs	r2, #2
    6a50:	a901      	add	r1, sp, #4
	uint8_t tx_buf[2] = {reg_addr, value};
    6a52:	f88d 8004 	strb.w	r8, [sp, #4]
    6a56:	f88d 7005 	strb.w	r7, [sp, #5]
	return i2c_write(dev, tx_buf, 2, dev_addr);
    6a5a:	f7ff ff50 	bl	68fe <i2c_write>
				SX1509B_REG_RESET, SX1509B_REG_RESET_MAGIC0);
	if (rc != 0) {
    6a5e:	4604      	mov	r4, r0
    6a60:	2800      	cmp	r0, #0
    6a62:	d14a      	bne.n	6afa <sx1509b_init+0xc8>
	uint8_t tx_buf[2] = {reg_addr, value};
    6a64:	2234      	movs	r2, #52	; 0x34
		LOG_ERR("%s: reset m0 failed: %d\n", dev->name, rc);
		goto out;
	}
	rc = i2c_reg_write_byte(drv_data->i2c_master, cfg->i2c_slave_addr,
    6a66:	6868      	ldr	r0, [r5, #4]
    6a68:	8933      	ldrh	r3, [r6, #8]
    6a6a:	f88d 2005 	strb.w	r2, [sp, #5]
	return i2c_write(dev, tx_buf, 2, dev_addr);
    6a6e:	a901      	add	r1, sp, #4
    6a70:	2202      	movs	r2, #2
	uint8_t tx_buf[2] = {reg_addr, value};
    6a72:	f88d 8004 	strb.w	r8, [sp, #4]
	return i2c_write(dev, tx_buf, 2, dev_addr);
    6a76:	f7ff ff42 	bl	68fe <i2c_write>
				SX1509B_REG_RESET, SX1509B_REG_RESET_MAGIC1);
	if (rc != 0) {
    6a7a:	4604      	mov	r4, r0
    6a7c:	2800      	cmp	r0, #0
    6a7e:	d13c      	bne.n	6afa <sx1509b_init+0xc8>
	return z_impl_k_sleep(timeout);
    6a80:	2100      	movs	r1, #0
    6a82:	2063      	movs	r0, #99	; 0x63
    6a84:	f7ff f9d0 	bl	5e28 <z_impl_k_sleep>
	}

	k_sleep(K_MSEC(RESET_DELAY_MS));

	/* Reset state mediated by initial configuration */
	drv_data->pin_state = (struct sx1509b_pin_state) {
    6a88:	463a      	mov	r2, r7
    6a8a:	4621      	mov	r1, r4
    6a8c:	f105 0008 	add.w	r0, r5, #8
    6a90:	f7ff fe20 	bl	66d4 <memset>
    6a94:	f24e 03e0 	movw	r3, #57568	; 0xe0e0
	uint8_t tx_buf[2] = {reg_addr, value};
    6a98:	221e      	movs	r2, #30
    6a9a:	832b      	strh	r3, [r5, #24]
			& ~(DT_INST_PROP(0, init_out_low)
			    | DT_INST_PROP(0, init_out_high))),
		.data = (ALL_PINS
			 & ~DT_INST_PROP(0, init_out_low)),
	};
	drv_data->debounce_state = (struct sx1509b_debounce_state) {
    6a9c:	83ac      	strh	r4, [r5, #28]
    6a9e:	77ac      	strb	r4, [r5, #30]
		.debounce_config = CONFIG_GPIO_SX1509B_DEBOUNCE_TIME,
	};

	rc = i2c_reg_write_byte(drv_data->i2c_master, cfg->i2c_slave_addr,
    6aa0:	6868      	ldr	r0, [r5, #4]
    6aa2:	8933      	ldrh	r3, [r6, #8]
    6aa4:	f88d 2004 	strb.w	r2, [sp, #4]
    6aa8:	2240      	movs	r2, #64	; 0x40
    6aaa:	f88d 2005 	strb.w	r2, [sp, #5]
	return i2c_write(dev, tx_buf, 2, dev_addr);
    6aae:	a901      	add	r1, sp, #4
    6ab0:	2202      	movs	r2, #2
    6ab2:	f7ff ff24 	bl	68fe <i2c_write>
	drv_data->debounce_state = (struct sx1509b_debounce_state) {
    6ab6:	4627      	mov	r7, r4
				SX1509B_REG_CLOCK,
				SX1509B_REG_CLOCK_FOSC_INT_2MHZ);
	if (rc == 0) {
    6ab8:	4604      	mov	r4, r0
    6aba:	b9f0      	cbnz	r0, 6afa <sx1509b_init+0xc8>
		rc = i2c_reg_write_word_be(drv_data->i2c_master,
    6abc:	8b2b      	ldrh	r3, [r5, #24]
    6abe:	8931      	ldrh	r1, [r6, #8]
    6ac0:	6868      	ldr	r0, [r5, #4]
    6ac2:	2210      	movs	r2, #16
    6ac4:	f7ff ff28 	bl	6918 <i2c_reg_write_word_be>
					   cfg->i2c_slave_addr,
					   SX1509B_REG_DATA,
					   drv_data->pin_state.data);
	}
	if (rc == 0) {
    6ac8:	4604      	mov	r4, r0
    6aca:	b9b0      	cbnz	r0, 6afa <sx1509b_init+0xc8>
		rc = i2c_reg_write_word_be(drv_data->i2c_master,
    6acc:	8aeb      	ldrh	r3, [r5, #22]
    6ace:	8931      	ldrh	r1, [r6, #8]
    6ad0:	6868      	ldr	r0, [r5, #4]
    6ad2:	220e      	movs	r2, #14
    6ad4:	f7ff ff20 	bl	6918 <i2c_reg_write_word_be>
					   cfg->i2c_slave_addr,
					   SX1509B_REG_DIR,
					   drv_data->pin_state.dir);
	}
	if (rc == 0) {
    6ad8:	4604      	mov	r4, r0
    6ada:	b970      	cbnz	r0, 6afa <sx1509b_init+0xc8>
	uint8_t tx_buf[3] = { reg_addr, value };
    6adc:	221f      	movs	r2, #31
		rc = i2c_reg_write_byte_be(
    6ade:	6868      	ldr	r0, [r5, #4]
    6ae0:	8933      	ldrh	r3, [r6, #8]
	uint8_t tx_buf[3] = { reg_addr, value };
    6ae2:	f88d 2004 	strb.w	r2, [sp, #4]
    6ae6:	2298      	movs	r2, #152	; 0x98
    6ae8:	f88d 2005 	strb.w	r2, [sp, #5]
	return i2c_write(dev, tx_buf, 2, dev_addr);
    6aec:	a901      	add	r1, sp, #4
    6aee:	2202      	movs	r2, #2
	uint8_t tx_buf[3] = { reg_addr, value };
    6af0:	f88d 7006 	strb.w	r7, [sp, #6]
	return i2c_write(dev, tx_buf, 2, dev_addr);
    6af4:	f7ff ff03 	bl	68fe <i2c_write>
    6af8:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
    6afa:	f105 0020 	add.w	r0, r5, #32
    6afe:	f7fe fd27 	bl	5550 <z_impl_k_sem_give>
	} else {
		LOG_INF("%s init ok", dev->name);
	}
	k_sem_give(&drv_data->lock);
	return rc;
}
    6b02:	4620      	mov	r0, r4
    6b04:	b002      	add	sp, #8
    6b06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rc = -EINVAL;
    6b0a:	f06f 0415 	mvn.w	r4, #21
    6b0e:	e7f4      	b.n	6afa <sx1509b_init+0xc8>

00006b10 <sx1509b_config>:
{
    6b10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct sx1509b_config *cfg = dev->config;
    6b14:	f8d0 a004 	ldr.w	sl, [r0, #4]
	struct sx1509b_drv_data *drv_data = dev->data;
    6b18:	6904      	ldr	r4, [r0, #16]
{
    6b1a:	460d      	mov	r5, r1
    6b1c:	4617      	mov	r7, r2
	if (k_is_in_isr()) {
    6b1e:	f000 fdfd 	bl	771c <k_is_in_isr>
    6b22:	4683      	mov	fp, r0
    6b24:	2800      	cmp	r0, #0
    6b26:	f040 808c 	bne.w	6c42 <sx1509b_config+0x132>
	if ((flags & GPIO_DS_ALT) != 0) {
    6b2a:	f417 0fa0 	tst.w	r7, #5242880	; 0x500000
    6b2e:	f040 808b 	bne.w	6c48 <sx1509b_config+0x138>
	k_sem_take(&drv_data->lock, K_FOREVER);
    6b32:	f104 0920 	add.w	r9, r4, #32
    6b36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6b3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6b3e:	4648      	mov	r0, r9
    6b40:	f7ff fedb 	bl	68fa <k_sem_take.constprop.0.isra.0>
		drv_data->led_drv_enable &= ~BIT(pin);
    6b44:	2601      	movs	r6, #1
	if (drv_data->led_drv_enable & BIT(pin)) {
    6b46:	8b63      	ldrh	r3, [r4, #26]
		drv_data->led_drv_enable &= ~BIT(pin);
    6b48:	40ae      	lsls	r6, r5
    6b4a:	b2b6      	uxth	r6, r6
	if (drv_data->led_drv_enable & BIT(pin)) {
    6b4c:	fa23 f505 	lsr.w	r5, r3, r5
		drv_data->led_drv_enable &= ~BIT(pin);
    6b50:	ea6f 0806 	mvn.w	r8, r6
	if (drv_data->led_drv_enable & BIT(pin)) {
    6b54:	07e9      	lsls	r1, r5, #31
		drv_data->led_drv_enable &= ~BIT(pin);
    6b56:	fa1f f888 	uxth.w	r8, r8
	if (drv_data->led_drv_enable & BIT(pin)) {
    6b5a:	d44f      	bmi.n	6bfc <sx1509b_config+0xec>
	pins->open_drain &= ~BIT(pin);
    6b5c:	8a63      	ldrh	r3, [r4, #18]
    6b5e:	ea03 0208 	and.w	r2, r3, r8
    6b62:	8262      	strh	r2, [r4, #18]
	if ((flags & GPIO_SINGLE_ENDED) != 0) {
    6b64:	07ba      	lsls	r2, r7, #30
    6b66:	d45c      	bmi.n	6c22 <sx1509b_config+0x112>
		pins->pull_up |= BIT(pin);
    6b68:	89e3      	ldrh	r3, [r4, #14]
	if ((flags & GPIO_PULL_UP) != 0) {
    6b6a:	06f8      	lsls	r0, r7, #27
		pins->pull_up |= BIT(pin);
    6b6c:	bf4c      	ite	mi
    6b6e:	4333      	orrmi	r3, r6
		pins->pull_up &= ~BIT(pin);
    6b70:	ea08 0303 	andpl.w	r3, r8, r3
    6b74:	81e3      	strh	r3, [r4, #14]
		pins->pull_down |= BIT(pin);
    6b76:	8a23      	ldrh	r3, [r4, #16]
	if ((flags & GPIO_PULL_DOWN) != 0) {
    6b78:	06b9      	lsls	r1, r7, #26
		pins->pull_down |= BIT(pin);
    6b7a:	bf4c      	ite	mi
    6b7c:	4333      	orrmi	r3, r6
		pins->pull_down &= ~BIT(pin);
    6b7e:	ea08 0303 	andpl.w	r3, r8, r3
    6b82:	8223      	strh	r3, [r4, #16]
		pins->input_disable &= ~BIT(pin);
    6b84:	8923      	ldrh	r3, [r4, #8]
	if ((flags & GPIO_INPUT) != 0) {
    6b86:	05fa      	lsls	r2, r7, #23
		pins->input_disable &= ~BIT(pin);
    6b88:	bf4c      	ite	mi
    6b8a:	ea08 0303 	andmi.w	r3, r8, r3
		pins->input_disable |= BIT(pin);
    6b8e:	4333      	orrpl	r3, r6
	if ((flags & GPIO_OUTPUT) != 0) {
    6b90:	05bd      	lsls	r5, r7, #22
    6b92:	8123      	strh	r3, [r4, #8]
		pins->dir &= ~BIT(pin);
    6b94:	8ae3      	ldrh	r3, [r4, #22]
	if ((flags & GPIO_OUTPUT) != 0) {
    6b96:	d54e      	bpl.n	6c36 <sx1509b_config+0x126>
		pins->dir &= ~BIT(pin);
    6b98:	ea08 0303 	and.w	r3, r8, r3
		if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    6b9c:	0578      	lsls	r0, r7, #21
		pins->dir &= ~BIT(pin);
    6b9e:	82e3      	strh	r3, [r4, #22]
		if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    6ba0:	d544      	bpl.n	6c2c <sx1509b_config+0x11c>
			pins->data &= ~BIT(pin);
    6ba2:	8b23      	ldrh	r3, [r4, #24]
    6ba4:	ea08 0303 	and.w	r3, r8, r3
			pins->data |= BIT(pin);
    6ba8:	8323      	strh	r3, [r4, #24]
			data_first = true;
    6baa:	f04f 0b01 	mov.w	fp, #1
		debounce->debounce_enable |= BIT(pin);
    6bae:	f8b4 301d 	ldrh.w	r3, [r4, #29]
	if ((flags & GPIO_INT_DEBOUNCE) != 0) {
    6bb2:	033a      	lsls	r2, r7, #12
		debounce->debounce_enable |= BIT(pin);
    6bb4:	bf4c      	ite	mi
    6bb6:	431e      	orrmi	r6, r3
		debounce->debounce_enable &= ~BIT(pin);
    6bb8:	ea08 0603 	andpl.w	r6, r8, r3
    6bbc:	f8a4 601d 	strh.w	r6, [r4, #29]
	rc = write_pin_state(cfg, drv_data, pins, data_first);
    6bc0:	465b      	mov	r3, fp
    6bc2:	f104 0208 	add.w	r2, r4, #8
    6bc6:	4621      	mov	r1, r4
    6bc8:	4650      	mov	r0, sl
    6bca:	f7ff fef3 	bl	69b4 <write_pin_state>
	if (rc == 0) {
    6bce:	4605      	mov	r5, r0
    6bd0:	bb00      	cbnz	r0, 6c14 <sx1509b_config+0x104>
		debounce_buf.reg = SX1509B_REG_DEBOUNCE_CONFIG;
    6bd2:	2322      	movs	r3, #34	; 0x22
    6bd4:	f88d 3004 	strb.w	r3, [sp, #4]
			= debounce->debounce_config;
    6bd8:	7f23      	ldrb	r3, [r4, #28]
    6bda:	f88d 3005 	strb.w	r3, [sp, #5]
			= sys_cpu_to_be16(debounce->debounce_enable);
    6bde:	f8b4 301d 	ldrh.w	r3, [r4, #29]
		rc = i2c_write(drv_data->i2c_master,
    6be2:	6860      	ldr	r0, [r4, #4]
			= sys_cpu_to_be16(debounce->debounce_enable);
    6be4:	ba5b      	rev16	r3, r3
		rc = i2c_write(drv_data->i2c_master,
    6be6:	2204      	movs	r2, #4
			= sys_cpu_to_be16(debounce->debounce_enable);
    6be8:	f8ad 3006 	strh.w	r3, [sp, #6]
		rc = i2c_write(drv_data->i2c_master,
    6bec:	eb0d 0102 	add.w	r1, sp, r2
    6bf0:	f8ba 3008 	ldrh.w	r3, [sl, #8]
    6bf4:	f7ff fe83 	bl	68fe <i2c_write>
    6bf8:	4605      	mov	r5, r0
    6bfa:	e00b      	b.n	6c14 <sx1509b_config+0x104>
		drv_data->led_drv_enable &= ~BIT(pin);
    6bfc:	ea03 0308 	and.w	r3, r3, r8
		rc = i2c_reg_write_word_be(drv_data->i2c_master,
    6c00:	f8ba 1008 	ldrh.w	r1, [sl, #8]
    6c04:	6860      	ldr	r0, [r4, #4]
		drv_data->led_drv_enable &= ~BIT(pin);
    6c06:	8363      	strh	r3, [r4, #26]
		rc = i2c_reg_write_word_be(drv_data->i2c_master,
    6c08:	2220      	movs	r2, #32
    6c0a:	f7ff fe85 	bl	6918 <i2c_reg_write_word_be>
		if (rc) {
    6c0e:	4605      	mov	r5, r0
    6c10:	2800      	cmp	r0, #0
    6c12:	d0a3      	beq.n	6b5c <sx1509b_config+0x4c>
    6c14:	4648      	mov	r0, r9
    6c16:	f7fe fc9b 	bl	5550 <z_impl_k_sem_give>
}
    6c1a:	4628      	mov	r0, r5
    6c1c:	b003      	add	sp, #12
    6c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((flags & GPIO_LINE_OPEN_DRAIN) != 0) {
    6c22:	077d      	lsls	r5, r7, #29
    6c24:	d50a      	bpl.n	6c3c <sx1509b_config+0x12c>
			pins->open_drain |= BIT(pin);
    6c26:	4333      	orrs	r3, r6
    6c28:	8263      	strh	r3, [r4, #18]
    6c2a:	e79d      	b.n	6b68 <sx1509b_config+0x58>
		} else if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    6c2c:	0539      	lsls	r1, r7, #20
    6c2e:	d5be      	bpl.n	6bae <sx1509b_config+0x9e>
			pins->data |= BIT(pin);
    6c30:	8b23      	ldrh	r3, [r4, #24]
    6c32:	4333      	orrs	r3, r6
    6c34:	e7b8      	b.n	6ba8 <sx1509b_config+0x98>
		pins->dir |= BIT(pin);
    6c36:	4333      	orrs	r3, r6
    6c38:	82e3      	strh	r3, [r4, #22]
    6c3a:	e7b8      	b.n	6bae <sx1509b_config+0x9e>
			rc = -ENOTSUP;
    6c3c:	f06f 0585 	mvn.w	r5, #133	; 0x85
    6c40:	e7e8      	b.n	6c14 <sx1509b_config+0x104>
		return -EWOULDBLOCK;
    6c42:	f06f 050a 	mvn.w	r5, #10
    6c46:	e7e8      	b.n	6c1a <sx1509b_config+0x10a>
		return -ENOTSUP;
    6c48:	f06f 0585 	mvn.w	r5, #133	; 0x85
    6c4c:	e7e5      	b.n	6c1a <sx1509b_config+0x10a>

00006c4e <port_get>:
{
    6c4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6c52:	b088      	sub	sp, #32
	const struct sx1509b_config *cfg = dev->config;
    6c54:	f8d0 8004 	ldr.w	r8, [r0, #4]
	struct sx1509b_drv_data *drv_data = dev->data;
    6c58:	6907      	ldr	r7, [r0, #16]
{
    6c5a:	460d      	mov	r5, r1
	if (k_is_in_isr()) {
    6c5c:	f000 fd5e 	bl	771c <k_is_in_isr>
    6c60:	4604      	mov	r4, r0
    6c62:	bb78      	cbnz	r0, 6cc4 <port_get+0x76>
	k_sem_take(&drv_data->lock, K_FOREVER);
    6c64:	f107 0620 	add.w	r6, r7, #32
    6c68:	4630      	mov	r0, r6
    6c6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6c6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6c72:	f7ff fe42 	bl	68fa <k_sem_take.constprop.0.isra.0>
	msg[0].buf = (uint8_t *)write_buf;
    6c76:	f10d 0205 	add.w	r2, sp, #5
    6c7a:	9202      	str	r2, [sp, #8]
	msg[0].len = num_write;
    6c7c:	2201      	movs	r2, #1
	rc = i2c_write_read(drv_data->i2c_master, cfg->i2c_slave_addr,
    6c7e:	6878      	ldr	r0, [r7, #4]
    6c80:	9203      	str	r2, [sp, #12]
	uint8_t cmd = SX1509B_REG_DATA;
    6c82:	2310      	movs	r3, #16
	msg[1].buf = (uint8_t *)read_buf;
    6c84:	f10d 0206 	add.w	r2, sp, #6
    6c88:	f88d 3005 	strb.w	r3, [sp, #5]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    6c8c:	2107      	movs	r1, #7
	rc = i2c_write_read(drv_data->i2c_master, cfg->i2c_slave_addr,
    6c8e:	f8b8 3008 	ldrh.w	r3, [r8, #8]
	msg[1].buf = (uint8_t *)read_buf;
    6c92:	9205      	str	r2, [sp, #20]
	msg[1].len = num_read;
    6c94:	2202      	movs	r2, #2
	msg[0].flags = I2C_MSG_WRITE;
    6c96:	f88d 4010 	strb.w	r4, [sp, #16]
	msg[1].len = num_read;
    6c9a:	9206      	str	r2, [sp, #24]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    6c9c:	f88d 101c 	strb.w	r1, [sp, #28]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
    6ca0:	6881      	ldr	r1, [r0, #8]
    6ca2:	688c      	ldr	r4, [r1, #8]
    6ca4:	a902      	add	r1, sp, #8
    6ca6:	47a0      	blx	r4
	if (rc != 0) {
    6ca8:	4604      	mov	r4, r0
    6caa:	b920      	cbnz	r0, 6cb6 <port_get+0x68>
	*value = sys_be16_to_cpu(pin_data);
    6cac:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6cb0:	ba5b      	rev16	r3, r3
    6cb2:	b29b      	uxth	r3, r3
    6cb4:	602b      	str	r3, [r5, #0]
    6cb6:	4630      	mov	r0, r6
    6cb8:	f7fe fc4a 	bl	5550 <z_impl_k_sem_give>
}
    6cbc:	4620      	mov	r0, r4
    6cbe:	b008      	add	sp, #32
    6cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EWOULDBLOCK;
    6cc4:	f06f 040a 	mvn.w	r4, #10
    6cc8:	e7f8      	b.n	6cbc <port_get+0x6e>

00006cca <i2c_nrfx_twim_configure>:
{
    6cca:	b538      	push	{r3, r4, r5, lr}
	if (I2C_ADDR_10_BITS & i2c_config) {
    6ccc:	07cb      	lsls	r3, r1, #31
{
    6cce:	4604      	mov	r4, r0
	if (I2C_ADDR_10_BITS & i2c_config) {
    6cd0:	d41d      	bmi.n	6d0e <i2c_nrfx_twim_configure+0x44>
	switch (I2C_SPEED_GET(i2c_config)) {
    6cd2:	f3c1 0142 	ubfx	r1, r1, #1, #3
    6cd6:	2901      	cmp	r1, #1
    6cd8:	d016      	beq.n	6d08 <i2c_nrfx_twim_configure+0x3e>
    6cda:	2902      	cmp	r1, #2
    6cdc:	d117      	bne.n	6d0e <i2c_nrfx_twim_configure+0x44>
    6cde:	f04f 63c8 	mov.w	r3, #104857600	; 0x6400000
	struct i2c_nrfx_twim_data *dev_data = dev->data;
    6ce2:	6925      	ldr	r5, [r4, #16]
	if (frequency != dev_data->twim_config.frequency) {
    6ce4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    6ce6:	4293      	cmp	r3, r2
    6ce8:	d014      	beq.n	6d14 <i2c_nrfx_twim_configure+0x4a>
		dev_data->twim_config.frequency = frequency;
    6cea:	62ab      	str	r3, [r5, #40]	; 0x28
	if (dev_data->twim_initialized) {
    6cec:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
    6cf0:	b12b      	cbz	r3, 6cfe <i2c_nrfx_twim_configure+0x34>
		nrfx_twim_uninit(&dev_config->twim);
    6cf2:	6860      	ldr	r0, [r4, #4]
    6cf4:	f7fd ff1c 	bl	4b30 <nrfx_twim_uninit>
		dev_data->twim_initialized = false;
    6cf8:	2300      	movs	r3, #0
    6cfa:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
		return init_twim(dev);
    6cfe:	4620      	mov	r0, r4
}
    6d00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return init_twim(dev);
    6d04:	f7fc b86a 	b.w	2ddc <init_twim>
		frequency = NRF_TWIM_FREQ_100K;
    6d08:	f04f 73cc 	mov.w	r3, #26738688	; 0x1980000
    6d0c:	e7e9      	b.n	6ce2 <i2c_nrfx_twim_configure+0x18>
	switch (I2C_SPEED_GET(i2c_config)) {
    6d0e:	f06f 0015 	mvn.w	r0, #21
}
    6d12:	bd38      	pop	{r3, r4, r5, pc}
	return 0;
    6d14:	2000      	movs	r0, #0
    6d16:	e7fc      	b.n	6d12 <i2c_nrfx_twim_configure+0x48>

00006d18 <twim_0_init>:
		      POST_KERNEL,					       \
		      CONFIG_I2C_INIT_PRIORITY,				       \
		      &i2c_nrfx_twim_driver_api)

#ifdef CONFIG_I2C_0_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(0);
    6d18:	b510      	push	{r4, lr}
    6d1a:	2200      	movs	r2, #0
    6d1c:	4604      	mov	r4, r0
    6d1e:	2101      	movs	r1, #1
    6d20:	2003      	movs	r0, #3
    6d22:	f7fb f9df 	bl	20e4 <z_arm_irq_priority_set>
    6d26:	4620      	mov	r0, r4
    6d28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6d2c:	f7fc b856 	b.w	2ddc <init_twim>

00006d30 <twim_1_init>:
#endif

#ifdef CONFIG_I2C_1_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(1);
    6d30:	b510      	push	{r4, lr}
    6d32:	2200      	movs	r2, #0
    6d34:	4604      	mov	r4, r0
    6d36:	2101      	movs	r1, #1
    6d38:	2004      	movs	r0, #4
    6d3a:	f7fb f9d3 	bl	20e4 <z_arm_irq_priority_set>
    6d3e:	4620      	mov	r0, r4
    6d40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6d44:	f7fc b84a 	b.w	2ddc <init_twim>

00006d48 <i2c_write_read.constprop.0>:
static inline int i2c_write_read(const struct device *dev, uint16_t addr,
    6d48:	b510      	push	{r4, lr}
    6d4a:	b086      	sub	sp, #24
	msg[1].len = num_read;
    6d4c:	e9cd 2303 	strd	r2, r3, [sp, #12]
	msg[0].buf = (uint8_t *)write_buf;
    6d50:	9100      	str	r1, [sp, #0]
	msg[0].len = num_write;
    6d52:	2101      	movs	r1, #1
    6d54:	9101      	str	r1, [sp, #4]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    6d56:	2307      	movs	r3, #7
	msg[0].flags = I2C_MSG_WRITE;
    6d58:	2100      	movs	r1, #0
    6d5a:	f88d 1008 	strb.w	r1, [sp, #8]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    6d5e:	f88d 3014 	strb.w	r3, [sp, #20]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
    6d62:	6883      	ldr	r3, [r0, #8]
    6d64:	2202      	movs	r2, #2
    6d66:	689c      	ldr	r4, [r3, #8]
    6d68:	4669      	mov	r1, sp
    6d6a:	235a      	movs	r3, #90	; 0x5a
    6d6c:	47a0      	blx	r4
}
    6d6e:	b006      	add	sp, #24
    6d70:	bd10      	pop	{r4, pc}

00006d72 <gpio_pin_set.isra.0>:

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    6d72:	2301      	movs	r3, #1
    6d74:	fa03 f101 	lsl.w	r1, r3, r1
    6d78:	6903      	ldr	r3, [r0, #16]
    6d7a:	681b      	ldr	r3, [r3, #0]
    6d7c:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
    6d7e:	bf18      	it	ne
    6d80:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
    6d84:	b112      	cbz	r2, 6d8c <gpio_pin_set.isra.0+0x1a>
	return api->port_set_bits_raw(port, pins);
    6d86:	6883      	ldr	r3, [r0, #8]
    6d88:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    6d8a:	4718      	bx	r3
    6d8c:	6883      	ldr	r3, [r0, #8]
    6d8e:	691b      	ldr	r3, [r3, #16]
    6d90:	e7fb      	b.n	6d8a <gpio_pin_set.isra.0+0x18>

00006d92 <k_msleep.isra.0>:
static inline int32_t k_msleep(int32_t ms)
    6d92:	4601      	mov	r1, r0
    6d94:	f240 30e7 	movw	r0, #999	; 0x3e7
    6d98:	b508      	push	{r3, lr}
    6d9a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    6d9e:	2300      	movs	r3, #0
    6da0:	eb00 30c1 	add.w	r0, r0, r1, lsl #15
    6da4:	1449      	asrs	r1, r1, #17
    6da6:	f7f9 fdb9 	bl	91c <__aeabi_uldivmod>
}
    6daa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return z_impl_k_sleep(timeout);
    6dae:	f7ff b83b 	b.w	5e28 <z_impl_k_sleep>

00006db2 <i2c_write.constprop.0>:
static inline int i2c_write(const struct device *dev, const uint8_t *buf,
    6db2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	msg.len = num_bytes;
    6db4:	e9cd 1201 	strd	r1, r2, [sp, #4]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    6db8:	2202      	movs	r2, #2
    6dba:	f88d 200c 	strb.w	r2, [sp, #12]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
    6dbe:	6883      	ldr	r3, [r0, #8]
    6dc0:	2201      	movs	r2, #1
    6dc2:	689c      	ldr	r4, [r3, #8]
    6dc4:	a901      	add	r1, sp, #4
    6dc6:	235a      	movs	r3, #90	; 0x5a
    6dc8:	47a0      	blx	r4
}
    6dca:	b004      	add	sp, #16
    6dcc:	bd10      	pop	{r4, pc}

00006dce <fetch_status>:
{
    6dce:	b537      	push	{r0, r1, r2, r4, r5, lr}
    6dd0:	2300      	movs	r3, #0
    6dd2:	f88d 3007 	strb.w	r3, [sp, #7]
	return i2c_write_read(dev, dev_addr,
    6dd6:	f10d 0205 	add.w	r2, sp, #5
    6dda:	2301      	movs	r3, #1
    6ddc:	f10d 0107 	add.w	r1, sp, #7
    6de0:	4605      	mov	r5, r0
    6de2:	f7ff ffb1 	bl	6d48 <i2c_write_read.constprop.0>
	if (i2c_reg_read_byte(i2c, DT_INST_REG_ADDR(0),
    6de6:	2800      	cmp	r0, #0
    6de8:	db10      	blt.n	6e0c <fetch_status+0x3e>
	rv = status;
    6dea:	f89d 4005 	ldrb.w	r4, [sp, #5]
	if (status & CCS811_STATUS_ERROR) {
    6dee:	07e3      	lsls	r3, r4, #31
    6df0:	d513      	bpl.n	6e1a <fetch_status+0x4c>
		if (i2c_reg_read_byte(i2c, DT_INST_REG_ADDR(0),
    6df2:	23e0      	movs	r3, #224	; 0xe0
    6df4:	f88d 3007 	strb.w	r3, [sp, #7]
    6df8:	f10d 0206 	add.w	r2, sp, #6
    6dfc:	2301      	movs	r3, #1
    6dfe:	f10d 0107 	add.w	r1, sp, #7
    6e02:	4628      	mov	r0, r5
    6e04:	f7ff ffa0 	bl	6d48 <i2c_write_read.constprop.0>
    6e08:	2800      	cmp	r0, #0
    6e0a:	da02      	bge.n	6e12 <fetch_status+0x44>
		return -EIO;
    6e0c:	f06f 0404 	mvn.w	r4, #4
    6e10:	e003      	b.n	6e1a <fetch_status+0x4c>
		rv |= (error_id << 8);
    6e12:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6e16:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
}
    6e1a:	4620      	mov	r0, r4
    6e1c:	b003      	add	sp, #12
    6e1e:	bd30      	pop	{r4, r5, pc}

00006e20 <set_wake.isra.0>:
static void set_wake(struct ccs811_data *drv_data, bool enable)
    6e20:	b510      	push	{r4, lr}
	gpio_pin_set(drv_data->wake_gpio, WAKE_PIN, enable);
    6e22:	460a      	mov	r2, r1
static void set_wake(struct ccs811_data *drv_data, bool enable)
    6e24:	460c      	mov	r4, r1
	gpio_pin_set(drv_data->wake_gpio, WAKE_PIN, enable);
    6e26:	210c      	movs	r1, #12
    6e28:	f7ff ffa3 	bl	6d72 <gpio_pin_set.isra.0>
	if (enable) {
    6e2c:	b124      	cbz	r4, 6e38 <set_wake.isra.0+0x18>
	z_impl_k_busy_wait(usec_to_wait);
    6e2e:	2032      	movs	r0, #50	; 0x32
}
    6e30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6e34:	f000 bdcc 	b.w	79d0 <z_impl_k_busy_wait>
    6e38:	2014      	movs	r0, #20
    6e3a:	e7f9      	b.n	6e30 <set_wake.isra.0+0x10>

00006e3c <ccs811_sample_fetch>:
{
    6e3c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct ccs811_data *drv_data = dev->data;
    6e3e:	6905      	ldr	r5, [r0, #16]
	const uint8_t cmd = CCS811_REG_ALG_RESULT_DATA;
    6e40:	2302      	movs	r3, #2
	uint16_t buf[4] = { 0 };
    6e42:	2400      	movs	r4, #0
	set_wake(drv_data, true);
    6e44:	68e8      	ldr	r0, [r5, #12]
	const uint8_t cmd = CCS811_REG_ALG_RESULT_DATA;
    6e46:	f88d 3007 	strb.w	r3, [sp, #7]
	set_wake(drv_data, true);
    6e4a:	2101      	movs	r1, #1
	uint16_t buf[4] = { 0 };
    6e4c:	e9cd 4402 	strd	r4, r4, [sp, #8]
	set_wake(drv_data, true);
    6e50:	f7ff ffe6 	bl	6e20 <set_wake.isra.0>
	rc = i2c_write_read(drv_data->i2c, DT_INST_REG_ADDR(0),
    6e54:	2308      	movs	r3, #8
    6e56:	eb0d 0203 	add.w	r2, sp, r3
    6e5a:	f10d 0107 	add.w	r1, sp, #7
    6e5e:	6828      	ldr	r0, [r5, #0]
    6e60:	f7ff ff72 	bl	6d48 <i2c_write_read.constprop.0>
	set_wake(drv_data, false);
    6e64:	4621      	mov	r1, r4
	rc = i2c_write_read(drv_data->i2c, DT_INST_REG_ADDR(0),
    6e66:	4606      	mov	r6, r0
	set_wake(drv_data, false);
    6e68:	68e8      	ldr	r0, [r5, #12]
    6e6a:	f7ff ffd9 	bl	6e20 <set_wake.isra.0>
	if (rc < 0) {
    6e6e:	42a6      	cmp	r6, r4
    6e70:	db1b      	blt.n	6eaa <ccs811_sample_fetch+0x6e>
	rp->co2 = sys_be16_to_cpu(buf[0]);
    6e72:	f8bd 3008 	ldrh.w	r3, [sp, #8]
	status = sys_le16_to_cpu(buf[2]); /* sic */
    6e76:	f8bd 200c 	ldrh.w	r2, [sp, #12]
	rp->status = status;
    6e7a:	82ea      	strh	r2, [r5, #22]
    6e7c:	ba5b      	rev16	r3, r3
    6e7e:	b299      	uxth	r1, r3
	rp->co2 = sys_be16_to_cpu(buf[0]);
    6e80:	822b      	strh	r3, [r5, #16]
	rp->voc = sys_be16_to_cpu(buf[1]);
    6e82:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6e86:	ba5b      	rev16	r3, r3
    6e88:	826b      	strh	r3, [r5, #18]
	rp->raw = sys_be16_to_cpu(buf[3]);
    6e8a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6e8e:	ba5b      	rev16	r3, r3
    6e90:	82ab      	strh	r3, [r5, #20]
	if ((drv_data->app_fw_ver <= 0x11)
    6e92:	7e6b      	ldrb	r3, [r5, #25]
    6e94:	2b11      	cmp	r3, #17
    6e96:	d800      	bhi.n	6e9a <ccs811_sample_fetch+0x5e>
	    && (rp->co2 != 0)) {
    6e98:	b951      	cbnz	r1, 6eb0 <ccs811_sample_fetch+0x74>
	return (status & CCS811_STATUS_DATA_READY) ? 0 : -EAGAIN;
    6e9a:	f012 0f08 	tst.w	r2, #8
    6e9e:	bf14      	ite	ne
    6ea0:	2000      	movne	r0, #0
    6ea2:	f06f 000a 	mvneq.w	r0, #10
}
    6ea6:	b004      	add	sp, #16
    6ea8:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    6eaa:	f06f 0004 	mvn.w	r0, #4
    6eae:	e7fa      	b.n	6ea6 <ccs811_sample_fetch+0x6a>
	return (status & CCS811_STATUS_DATA_READY) ? 0 : -EAGAIN;
    6eb0:	4620      	mov	r0, r4
    6eb2:	e7f8      	b.n	6ea6 <ccs811_sample_fetch+0x6a>

00006eb4 <hts221_sample_fetch>:
{
    6eb4:	b513      	push	{r0, r1, r4, lr}
	status = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L |
    6eb6:	2304      	movs	r3, #4
	struct hts221_data *data = dev->data;
    6eb8:	6904      	ldr	r4, [r0, #16]
	status = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L |
    6eba:	6840      	ldr	r0, [r0, #4]
    6ebc:	eb0d 0203 	add.w	r2, sp, r3
    6ec0:	21a8      	movs	r1, #168	; 0xa8
    6ec2:	f7ff fb6f 	bl	65a4 <hts221_read_reg>
	if (status < 0) {
    6ec6:	2800      	cmp	r0, #0
    6ec8:	db06      	blt.n	6ed8 <hts221_sample_fetch+0x24>
	data->rh_sample = sys_le16_to_cpu(buf[0] | (buf[1] << 8));
    6eca:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    6ece:	8023      	strh	r3, [r4, #0]
	data->t_sample = sys_le16_to_cpu(buf[2] | (buf[3] << 8));
    6ed0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6ed4:	8063      	strh	r3, [r4, #2]
	return 0;
    6ed6:	2000      	movs	r0, #0
}
    6ed8:	b002      	add	sp, #8
    6eda:	bd10      	pop	{r4, pc}

00006edc <lis2dh_fetch_xyz.constprop.0>:
static int lis2dh_fetch_xyz(const struct device *dev,
    6edc:	b538      	push	{r3, r4, r5, lr}
	struct lis2dh_data *lis2dh = dev->data;
    6ede:	6904      	ldr	r4, [r0, #16]
	status = lis2dh->hw_tf->read_data(dev, LIS2DH_REG_STATUS,
    6ee0:	6863      	ldr	r3, [r4, #4]
    6ee2:	f104 0208 	add.w	r2, r4, #8
    6ee6:	681d      	ldr	r5, [r3, #0]
    6ee8:	2127      	movs	r1, #39	; 0x27
    6eea:	2307      	movs	r3, #7
    6eec:	47a8      	blx	r5
	if (status < 0) {
    6eee:	2800      	cmp	r0, #0
    6ef0:	db04      	blt.n	6efc <lis2dh_fetch_xyz.constprop.0+0x20>
	if (lis2dh->sample.status & LIS2DH_STATUS_DRDY_MASK) {
    6ef2:	7a23      	ldrb	r3, [r4, #8]
		status = 0;
    6ef4:	f013 0f0f 	tst.w	r3, #15
    6ef8:	bf18      	it	ne
    6efa:	2000      	movne	r0, #0
}
    6efc:	bd38      	pop	{r3, r4, r5, pc}

00006efe <lis2dh_sample_fetch>:
	if (chan == SENSOR_CHAN_ALL) {
    6efe:	2939      	cmp	r1, #57	; 0x39
    6f00:	d101      	bne.n	6f06 <lis2dh_sample_fetch+0x8>
		status = lis2dh_fetch_xyz(dev, chan);
    6f02:	f7ff bfeb 	b.w	6edc <lis2dh_fetch_xyz.constprop.0>
	} else if (chan == SENSOR_CHAN_ACCEL_XYZ) {
    6f06:	2903      	cmp	r1, #3
    6f08:	d0fb      	beq.n	6f02 <lis2dh_sample_fetch+0x4>
		status = lis2dh_sample_fetch_temp(dev);
    6f0a:	290c      	cmp	r1, #12
}
    6f0c:	bf14      	ite	ne
    6f0e:	f06f 003c 	mvnne.w	r0, #60	; 0x3c
    6f12:	f06f 0085 	mvneq.w	r0, #133	; 0x85
    6f16:	4770      	bx	lr

00006f18 <i2c_transfer>:

extern int z_impl_i2c_transfer(const struct device * dev, struct i2c_msg * msgs, uint8_t num_msgs, uint16_t addr);

__pinned_func
static inline int i2c_transfer(const struct device * dev, struct i2c_msg * msgs, uint8_t num_msgs, uint16_t addr)
{
    6f18:	b410      	push	{r4}
	int res =  api->transfer(dev, msgs, num_msgs, addr);
    6f1a:	6884      	ldr	r4, [r0, #8]
    6f1c:	68a4      	ldr	r4, [r4, #8]
    6f1e:	46a4      	mov	ip, r4
		return (int) arch_syscall_invoke4(*(uintptr_t *)&dev, *(uintptr_t *)&msgs, *(uintptr_t *)&num_msgs, *(uintptr_t *)&addr, K_SYSCALL_I2C_TRANSFER);
	}
#endif
	compiler_barrier();
	return z_impl_i2c_transfer(dev, msgs, num_msgs, addr);
}
    6f20:	bc10      	pop	{r4}
    6f22:	4760      	bx	ip

00006f24 <lis2dh_i2c_write_data>:
{
    6f24:	b530      	push	{r4, r5, lr}
    6f26:	461d      	mov	r5, r3
    6f28:	b089      	sub	sp, #36	; 0x24
	return i2c_burst_write(data->bus, cfg->bus_cfg.i2c_slv_addr,
    6f2a:	6903      	ldr	r3, [r0, #16]
{
    6f2c:	4604      	mov	r4, r0
	return i2c_burst_write(data->bus, cfg->bus_cfg.i2c_slv_addr,
    6f2e:	f061 017f 	orn	r1, r1, #127	; 0x7f
    6f32:	6818      	ldr	r0, [r3, #0]
    6f34:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].buf = &start_addr;
    6f38:	f10d 0107 	add.w	r1, sp, #7
    6f3c:	6863      	ldr	r3, [r4, #4]
    6f3e:	9102      	str	r1, [sp, #8]
	msg[0].len = 1U;
    6f40:	2101      	movs	r1, #1
    6f42:	9103      	str	r1, [sp, #12]
	msg[0].flags = I2C_MSG_WRITE;
    6f44:	2100      	movs	r1, #0
    6f46:	891b      	ldrh	r3, [r3, #8]
    6f48:	f88d 1010 	strb.w	r1, [sp, #16]
    6f4c:	e9cd 2505 	strd	r2, r5, [sp, #20]
	return i2c_transfer(dev, msg, 2, dev_addr);
    6f50:	a902      	add	r1, sp, #8
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    6f52:	2202      	movs	r2, #2
    6f54:	f88d 201c 	strb.w	r2, [sp, #28]
	return i2c_transfer(dev, msg, 2, dev_addr);
    6f58:	f7ff ffde 	bl	6f18 <i2c_transfer>
}
    6f5c:	b009      	add	sp, #36	; 0x24
    6f5e:	bd30      	pop	{r4, r5, pc}

00006f60 <lis2dh_i2c_read_data>:
{
    6f60:	b530      	push	{r4, r5, lr}
    6f62:	4604      	mov	r4, r0
    6f64:	b089      	sub	sp, #36	; 0x24
    6f66:	461d      	mov	r5, r3
	return i2c_burst_read(data->bus, cfg->bus_cfg.i2c_slv_addr,
    6f68:	6903      	ldr	r3, [r0, #16]
    6f6a:	f061 017f 	orn	r1, r1, #127	; 0x7f
    6f6e:	6818      	ldr	r0, [r3, #0]
    6f70:	6863      	ldr	r3, [r4, #4]
    6f72:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
    6f76:	f10d 0107 	add.w	r1, sp, #7
    6f7a:	9102      	str	r1, [sp, #8]
	msg[0].len = num_write;
    6f7c:	2101      	movs	r1, #1
    6f7e:	891b      	ldrh	r3, [r3, #8]
    6f80:	9103      	str	r1, [sp, #12]
    6f82:	e9cd 2505 	strd	r2, r5, [sp, #20]
	msg[0].flags = I2C_MSG_WRITE;
    6f86:	2100      	movs	r1, #0
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    6f88:	2207      	movs	r2, #7
	msg[0].flags = I2C_MSG_WRITE;
    6f8a:	f88d 1010 	strb.w	r1, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    6f8e:	f88d 201c 	strb.w	r2, [sp, #28]
	return i2c_transfer(dev, msg, 2, addr);
    6f92:	a902      	add	r1, sp, #8
    6f94:	2202      	movs	r2, #2
    6f96:	f7ff ffbf 	bl	6f18 <i2c_transfer>
}
    6f9a:	b009      	add	sp, #36	; 0x24
    6f9c:	bd30      	pop	{r4, r5, pc}

00006f9e <lis2dh_i2c_write_reg>:
{
    6f9e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    6fa0:	4603      	mov	r3, r0
	return i2c_reg_write_byte(data->bus,
    6fa2:	6900      	ldr	r0, [r0, #16]
    6fa4:	685b      	ldr	r3, [r3, #4]
    6fa6:	6800      	ldr	r0, [r0, #0]
	uint8_t tx_buf[2] = {reg_addr, value};
    6fa8:	f88d 2001 	strb.w	r2, [sp, #1]
	msg.len = num_bytes;
    6fac:	2202      	movs	r2, #2
    6fae:	891b      	ldrh	r3, [r3, #8]
	uint8_t tx_buf[2] = {reg_addr, value};
    6fb0:	f88d 1000 	strb.w	r1, [sp]
	msg.len = num_bytes;
    6fb4:	9202      	str	r2, [sp, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    6fb6:	f88d 200c 	strb.w	r2, [sp, #12]
	return i2c_transfer(dev, &msg, 1, addr);
    6fba:	a901      	add	r1, sp, #4
    6fbc:	2201      	movs	r2, #1
	msg.buf = (uint8_t *)buf;
    6fbe:	f8cd d004 	str.w	sp, [sp, #4]
	return i2c_transfer(dev, &msg, 1, addr);
    6fc2:	f7ff ffa9 	bl	6f18 <i2c_transfer>
}
    6fc6:	b005      	add	sp, #20
    6fc8:	f85d fb04 	ldr.w	pc, [sp], #4

00006fcc <lis2dh_i2c_read_reg>:
{
    6fcc:	b510      	push	{r4, lr}
    6fce:	4603      	mov	r3, r0
    6fd0:	b088      	sub	sp, #32
	return i2c_reg_read_byte(data->bus,
    6fd2:	6900      	ldr	r0, [r0, #16]
    6fd4:	685b      	ldr	r3, [r3, #4]
    6fd6:	6800      	ldr	r0, [r0, #0]
    6fd8:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
    6fdc:	f10d 0107 	add.w	r1, sp, #7
    6fe0:	9102      	str	r1, [sp, #8]
	msg[0].len = num_write;
    6fe2:	2101      	movs	r1, #1
    6fe4:	891b      	ldrh	r3, [r3, #8]
    6fe6:	9103      	str	r1, [sp, #12]
	msg[1].len = num_read;
    6fe8:	e9cd 2105 	strd	r2, r1, [sp, #20]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    6fec:	2207      	movs	r2, #7
    6fee:	f88d 201c 	strb.w	r2, [sp, #28]
	msg[0].flags = I2C_MSG_WRITE;
    6ff2:	2400      	movs	r4, #0
	return i2c_transfer(dev, msg, 2, addr);
    6ff4:	2202      	movs	r2, #2
    6ff6:	a902      	add	r1, sp, #8
	msg[0].flags = I2C_MSG_WRITE;
    6ff8:	f88d 4010 	strb.w	r4, [sp, #16]
	return i2c_transfer(dev, msg, 2, addr);
    6ffc:	f7ff ff8c 	bl	6f18 <i2c_transfer>
}
    7000:	b008      	add	sp, #32
    7002:	bd10      	pop	{r4, pc}

00007004 <lis2dh_i2c_update_reg>:
{
    7004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7008:	4698      	mov	r8, r3
	return i2c_reg_update_byte(data->bus,
    700a:	6903      	ldr	r3, [r0, #16]
    700c:	f8d3 9000 	ldr.w	r9, [r3]
				   cfg->bus_cfg.i2c_slv_addr,
    7010:	6843      	ldr	r3, [r0, #4]
{
    7012:	b088      	sub	sp, #32
    7014:	f893 a008 	ldrb.w	sl, [r3, #8]
    7018:	f88d 1004 	strb.w	r1, [sp, #4]
	msg[0].flags = I2C_MSG_WRITE;
    701c:	2300      	movs	r3, #0
	msg[0].len = num_write;
    701e:	2701      	movs	r7, #1
	msg[0].flags = I2C_MSG_WRITE;
    7020:	f88d 3010 	strb.w	r3, [sp, #16]
	msg[1].buf = (uint8_t *)read_buf;
    7024:	f10d 0303 	add.w	r3, sp, #3
	msg[1].len = num_read;
    7028:	e9cd 3705 	strd	r3, r7, [sp, #20]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    702c:	2307      	movs	r3, #7
    702e:	460e      	mov	r6, r1
    7030:	4614      	mov	r4, r2
	msg[0].buf = (uint8_t *)write_buf;
    7032:	ad01      	add	r5, sp, #4
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    7034:	f88d 301c 	strb.w	r3, [sp, #28]
	return i2c_transfer(dev, msg, 2, addr);
    7038:	2202      	movs	r2, #2
    703a:	4653      	mov	r3, sl
    703c:	a902      	add	r1, sp, #8
    703e:	4648      	mov	r0, r9
	msg[0].buf = (uint8_t *)write_buf;
    7040:	9502      	str	r5, [sp, #8]
	msg[0].len = num_write;
    7042:	9703      	str	r7, [sp, #12]
	return i2c_transfer(dev, msg, 2, addr);
    7044:	f7ff ff68 	bl	6f18 <i2c_transfer>
{
	uint8_t old_value, new_value;
	int rc;

	rc = i2c_reg_read_byte(dev, dev_addr, reg_addr, &old_value);
	if (rc != 0) {
    7048:	b9b8      	cbnz	r0, 707a <lis2dh_i2c_update_reg+0x76>
		return rc;
	}

	new_value = (old_value & ~mask) | (value & mask);
    704a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    704e:	ea23 0104 	bic.w	r1, r3, r4
    7052:	ea04 0408 	and.w	r4, r4, r8
    7056:	430c      	orrs	r4, r1
	if (new_value == old_value) {
    7058:	42a3      	cmp	r3, r4
    705a:	d00e      	beq.n	707a <lis2dh_i2c_update_reg+0x76>
	msg.len = num_bytes;
    705c:	2302      	movs	r3, #2
    705e:	9303      	str	r3, [sp, #12]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    7060:	f88d 3010 	strb.w	r3, [sp, #16]
	return i2c_transfer(dev, &msg, 1, addr);
    7064:	463a      	mov	r2, r7
    7066:	4653      	mov	r3, sl
    7068:	a902      	add	r1, sp, #8
    706a:	4648      	mov	r0, r9
	uint8_t tx_buf[2] = {reg_addr, value};
    706c:	f88d 6004 	strb.w	r6, [sp, #4]
    7070:	f88d 4005 	strb.w	r4, [sp, #5]
	msg.buf = (uint8_t *)buf;
    7074:	9502      	str	r5, [sp, #8]
	return i2c_transfer(dev, &msg, 1, addr);
    7076:	f7ff ff4f 	bl	6f18 <i2c_transfer>
}
    707a:	b008      	add	sp, #32
    707c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00007080 <z_impl_i2c_transfer>:
{
    7080:	b410      	push	{r4}
	int res =  api->transfer(dev, msgs, num_msgs, addr);
    7082:	6884      	ldr	r4, [r0, #8]
    7084:	68a4      	ldr	r4, [r4, #8]
    7086:	46a4      	mov	ip, r4
}
    7088:	bc10      	pop	{r4}
	int res =  api->transfer(dev, msgs, num_msgs, addr);
    708a:	4760      	bx	ip

0000708c <lps22hb_sample_fetch>:
{
    708c:	b530      	push	{r4, r5, lr}
    708e:	4603      	mov	r3, r0
    7090:	b08b      	sub	sp, #44	; 0x2c
	struct lps22hb_data *data = dev->data;
    7092:	6905      	ldr	r5, [r0, #16]
	if (i2c_burst_read(data->i2c_master, config->i2c_slave_addr,
    7094:	685b      	ldr	r3, [r3, #4]
    7096:	6828      	ldr	r0, [r5, #0]
    7098:	889b      	ldrh	r3, [r3, #4]
static inline int i2c_burst_read(const struct device *dev,
    709a:	2228      	movs	r2, #40	; 0x28
    709c:	f88d 2007 	strb.w	r2, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
    70a0:	f10d 0207 	add.w	r2, sp, #7
    70a4:	9204      	str	r2, [sp, #16]
	msg[0].len = num_write;
    70a6:	2201      	movs	r2, #1
    70a8:	9205      	str	r2, [sp, #20]
	msg[1].buf = (uint8_t *)read_buf;
    70aa:	aa02      	add	r2, sp, #8
    70ac:	9207      	str	r2, [sp, #28]
	msg[1].len = num_read;
    70ae:	2205      	movs	r2, #5
	msg[0].flags = I2C_MSG_WRITE;
    70b0:	2400      	movs	r4, #0
	msg[1].len = num_read;
    70b2:	9208      	str	r2, [sp, #32]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    70b4:	2207      	movs	r2, #7
	msg[0].flags = I2C_MSG_WRITE;
    70b6:	f88d 4018 	strb.w	r4, [sp, #24]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    70ba:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
	return z_impl_i2c_transfer(dev, msgs, num_msgs, addr);
    70be:	2202      	movs	r2, #2
    70c0:	a904      	add	r1, sp, #16
    70c2:	f7ff ffdd 	bl	7080 <z_impl_i2c_transfer>
    70c6:	42a0      	cmp	r0, r4
    70c8:	db10      	blt.n	70ec <lps22hb_sample_fetch+0x60>
				     ((uint32_t)(out[2]) << 16));
    70ca:	f89d 300a 	ldrb.w	r3, [sp, #10]
				     ((uint32_t)(out[1]) << 8) |
    70ce:	f89d 2009 	ldrb.w	r2, [sp, #9]
				     ((uint32_t)(out[2]) << 16));
    70d2:	041b      	lsls	r3, r3, #16
				     ((uint32_t)(out[1]) << 8) |
    70d4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	data->sample_press = (int32_t)((uint32_t)(out[0]) |
    70d8:	f89d 2008 	ldrb.w	r2, [sp, #8]
				     ((uint32_t)(out[1]) << 8) |
    70dc:	4313      	orrs	r3, r2
	data->sample_press = (int32_t)((uint32_t)(out[0]) |
    70de:	606b      	str	r3, [r5, #4]
	data->sample_temp = (int16_t)((uint16_t)(out[3]) |
    70e0:	f8bd 300b 	ldrh.w	r3, [sp, #11]
    70e4:	812b      	strh	r3, [r5, #8]
	return 0;
    70e6:	4620      	mov	r0, r4
}
    70e8:	b00b      	add	sp, #44	; 0x2c
    70ea:	bd30      	pop	{r4, r5, pc}
		return -EIO;
    70ec:	f06f 0004 	mvn.w	r0, #4
    70f0:	e7fa      	b.n	70e8 <lps22hb_sample_fetch+0x5c>

000070f2 <i2c_reg_update_byte.constprop.0>:
static inline int i2c_reg_update_byte(const struct device *dev,
    70f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    70f6:	b088      	sub	sp, #32
    70f8:	4698      	mov	r8, r3
	msg[0].flags = I2C_MSG_WRITE;
    70fa:	2300      	movs	r3, #0
	msg[0].len = num_write;
    70fc:	2701      	movs	r7, #1
	msg[0].flags = I2C_MSG_WRITE;
    70fe:	f88d 3010 	strb.w	r3, [sp, #16]
	msg[1].buf = (uint8_t *)read_buf;
    7102:	f10d 0303 	add.w	r3, sp, #3
	msg[1].len = num_read;
    7106:	e9cd 3705 	strd	r3, r7, [sp, #20]
    710a:	f04f 0910 	mov.w	r9, #16
	msg[0].buf = (uint8_t *)write_buf;
    710e:	ad01      	add	r5, sp, #4
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    7110:	2307      	movs	r3, #7
static inline int i2c_reg_update_byte(const struct device *dev,
    7112:	4606      	mov	r6, r0
    7114:	4614      	mov	r4, r2
	rc = i2c_reg_read_byte(dev, dev_addr, reg_addr, &old_value);
    7116:	468a      	mov	sl, r1
    7118:	f88d 9004 	strb.w	r9, [sp, #4]
	msg[0].buf = (uint8_t *)write_buf;
    711c:	9502      	str	r5, [sp, #8]
	msg[0].len = num_write;
    711e:	9703      	str	r7, [sp, #12]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    7120:	f88d 301c 	strb.w	r3, [sp, #28]
    7124:	2202      	movs	r2, #2
    7126:	460b      	mov	r3, r1
    7128:	a902      	add	r1, sp, #8
    712a:	f7ff ffa9 	bl	7080 <z_impl_i2c_transfer>
	if (rc != 0) {
    712e:	b9b8      	cbnz	r0, 7160 <i2c_reg_update_byte.constprop.0+0x6e>
	new_value = (old_value & ~mask) | (value & mask);
    7130:	f89d 3003 	ldrb.w	r3, [sp, #3]
    7134:	ea23 0104 	bic.w	r1, r3, r4
    7138:	ea04 0408 	and.w	r4, r4, r8
    713c:	430c      	orrs	r4, r1
	if (new_value == old_value) {
    713e:	42a3      	cmp	r3, r4
    7140:	d00e      	beq.n	7160 <i2c_reg_update_byte.constprop.0+0x6e>
	msg.len = num_bytes;
    7142:	2302      	movs	r3, #2
	uint8_t tx_buf[2] = {reg_addr, value};
    7144:	f88d 9004 	strb.w	r9, [sp, #4]
    7148:	f88d 4005 	strb.w	r4, [sp, #5]
	msg.buf = (uint8_t *)buf;
    714c:	9502      	str	r5, [sp, #8]
	msg.len = num_bytes;
    714e:	9303      	str	r3, [sp, #12]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    7150:	f88d 3010 	strb.w	r3, [sp, #16]
    7154:	4653      	mov	r3, sl
    7156:	463a      	mov	r2, r7
    7158:	a902      	add	r1, sp, #8
    715a:	4630      	mov	r0, r6
    715c:	f7ff ff90 	bl	7080 <z_impl_i2c_transfer>
		return 0;
	}

	return i2c_reg_write_byte(dev, dev_addr, reg_addr, new_value);
}
    7160:	b008      	add	sp, #32
    7162:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00007166 <lps22hb_init>:
err_poweroff:
	return -EIO;
}

static int lps22hb_init(const struct device *dev)
{
    7166:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct lps22hb_config * const config = dev->config;
	struct lps22hb_data *data = dev->data;

	data->i2c_master = device_get_binding(config->i2c_master_dev_name);
    7168:	6843      	ldr	r3, [r0, #4]
	struct lps22hb_data *data = dev->data;
    716a:	6905      	ldr	r5, [r0, #16]
{
    716c:	4604      	mov	r4, r0
    716e:	b089      	sub	sp, #36	; 0x24
	data->i2c_master = device_get_binding(config->i2c_master_dev_name);
    7170:	6818      	ldr	r0, [r3, #0]
    7172:	f7fd ff6f 	bl	5054 <z_impl_device_get_binding>
    7176:	6028      	str	r0, [r5, #0]

	if (!data->i2c_master) {
    7178:	2800      	cmp	r0, #0
    717a:	d037      	beq.n	71ec <lps22hb_init+0x86>
	struct lps22hb_data *data = dev->data;
    717c:	6926      	ldr	r6, [r4, #16]
	const struct lps22hb_config *config = dev->config;
    717e:	6867      	ldr	r7, [r4, #4]
	if (i2c_reg_read_byte(data->i2c_master, config->i2c_slave_addr,
    7180:	6830      	ldr	r0, [r6, #0]
    7182:	88bb      	ldrh	r3, [r7, #4]
    7184:	220f      	movs	r2, #15
    7186:	f88d 2007 	strb.w	r2, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
    718a:	f10d 0207 	add.w	r2, sp, #7
    718e:	9202      	str	r2, [sp, #8]
	msg[1].buf = (uint8_t *)read_buf;
    7190:	f10d 0106 	add.w	r1, sp, #6
	msg[0].len = num_write;
    7194:	2201      	movs	r2, #1
	msg[1].len = num_read;
    7196:	e9cd 1205 	strd	r1, r2, [sp, #20]
	msg[0].len = num_write;
    719a:	9203      	str	r2, [sp, #12]
	msg[0].flags = I2C_MSG_WRITE;
    719c:	2500      	movs	r5, #0
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    719e:	2207      	movs	r2, #7
	msg[0].flags = I2C_MSG_WRITE;
    71a0:	f88d 5010 	strb.w	r5, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    71a4:	f88d 201c 	strb.w	r2, [sp, #28]
    71a8:	2202      	movs	r2, #2
    71aa:	a902      	add	r1, sp, #8
    71ac:	f7ff ff68 	bl	7080 <z_impl_i2c_transfer>
    71b0:	42a8      	cmp	r0, r5
    71b2:	da03      	bge.n	71bc <lps22hb_init+0x56>
		return -EINVAL;
	}

	if (lps22hb_init_chip(dev) < 0) {
		LOG_DBG("Failed to initialize chip");
		return -EIO;
    71b4:	f06f 0004 	mvn.w	r0, #4
	}

	return 0;
}
    71b8:	b009      	add	sp, #36	; 0x24
    71ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (chip_id != LPS22HB_VAL_WHO_AM_I) {
    71bc:	f89d 3006 	ldrb.w	r3, [sp, #6]
    71c0:	2bb1      	cmp	r3, #177	; 0xb1
    71c2:	d1f7      	bne.n	71b4 <lps22hb_init+0x4e>
	return i2c_reg_update_byte(data->i2c_master, config->i2c_slave_addr,
    71c4:	6861      	ldr	r1, [r4, #4]
    71c6:	6920      	ldr	r0, [r4, #16]
    71c8:	7909      	ldrb	r1, [r1, #4]
    71ca:	6800      	ldr	r0, [r0, #0]
    71cc:	2330      	movs	r3, #48	; 0x30
    71ce:	2270      	movs	r2, #112	; 0x70
    71d0:	f7ff ff8f 	bl	70f2 <i2c_reg_update_byte.constprop.0>
	if (lps22hb_set_odr_raw(dev, LPS22HB_DEFAULT_SAMPLING_RATE) < 0) {
    71d4:	2800      	cmp	r0, #0
    71d6:	dbed      	blt.n	71b4 <lps22hb_init+0x4e>
	if (i2c_reg_update_byte(data->i2c_master, config->i2c_slave_addr,
    71d8:	2302      	movs	r3, #2
    71da:	7939      	ldrb	r1, [r7, #4]
    71dc:	6830      	ldr	r0, [r6, #0]
    71de:	461a      	mov	r2, r3
    71e0:	f7ff ff87 	bl	70f2 <i2c_reg_update_byte.constprop.0>
    71e4:	2800      	cmp	r0, #0
    71e6:	dbe5      	blt.n	71b4 <lps22hb_init+0x4e>
	return 0;
    71e8:	4628      	mov	r0, r5
    71ea:	e7e5      	b.n	71b8 <lps22hb_init+0x52>
		return -EINVAL;
    71ec:	f06f 0015 	mvn.w	r0, #21
    71f0:	e7e2      	b.n	71b8 <lps22hb_init+0x52>

000071f2 <stmemsc_i2c_read>:

#include "stmemsc.h"

int stmemsc_i2c_read(const struct i2c_dt_spec *stmemsc,
			     uint8_t reg_addr, uint8_t *value, uint8_t len)
{
    71f2:	b530      	push	{r4, r5, lr}
    71f4:	b089      	sub	sp, #36	; 0x24
    71f6:	4604      	mov	r4, r0
    71f8:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
    71fc:	f10d 0107 	add.w	r1, sp, #7
    7200:	461d      	mov	r5, r3
    7202:	9102      	str	r1, [sp, #8]
	msg[0].len = num_write;
    7204:	2101      	movs	r1, #1
	return i2c_burst_read_dt(stmemsc, reg_addr, value, len);
    7206:	e9cd 2505 	strd	r2, r5, [sp, #20]
    720a:	9103      	str	r1, [sp, #12]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    720c:	2207      	movs	r2, #7
	msg[0].flags = I2C_MSG_WRITE;
    720e:	2100      	movs	r1, #0
	return i2c_burst_read(spec->bus, spec->addr,
    7210:	6800      	ldr	r0, [r0, #0]
    7212:	88a3      	ldrh	r3, [r4, #4]
	msg[0].flags = I2C_MSG_WRITE;
    7214:	f88d 1010 	strb.w	r1, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    7218:	f88d 201c 	strb.w	r2, [sp, #28]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
    721c:	6882      	ldr	r2, [r0, #8]
    721e:	a902      	add	r1, sp, #8
    7220:	6894      	ldr	r4, [r2, #8]
    7222:	2202      	movs	r2, #2
    7224:	47a0      	blx	r4
}
    7226:	b009      	add	sp, #36	; 0x24
    7228:	bd30      	pop	{r4, r5, pc}

0000722a <stmemsc_i2c_write>:

int stmemsc_i2c_write(const struct i2c_dt_spec *stmemsc,
			      uint8_t reg_addr, uint8_t *value, uint8_t len)
{
    722a:	b530      	push	{r4, r5, lr}
    722c:	b089      	sub	sp, #36	; 0x24
    722e:	4604      	mov	r4, r0
    7230:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].buf = &start_addr;
    7234:	f10d 0107 	add.w	r1, sp, #7
    7238:	461d      	mov	r5, r3
    723a:	9102      	str	r1, [sp, #8]
	msg[0].len = 1U;
    723c:	2101      	movs	r1, #1
	return i2c_burst_write_dt(stmemsc, reg_addr, value, len);
    723e:	e9cd 2505 	strd	r2, r5, [sp, #20]
    7242:	9103      	str	r1, [sp, #12]
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    7244:	2202      	movs	r2, #2
	msg[0].flags = I2C_MSG_WRITE;
    7246:	2100      	movs	r1, #0
	return i2c_burst_write(spec->bus, spec->addr,
    7248:	6800      	ldr	r0, [r0, #0]
    724a:	88a3      	ldrh	r3, [r4, #4]
	msg[0].flags = I2C_MSG_WRITE;
    724c:	f88d 1010 	strb.w	r1, [sp, #16]
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    7250:	f88d 201c 	strb.w	r2, [sp, #28]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
    7254:	6881      	ldr	r1, [r0, #8]
    7256:	688c      	ldr	r4, [r1, #8]
    7258:	a902      	add	r1, sp, #8
    725a:	47a0      	blx	r4
}
    725c:	b009      	add	sp, #36	; 0x24
    725e:	bd30      	pop	{r4, r5, pc}

00007260 <gpio_pin_set_dt>:
 * @param spec GPIO specification from devicetree
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
    7260:	4603      	mov	r3, r0
    7262:	460a      	mov	r2, r1
	return gpio_pin_set(spec->port, spec->pin, value);
    7264:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    7266:	7919      	ldrb	r1, [r3, #4]
    7268:	2301      	movs	r3, #1
    726a:	fa03 f101 	lsl.w	r1, r3, r1
    726e:	6903      	ldr	r3, [r0, #16]
    7270:	681b      	ldr	r3, [r3, #0]
    7272:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
    7274:	bf18      	it	ne
    7276:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
    727a:	b112      	cbz	r2, 7282 <gpio_pin_set_dt+0x22>
	return api->port_set_bits_raw(port, pins);
    727c:	6883      	ldr	r3, [r0, #8]
    727e:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    7280:	4718      	bx	r3
    7282:	6883      	ldr	r3, [r0, #8]
    7284:	691b      	ldr	r3, [r3, #16]
    7286:	e7fb      	b.n	7280 <gpio_pin_set_dt+0x20>

00007288 <disable_sync>:

	return onoff_sync_finalize(&data->srv, key, cli, rc, true);
}

static int disable_sync(const struct device *dev)
{
    7288:	b530      	push	{r4, r5, lr}
	struct driver_data_sync *data = dev->data;
	const struct driver_config *cfg = dev->config;
	k_spinlock_key_t key;
	int rc = onoff_sync_lock(&data->srv, &key);
    728a:	6904      	ldr	r4, [r0, #16]
	const struct driver_config *cfg = dev->config;
    728c:	6845      	ldr	r5, [r0, #4]
{
    728e:	b085      	sub	sp, #20
	int rc = onoff_sync_lock(&data->srv, &key);
    7290:	a903      	add	r1, sp, #12
    7292:	4620      	mov	r0, r4
    7294:	f7ff f8c4 	bl	6420 <onoff_sync_lock>

	if  ((cfg->options & OPTION_ALWAYS_ON) != 0) {
    7298:	7d29      	ldrb	r1, [r5, #20]
    729a:	f011 0101 	ands.w	r1, r1, #1
	int rc = onoff_sync_lock(&data->srv, &key);
    729e:	4603      	mov	r3, r0
	if  ((cfg->options & OPTION_ALWAYS_ON) != 0) {
    72a0:	d114      	bne.n	72cc <disable_sync+0x44>
		rc = 0;
	} else if (rc == 1) {
    72a2:	2801      	cmp	r0, #1
    72a4:	d10c      	bne.n	72c0 <disable_sync+0x38>
		rc = gpio_pin_set_dt(&cfg->enable, false);
    72a6:	f105 000c 	add.w	r0, r5, #12
    72aa:	f7ff ffd9 	bl	7260 <gpio_pin_set_dt>
    72ae:	4603      	mov	r3, r0
	} else if (rc == 0) {
		rc = -EINVAL;
	} /* else rc > 0, leave it on */

	return onoff_sync_finalize(&data->srv, key, NULL, rc, false);
    72b0:	2200      	movs	r2, #0
    72b2:	9903      	ldr	r1, [sp, #12]
    72b4:	9200      	str	r2, [sp, #0]
    72b6:	4620      	mov	r0, r4
    72b8:	f7ff f8bd 	bl	6436 <onoff_sync_finalize>
}
    72bc:	b005      	add	sp, #20
    72be:	bd30      	pop	{r4, r5, pc}
		rc = -EINVAL;
    72c0:	2800      	cmp	r0, #0
    72c2:	bf14      	ite	ne
    72c4:	4603      	movne	r3, r0
    72c6:	f06f 0315 	mvneq.w	r3, #21
    72ca:	e7f1      	b.n	72b0 <disable_sync+0x28>
		rc = 0;
    72cc:	2300      	movs	r3, #0
    72ce:	e7ef      	b.n	72b0 <disable_sync+0x28>

000072d0 <enable_sync>:
{
    72d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int rc = onoff_sync_lock(&data->srv, &key);
    72d2:	6905      	ldr	r5, [r0, #16]
	const struct driver_config *cfg = dev->config;
    72d4:	6846      	ldr	r6, [r0, #4]
{
    72d6:	460c      	mov	r4, r1
	int rc = onoff_sync_lock(&data->srv, &key);
    72d8:	4628      	mov	r0, r5
    72da:	a903      	add	r1, sp, #12
    72dc:	f7ff f8a0 	bl	6420 <onoff_sync_lock>
	if ((rc == 0)
    72e0:	4603      	mov	r3, r0
    72e2:	b940      	cbnz	r0, 72f6 <enable_sync+0x26>
	    && ((cfg->options & OPTION_ALWAYS_ON) == 0)) {
    72e4:	7d32      	ldrb	r2, [r6, #20]
    72e6:	07d2      	lsls	r2, r2, #31
    72e8:	d405      	bmi.n	72f6 <enable_sync+0x26>
		rc = gpio_pin_set_dt(&cfg->enable, true);
    72ea:	2101      	movs	r1, #1
    72ec:	f106 000c 	add.w	r0, r6, #12
    72f0:	f7ff ffb6 	bl	7260 <gpio_pin_set_dt>
    72f4:	4603      	mov	r3, r0
	return onoff_sync_finalize(&data->srv, key, cli, rc, true);
    72f6:	2201      	movs	r2, #1
    72f8:	9200      	str	r2, [sp, #0]
    72fa:	9903      	ldr	r1, [sp, #12]
    72fc:	4622      	mov	r2, r4
    72fe:	4628      	mov	r0, r5
    7300:	f7ff f899 	bl	6436 <onoff_sync_finalize>
}
    7304:	b004      	add	sp, #16
    7306:	bd70      	pop	{r4, r5, r6, pc}

00007308 <disable_onoff>:
	return onoff_release(&data->mgr);
    7308:	6900      	ldr	r0, [r0, #16]
    730a:	3004      	adds	r0, #4
    730c:	f7ff b863 	b.w	63d6 <onoff_release>

00007310 <enable_onoff>:
	return onoff_request(&data->mgr, cli);
    7310:	6900      	ldr	r0, [r0, #16]
    7312:	3004      	adds	r0, #4
    7314:	f7ff b816 	b.w	6344 <onoff_request>

00007318 <common_init.isra.0>:
static int common_init(const struct device *dev)
    7318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    731a:	4605      	mov	r5, r0
	if (!device_is_ready(cfg->enable.port)) {
    731c:	68c0      	ldr	r0, [r0, #12]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    731e:	f000 f9cc 	bl	76ba <z_device_is_ready>
    7322:	b340      	cbz	r0, 7376 <common_init.isra.0+0x5e>
	if (on) {
    7324:	7d2c      	ldrb	r4, [r5, #20]
				  spec->dt_flags | extra_flags);
    7326:	7c6b      	ldrb	r3, [r5, #17]
	return gpio_pin_configure(spec->port,
    7328:	68e8      	ldr	r0, [r5, #12]
    732a:	7c29      	ldrb	r1, [r5, #16]
    732c:	f014 0403 	ands.w	r4, r4, #3
		flags = GPIO_OUTPUT_ACTIVE;
    7330:	bf16      	itet	ne
    7332:	f44f 52d0 	movne.w	r2, #6656	; 0x1a00
		flags = GPIO_OUTPUT_INACTIVE;
    7336:	f44f 52b0 	moveq.w	r2, #5632	; 0x1600
		delay_us = cfg->startup_delay_us;
    733a:	686c      	ldrne	r4, [r5, #4]
    733c:	4313      	orrs	r3, r2
	struct gpio_driver_data *data =
    733e:	6907      	ldr	r7, [r0, #16]
	const struct gpio_driver_api *api =
    7340:	f8d0 c008 	ldr.w	ip, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    7344:	683d      	ldr	r5, [r7, #0]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    7346:	07da      	lsls	r2, r3, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    7348:	bf48      	it	mi
    734a:	f483 6340 	eormi.w	r3, r3, #3072	; 0xc00
		data->invert |= (gpio_port_pins_t)BIT(pin);
    734e:	2601      	movs	r6, #1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    7350:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
		data->invert |= (gpio_port_pins_t)BIT(pin);
    7354:	408e      	lsls	r6, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    7356:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    7358:	bf4c      	ite	mi
    735a:	4335      	orrmi	r5, r6
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    735c:	43b5      	bicpl	r5, r6
    735e:	603d      	str	r5, [r7, #0]
	return api->pin_configure(port, pin, flags);
    7360:	f8dc 3000 	ldr.w	r3, [ip]
    7364:	4798      	blx	r3
	if ((rc == 0) && (delay_us > 0)) {
    7366:	4605      	mov	r5, r0
    7368:	b918      	cbnz	r0, 7372 <common_init.isra.0+0x5a>
    736a:	b114      	cbz	r4, 7372 <common_init.isra.0+0x5a>
    736c:	4620      	mov	r0, r4
    736e:	f000 fb2f 	bl	79d0 <z_impl_k_busy_wait>
}
    7372:	4628      	mov	r0, r5
    7374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENODEV;
    7376:	f06f 0512 	mvn.w	r5, #18
    737a:	e7fa      	b.n	7372 <common_init.isra.0+0x5a>

0000737c <regulator_fixed_init_sync>:
};

static int regulator_fixed_init_sync(const struct device *dev)
{
	const struct driver_config *cfg = dev->config;
	int rc = common_init(dev);
    737c:	6840      	ldr	r0, [r0, #4]
    737e:	f7ff bfcb 	b.w	7318 <common_init.isra.0>

00007382 <onoff_worker>:
{
    7382:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (data->task == WORK_TASK_ENABLE) {
    7386:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
	const struct driver_config *cfg = data->dev->config;
    738a:	f850 3c20 	ldr.w	r3, [r0, #-32]
	onoff_notify_fn notify = data->notify;
    738e:	6b07      	ldr	r7, [r0, #48]	; 0x30
	const struct driver_config *cfg = data->dev->config;
    7390:	685d      	ldr	r5, [r3, #4]
	if (data->task == WORK_TASK_ENABLE) {
    7392:	2901      	cmp	r1, #1
{
    7394:	4604      	mov	r4, r0
	struct driver_data_onoff *data
    7396:	f1a0 0620 	sub.w	r6, r0, #32
	if (data->task == WORK_TASK_ENABLE) {
    739a:	d10f      	bne.n	73bc <onoff_worker+0x3a>
		rc = gpio_pin_set_dt(&cfg->enable, true);
    739c:	f105 000c 	add.w	r0, r5, #12
    73a0:	f7ff ff5e 	bl	7260 <gpio_pin_set_dt>
		delay_us = cfg->startup_delay_us;
    73a4:	686a      	ldr	r2, [r5, #4]
		rc = gpio_pin_set_dt(&cfg->enable, true);
    73a6:	4603      	mov	r3, r0
	data->notify = NULL;
    73a8:	2100      	movs	r1, #0
    73aa:	6321      	str	r1, [r4, #48]	; 0x30
	data->task = WORK_TASK_UNDEFINED;
    73ac:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
	finalize_transition(data, notify, delay_us, rc);
    73b0:	4630      	mov	r0, r6
    73b2:	4639      	mov	r1, r7
}
    73b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	finalize_transition(data, notify, delay_us, rc);
    73b8:	f7fc b894 	b.w	34e4 <finalize_transition>
	} else if (data->task == WORK_TASK_DISABLE) {
    73bc:	2902      	cmp	r1, #2
    73be:	d107      	bne.n	73d0 <onoff_worker+0x4e>
		rc = gpio_pin_set_dt(&cfg->enable, false);
    73c0:	2100      	movs	r1, #0
    73c2:	f105 000c 	add.w	r0, r5, #12
    73c6:	f7ff ff4b 	bl	7260 <gpio_pin_set_dt>
		delay_us = cfg->off_on_delay_us;
    73ca:	68aa      	ldr	r2, [r5, #8]
		rc = gpio_pin_set_dt(&cfg->enable, false);
    73cc:	4603      	mov	r3, r0
		delay_us = cfg->off_on_delay_us;
    73ce:	e7eb      	b.n	73a8 <onoff_worker+0x26>
	int rc = 0;
    73d0:	2300      	movs	r3, #0
	uint32_t delay_us = 0;
    73d2:	461a      	mov	r2, r3
    73d4:	e7e8      	b.n	73a8 <onoff_worker+0x26>

000073d6 <stop>:
{
    73d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct driver_config *cfg = data->dev->config;
    73da:	f850 3c04 	ldr.w	r3, [r0, #-4]
{
    73de:	4604      	mov	r4, r0
	struct driver_data_onoff *data =
    73e0:	1f06      	subs	r6, r0, #4
	const struct driver_config *cfg = data->dev->config;
    73e2:	6858      	ldr	r0, [r3, #4]
{
    73e4:	460d      	mov	r5, r1
	if ((cfg->options & OPTION_ALWAYS_ON) != 0) {
    73e6:	7d01      	ldrb	r1, [r0, #20]
    73e8:	f011 0101 	ands.w	r1, r1, #1
    73ec:	d113      	bne.n	7416 <stop+0x40>
	uint32_t delay_us = cfg->off_on_delay_us;
    73ee:	6887      	ldr	r7, [r0, #8]
	rc = gpio_pin_set_dt(&cfg->enable, false);
    73f0:	300c      	adds	r0, #12
    73f2:	f7ff ff35 	bl	7260 <gpio_pin_set_dt>
	if (rc == -EWOULDBLOCK) {
    73f6:	f110 0f0b 	cmn.w	r0, #11
	rc = gpio_pin_set_dt(&cfg->enable, false);
    73fa:	4603      	mov	r3, r0
	if (rc == -EWOULDBLOCK) {
    73fc:	d10d      	bne.n	741a <stop+0x44>
		data->task = WORK_TASK_DISABLE;
    73fe:	2302      	movs	r3, #2
    7400:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
		data->notify = notify;
    7404:	64e5      	str	r5, [r4, #76]	; 0x4c
		k_work_schedule(&data->dwork, K_NO_WAIT);
    7406:	f104 001c 	add.w	r0, r4, #28
    740a:	2200      	movs	r2, #0
}
    740c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_work_schedule(&data->dwork, K_NO_WAIT);
    7410:	2300      	movs	r3, #0
    7412:	f7fe ba2d 	b.w	5870 <k_work_schedule>
	int rc = 0;
    7416:	2300      	movs	r3, #0
		delay_us = 0;
    7418:	461f      	mov	r7, r3
	finalize_transition(data, notify, delay_us, rc);
    741a:	463a      	mov	r2, r7
    741c:	4629      	mov	r1, r5
    741e:	4630      	mov	r0, r6
}
    7420:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	finalize_transition(data, notify, delay_us, rc);
    7424:	f7fc b85e 	b.w	34e4 <finalize_transition>

00007428 <start>:
{
    7428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct driver_config *cfg = data->dev->config;
    742c:	f850 3c04 	ldr.w	r3, [r0, #-4]
{
    7430:	4604      	mov	r4, r0
	struct driver_data_onoff *data =
    7432:	1f07      	subs	r7, r0, #4
	const struct driver_config *cfg = data->dev->config;
    7434:	6858      	ldr	r0, [r3, #4]
	if ((cfg->options & OPTION_ALWAYS_ON) != 0) {
    7436:	7d03      	ldrb	r3, [r0, #20]
    7438:	07db      	lsls	r3, r3, #31
{
    743a:	460d      	mov	r5, r1
	if ((cfg->options & OPTION_ALWAYS_ON) != 0) {
    743c:	d414      	bmi.n	7468 <start+0x40>
	uint32_t delay_us = cfg->startup_delay_us;
    743e:	6846      	ldr	r6, [r0, #4]
	rc = gpio_pin_set_dt(&cfg->enable, true);
    7440:	2101      	movs	r1, #1
    7442:	300c      	adds	r0, #12
    7444:	f7ff ff0c 	bl	7260 <gpio_pin_set_dt>
	if (rc == -EWOULDBLOCK) {
    7448:	f110 0f0b 	cmn.w	r0, #11
	rc = gpio_pin_set_dt(&cfg->enable, true);
    744c:	4603      	mov	r3, r0
	if (rc == -EWOULDBLOCK) {
    744e:	d10d      	bne.n	746c <start+0x44>
		data->task = WORK_TASK_ENABLE;
    7450:	2301      	movs	r3, #1
    7452:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
		data->notify = notify;
    7456:	64e5      	str	r5, [r4, #76]	; 0x4c
		k_work_schedule(&data->dwork, K_NO_WAIT);
    7458:	f104 001c 	add.w	r0, r4, #28
    745c:	2200      	movs	r2, #0
}
    745e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_work_schedule(&data->dwork, K_NO_WAIT);
    7462:	2300      	movs	r3, #0
    7464:	f7fe ba04 	b.w	5870 <k_work_schedule>
	int rc = 0;
    7468:	2300      	movs	r3, #0
		delay_us = 0;
    746a:	461e      	mov	r6, r3
	finalize_transition(data, notify, delay_us, rc);
    746c:	4632      	mov	r2, r6
    746e:	4629      	mov	r1, r5
    7470:	4638      	mov	r0, r7
}
    7472:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	finalize_transition(data, notify, delay_us, rc);
    7476:	f7fc b835 	b.w	34e4 <finalize_transition>

0000747a <uarte_nrfx_config_get>:
	*cfg = data->uart_config;
    747a:	6902      	ldr	r2, [r0, #16]
{
    747c:	460b      	mov	r3, r1
	*cfg = data->uart_config;
    747e:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    7482:	e883 0003 	stmia.w	r3, {r0, r1}
}
    7486:	2000      	movs	r0, #0
    7488:	4770      	bx	lr

0000748a <uarte_nrfx_err_check>:
	return config->uarte_regs;
    748a:	6843      	ldr	r3, [r0, #4]
    748c:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    748e:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    7492:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    7496:	4770      	bx	lr

00007498 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    7498:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
    749a:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    749c:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    749e:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    74a2:	b148      	cbz	r0, 74b8 <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
    74a4:	7c52      	ldrb	r2, [r2, #17]
    74a6:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    74a8:	2000      	movs	r0, #0
    74aa:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    74ae:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    74b2:	2201      	movs	r2, #1
    74b4:	601a      	str	r2, [r3, #0]
	return 0;
    74b6:	4770      	bx	lr
		return -1;
    74b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    74bc:	4770      	bx	lr

000074be <is_tx_ready.isra.0>:
	return config->uarte_regs;
    74be:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    74c0:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    74c2:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    74c6:	b940      	cbnz	r0, 74da <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    74c8:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    74ca:	079b      	lsls	r3, r3, #30
    74cc:	d406      	bmi.n	74dc <is_tx_ready.isra.0+0x1e>
    74ce:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    74d2:	3800      	subs	r0, #0
    74d4:	bf18      	it	ne
    74d6:	2001      	movne	r0, #1
    74d8:	4770      	bx	lr
    74da:	2001      	movs	r0, #1
}
    74dc:	4770      	bx	lr

000074de <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
    74de:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    74e0:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    74e2:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    74e6:	05c9      	lsls	r1, r1, #23
    74e8:	d518      	bpl.n	751c <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    74ea:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    74ee:	b1a9      	cbz	r1, 751c <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    74f0:	f04f 0020 	mov.w	r0, #32
    74f4:	f3ef 8111 	mrs	r1, BASEPRI
    74f8:	f380 8812 	msr	BASEPRI_MAX, r0
    74fc:	f3bf 8f6f 	isb	sy
    7500:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    7504:	b130      	cbz	r0, 7514 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7506:	2000      	movs	r0, #0
    7508:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    750c:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7510:	2001      	movs	r0, #1
    7512:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
    7514:	f381 8811 	msr	BASEPRI, r1
    7518:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    751c:	6852      	ldr	r2, [r2, #4]
    751e:	06d2      	lsls	r2, r2, #27
    7520:	d515      	bpl.n	754e <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
    7522:	f04f 0120 	mov.w	r1, #32
    7526:	f3ef 8211 	mrs	r2, BASEPRI
    752a:	f381 8812 	msr	BASEPRI_MAX, r1
    752e:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7532:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    7536:	b111      	cbz	r1, 753e <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    7538:	2100      	movs	r1, #0
    753a:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    753e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    7542:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    7546:	f382 8811 	msr	BASEPRI, r2
    754a:	f3bf 8f6f 	isb	sy
}
    754e:	4770      	bx	lr

00007550 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    7550:	4770      	bx	lr

00007552 <nrf52_errata_108>:
            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    7552:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    7556:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
    755a:	1c42      	adds	r2, r0, #1
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    755c:	bf04      	itt	eq
    755e:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
    7562:	f893 0fe0 	ldrbeq.w	r0, [r3, #4064]	; 0xfe0
}
    7566:	1f83      	subs	r3, r0, #6
    7568:	4258      	negs	r0, r3
    756a:	4158      	adcs	r0, r3
    756c:	4770      	bx	lr

0000756e <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    756e:	4700      	bx	r0

00007570 <nrfx_busy_wait>:
    7570:	f000 ba2e 	b.w	79d0 <z_impl_k_busy_wait>

00007574 <nrfx_clock_enable>:
{
    7574:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    7576:	2000      	movs	r0, #0
    7578:	f7fa fda6 	bl	20c8 <arch_irq_is_enabled>
    757c:	b918      	cbnz	r0, 7586 <nrfx_clock_enable+0x12>
}
    757e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    7582:	f7fa bd7d 	b.w	2080 <arch_irq_enable>
    7586:	bd08      	pop	{r3, pc}

00007588 <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
    7588:	f000 001f 	and.w	r0, r0, #31
    758c:	0080      	lsls	r0, r0, #2
    758e:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
    7592:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
    cnf &= ~to_update;
    7596:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    759a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    759e:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
    75a2:	4770      	bx	lr

000075a4 <xfer_completeness_check>:
    switch (p_cb->xfer_desc.type)
    75a4:	7b0a      	ldrb	r2, [r1, #12]
{
    75a6:	4603      	mov	r3, r0
    switch (p_cb->xfer_desc.type)
    75a8:	2a03      	cmp	r2, #3
    75aa:	d829      	bhi.n	7600 <xfer_completeness_check+0x5c>
    75ac:	e8df f002 	tbb	[pc, r2]
    75b0:	02192521 	.word	0x02192521
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
    75b4:	688a      	ldr	r2, [r1, #8]
    75b6:	0350      	lsls	r0, r2, #13
    75b8:	d504      	bpl.n	75c4 <xfer_completeness_check+0x20>
    return p_reg->TXD.AMOUNT;
    75ba:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
    75be:	6908      	ldr	r0, [r1, #16]
    75c0:	4290      	cmp	r0, r2
    75c2:	d107      	bne.n	75d4 <xfer_completeness_check+0x30>
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
    75c4:	688a      	ldr	r2, [r1, #8]
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)) ||
    75c6:	0352      	lsls	r2, r2, #13
    75c8:	d41a      	bmi.n	7600 <xfer_completeness_check+0x5c>
    75ca:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
    75ce:	6949      	ldr	r1, [r1, #20]
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
    75d0:	4291      	cmp	r1, r2
    75d2:	d015      	beq.n	7600 <xfer_completeness_check+0x5c>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
    75d4:	2000      	movs	r0, #0
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
    75d6:	2206      	movs	r2, #6
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
    75d8:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
    75dc:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    75e0:	4770      	bx	lr
    return p_reg->TXD.AMOUNT;
    75e2:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
    75e6:	6908      	ldr	r0, [r1, #16]
    75e8:	4290      	cmp	r0, r2
    75ea:	d1f3      	bne.n	75d4 <xfer_completeness_check+0x30>
    return p_reg->RXD.AMOUNT;
    75ec:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
    75f0:	e7ed      	b.n	75ce <xfer_completeness_check+0x2a>
    return p_reg->TXD.AMOUNT;
    75f2:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
    75f6:	6909      	ldr	r1, [r1, #16]
    75f8:	e7ea      	b.n	75d0 <xfer_completeness_check+0x2c>
    return p_reg->RXD.AMOUNT;
    75fa:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
    75fe:	e7fa      	b.n	75f6 <xfer_completeness_check+0x52>
    bool transfer_complete = true;
    7600:	2001      	movs	r0, #1
}
    7602:	4770      	bx	lr

00007604 <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
    7604:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
    7606:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
    7608:	4293      	cmp	r3, r2
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
    760a:	bf9c      	itt	ls
    760c:	6880      	ldrls	r0, [r0, #8]
    760e:	181b      	addls	r3, r3, r0
    r = RdOff - WrOff - 1u;
    7610:	3b01      	subs	r3, #1
    7612:	1a98      	subs	r0, r3, r2
}
    7614:	4770      	bx	lr

00007616 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    7616:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
    761a:	e9d0 9402 	ldrd	r9, r4, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    761e:	4605      	mov	r5, r0
  Rem = pRing->SizeOfBuffer - WrOff;
    7620:	eba9 0804 	sub.w	r8, r9, r4
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    7624:	6840      	ldr	r0, [r0, #4]
  if (Rem > NumBytes) {
    7626:	4590      	cmp	r8, r2
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    7628:	4420      	add	r0, r4
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    762a:	460f      	mov	r7, r1
    pRing->WrOff = WrOff + NumBytes;
    762c:	4414      	add	r4, r2
  if (Rem > NumBytes) {
    762e:	d906      	bls.n	763e <_WriteNoCheck+0x28>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    7630:	f7ff f845 	bl	66be <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    7634:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
    7638:	60ec      	str	r4, [r5, #12]
}
    763a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
    763e:	4642      	mov	r2, r8
    NumBytesAtOnce = NumBytes - Rem;
    7640:	eba4 0409 	sub.w	r4, r4, r9
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
    7644:	f7ff f83b 	bl	66be <memcpy>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    7648:	6868      	ldr	r0, [r5, #4]
    764a:	4622      	mov	r2, r4
    764c:	eb07 0108 	add.w	r1, r7, r8
    7650:	e7ee      	b.n	7630 <_WriteNoCheck+0x1a>

00007652 <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    7652:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  WrOff = pRing->WrOff;
    7656:	68c5      	ldr	r5, [r0, #12]
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    7658:	4606      	mov	r6, r0
    765a:	4689      	mov	r9, r1
    765c:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
    765e:	f04f 0800 	mov.w	r8, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
    7662:	6934      	ldr	r4, [r6, #16]
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    7664:	68b3      	ldr	r3, [r6, #8]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    7666:	6870      	ldr	r0, [r6, #4]
    if (RdOff > WrOff) {
    7668:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    766a:	bf28      	it	cs
    766c:	18e4      	addcs	r4, r4, r3
    766e:	3c01      	subs	r4, #1
    7670:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
    7672:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    7674:	42bc      	cmp	r4, r7
    7676:	bf28      	it	cs
    7678:	463c      	movcs	r4, r7
    767a:	4294      	cmp	r4, r2
    767c:	bf28      	it	cs
    767e:	4614      	movcs	r4, r2
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
    7680:	4649      	mov	r1, r9
    7682:	4622      	mov	r2, r4
    7684:	4428      	add	r0, r5
    7686:	f7ff f81a 	bl	66be <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
    768a:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
    768c:	4425      	add	r5, r4
    NumBytesWritten += NumBytesToWrite;
    768e:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
    7690:	44a1      	add	r9, r4
    NumBytes        -= NumBytesToWrite;
    7692:	1b3f      	subs	r7, r7, r4
      WrOff = 0u;
    7694:	42ab      	cmp	r3, r5
    7696:	bf08      	it	eq
    7698:	2500      	moveq	r5, #0
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    769a:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
    769e:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
    76a0:	2f00      	cmp	r7, #0
    76a2:	d1de      	bne.n	7662 <_WriteBlocking+0x10>
}
    76a4:	4640      	mov	r0, r8
    76a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000076aa <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    76aa:	f7fd bc4d 	b.w	4f48 <_DoInit>

000076ae <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    76ae:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    76b0:	f7ff fffb 	bl	76aa <SEGGER_RTT_Init>

	return 0;
}
    76b4:	2000      	movs	r0, #0
    76b6:	bd08      	pop	{r3, pc}

000076b8 <z_device_state_init>:
}
    76b8:	4770      	bx	lr

000076ba <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    76ba:	b138      	cbz	r0, 76cc <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    76bc:	68c3      	ldr	r3, [r0, #12]
    76be:	8818      	ldrh	r0, [r3, #0]
    76c0:	f3c0 0008 	ubfx	r0, r0, #0, #9
    76c4:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    76c8:	4258      	negs	r0, r3
    76ca:	4158      	adcs	r0, r3
}
    76cc:	4770      	bx	lr

000076ce <arch_system_halt>:
	__asm__ volatile(
    76ce:	f04f 0220 	mov.w	r2, #32
    76d2:	f3ef 8311 	mrs	r3, BASEPRI
    76d6:	f382 8812 	msr	BASEPRI_MAX, r2
    76da:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
    76de:	e7fe      	b.n	76de <arch_system_halt+0x10>

000076e0 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
    76e0:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
    76e2:	f7ff fff4 	bl	76ce <arch_system_halt>

000076e6 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    76e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    76e8:	4605      	mov	r5, r0
    76ea:	460e      	mov	r6, r1
    76ec:	f04f 0320 	mov.w	r3, #32
    76f0:	f3ef 8711 	mrs	r7, BASEPRI
    76f4:	f383 8812 	msr	BASEPRI_MAX, r3
    76f8:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    76fc:	f7fe fbae 	bl	5e5c <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    7700:	4631      	mov	r1, r6
    7702:	4604      	mov	r4, r0
    7704:	4628      	mov	r0, r5
    7706:	f7ff ffeb 	bl	76e0 <k_sys_fatal_error_handler>
	__asm__ volatile(
    770a:	f387 8811 	msr	BASEPRI, r7
    770e:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    7712:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    7714:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    7718:	f7fa bf0c 	b.w	2534 <z_impl_k_thread_abort>

0000771c <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    771c:	f3ef 8005 	mrs	r0, IPSR
}
    7720:	3800      	subs	r0, #0
    7722:	bf18      	it	ne
    7724:	2001      	movne	r0, #1
    7726:	4770      	bx	lr

00007728 <z_impl_k_thread_name_set>:
}
    7728:	f06f 0057 	mvn.w	r0, #87	; 0x57
    772c:	4770      	bx	lr

0000772e <z_impl_k_thread_start>:
	z_sched_start(thread);
    772e:	f7fe b9e1 	b.w	5af4 <z_sched_start>

00007732 <z_pm_save_idle_exit>:
{
    7732:	b508      	push	{r3, lr}
	pm_system_resume();
    7734:	f7fa fb6a 	bl	1e0c <pm_system_resume>
}
    7738:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    773c:	f7ff bf08 	b.w	7550 <sys_clock_idle_exit>

00007740 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    7740:	f990 300e 	ldrsb.w	r3, [r0, #14]
    7744:	428b      	cmp	r3, r1
    7746:	d001      	beq.n	774c <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    7748:	f7fe ba44 	b.w	5bd4 <z_set_prio>
}
    774c:	2000      	movs	r0, #0
    774e:	4770      	bx	lr

00007750 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
    7750:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
    7752:	2301      	movs	r3, #1
    7754:	408b      	lsls	r3, r1
    7756:	ea22 0303 	bic.w	r3, r2, r3
    775a:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
    775c:	fa22 f001 	lsr.w	r0, r2, r1
}
    7760:	f000 0001 	and.w	r0, r0, #1
    7764:	4770      	bx	lr

00007766 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
    7766:	b120      	cbz	r0, 7772 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
    7768:	2200      	movs	r2, #0
    776a:	4611      	mov	r1, r2
    776c:	3088      	adds	r0, #136	; 0x88
    776e:	f000 b8ce 	b.w	790e <z_sched_wake>
}
    7772:	4770      	bx	lr

00007774 <work_timeout>:
{
    7774:	b573      	push	{r0, r1, r4, r5, r6, lr}
    7776:	4604      	mov	r4, r0
	__asm__ volatile(
    7778:	f04f 0320 	mov.w	r3, #32
    777c:	f3ef 8511 	mrs	r5, BASEPRI
    7780:	f383 8812 	msr	BASEPRI_MAX, r3
    7784:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
    7788:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
    778a:	f1a0 0610 	sub.w	r6, r0, #16
    778e:	2103      	movs	r1, #3
    7790:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
    7792:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
    7794:	f7ff ffdc 	bl	7750 <flag_test_and_clear>
    7798:	b128      	cbz	r0, 77a6 <work_timeout+0x32>
		queue = dw->queue;
    779a:	69a3      	ldr	r3, [r4, #24]
    779c:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
    779e:	a901      	add	r1, sp, #4
    77a0:	4630      	mov	r0, r6
    77a2:	f7fd ffb3 	bl	570c <submit_to_queue_locked>
	__asm__ volatile(
    77a6:	f385 8811 	msr	BASEPRI, r5
    77aa:	f3bf 8f6f 	isb	sy
}
    77ae:	b002      	add	sp, #8
    77b0:	bd70      	pop	{r4, r5, r6, pc}

000077b2 <k_work_init_delayable>:
{
    77b2:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
    77b4:	2230      	movs	r2, #48	; 0x30
{
    77b6:	4604      	mov	r4, r0
    77b8:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
    77ba:	2100      	movs	r1, #0
    77bc:	f7fe ff8a 	bl	66d4 <memset>
    77c0:	f44f 7380 	mov.w	r3, #256	; 0x100
    77c4:	6065      	str	r5, [r4, #4]
    77c6:	60e3      	str	r3, [r4, #12]
}
    77c8:	bd38      	pop	{r3, r4, r5, pc}

000077ca <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    77ca:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    77ce:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    77d0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    77d2:	2300      	movs	r3, #0
	node->prev = NULL;
    77d4:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    77d8:	4770      	bx	lr

000077da <unpend_thread_no_timeout>:
{
    77da:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    77dc:	f7ff fff5 	bl	77ca <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    77e0:	7b43      	ldrb	r3, [r0, #13]
    77e2:	f023 0302 	bic.w	r3, r3, #2
    77e6:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    77e8:	2300      	movs	r3, #0
    77ea:	6083      	str	r3, [r0, #8]
}
    77ec:	bd08      	pop	{r3, pc}

000077ee <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    77ee:	4603      	mov	r3, r0
    77f0:	b920      	cbnz	r0, 77fc <z_reschedule_irqlock+0xe>
    77f2:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    77f6:	b90a      	cbnz	r2, 77fc <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    77f8:	f7fa bcb4 	b.w	2164 <arch_swap>
    77fc:	f383 8811 	msr	BASEPRI, r3
    7800:	f3bf 8f6f 	isb	sy
}
    7804:	4770      	bx	lr

00007806 <z_reschedule_unlocked>:
	__asm__ volatile(
    7806:	f04f 0320 	mov.w	r3, #32
    780a:	f3ef 8011 	mrs	r0, BASEPRI
    780e:	f383 8812 	msr	BASEPRI_MAX, r3
    7812:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    7816:	f7ff bfea 	b.w	77ee <z_reschedule_irqlock>

0000781a <z_priq_dumb_best>:
{
    781a:	4603      	mov	r3, r0
	return list->head == list;
    781c:	6800      	ldr	r0, [r0, #0]
}
    781e:	4283      	cmp	r3, r0
    7820:	bf08      	it	eq
    7822:	2000      	moveq	r0, #0
    7824:	4770      	bx	lr

00007826 <z_ready_thread>:
{
    7826:	b510      	push	{r4, lr}
    7828:	f04f 0320 	mov.w	r3, #32
    782c:	f3ef 8411 	mrs	r4, BASEPRI
    7830:	f383 8812 	msr	BASEPRI_MAX, r3
    7834:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    7838:	f7fe f926 	bl	5a88 <ready_thread>
	__asm__ volatile(
    783c:	f384 8811 	msr	BASEPRI, r4
    7840:	f3bf 8f6f 	isb	sy
}
    7844:	bd10      	pop	{r4, pc}

00007846 <z_thread_timeout>:
{
    7846:	b510      	push	{r4, lr}
    7848:	4601      	mov	r1, r0
	__asm__ volatile(
    784a:	f04f 0320 	mov.w	r3, #32
    784e:	f3ef 8411 	mrs	r4, BASEPRI
    7852:	f383 8812 	msr	BASEPRI_MAX, r3
    7856:	f3bf 8f6f 	isb	sy
		if (!killed) {
    785a:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
    785e:	f013 0f28 	tst.w	r3, #40	; 0x28
    7862:	d10d      	bne.n	7880 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
    7864:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    7868:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
    786a:	b10b      	cbz	r3, 7870 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
    786c:	f7ff ffb5 	bl	77da <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    7870:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
    7874:	f023 0314 	bic.w	r3, r3, #20
    7878:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
    787c:	f7fe f904 	bl	5a88 <ready_thread>
	__asm__ volatile(
    7880:	f384 8811 	msr	BASEPRI, r4
    7884:	f3bf 8f6f 	isb	sy
}
    7888:	bd10      	pop	{r4, pc}

0000788a <add_to_waitq_locked>:
{
    788a:	b538      	push	{r3, r4, r5, lr}
    788c:	4604      	mov	r4, r0
    788e:	460d      	mov	r5, r1
	unready_thread(thread);
    7890:	f7fe f94e 	bl	5b30 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    7894:	7b63      	ldrb	r3, [r4, #13]
    7896:	f043 0302 	orr.w	r3, r3, #2
    789a:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    789c:	b195      	cbz	r5, 78c4 <add_to_waitq_locked+0x3a>
    789e:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    78a0:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    78a2:	429d      	cmp	r5, r3
    78a4:	d015      	beq.n	78d2 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    78a6:	b1a3      	cbz	r3, 78d2 <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
    78a8:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    78ac:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    78b0:	4291      	cmp	r1, r2
    78b2:	d008      	beq.n	78c6 <add_to_waitq_locked+0x3c>
		return b2 - b1;
    78b4:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    78b6:	2a00      	cmp	r2, #0
    78b8:	dd05      	ble.n	78c6 <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
    78ba:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    78bc:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    78c0:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    78c2:	605c      	str	r4, [r3, #4]
}
    78c4:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    78c6:	686a      	ldr	r2, [r5, #4]
    78c8:	4293      	cmp	r3, r2
    78ca:	d002      	beq.n	78d2 <add_to_waitq_locked+0x48>
    78cc:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    78ce:	2b00      	cmp	r3, #0
    78d0:	d1ec      	bne.n	78ac <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
    78d2:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    78d4:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    78d8:	601c      	str	r4, [r3, #0]
	list->tail = node;
    78da:	606c      	str	r4, [r5, #4]
}
    78dc:	e7f2      	b.n	78c4 <add_to_waitq_locked+0x3a>

000078de <z_unpend_first_thread>:
{
    78de:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    78e0:	f04f 0320 	mov.w	r3, #32
    78e4:	f3ef 8511 	mrs	r5, BASEPRI
    78e8:	f383 8812 	msr	BASEPRI_MAX, r3
    78ec:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    78f0:	f7ff ff93 	bl	781a <z_priq_dumb_best>
		if (thread != NULL) {
    78f4:	4604      	mov	r4, r0
    78f6:	b120      	cbz	r0, 7902 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
    78f8:	f7ff ff6f 	bl	77da <unpend_thread_no_timeout>
    78fc:	3018      	adds	r0, #24
    78fe:	f000 f823 	bl	7948 <z_abort_timeout>
	__asm__ volatile(
    7902:	f385 8811 	msr	BASEPRI, r5
    7906:	f3bf 8f6f 	isb	sy
}
    790a:	4620      	mov	r0, r4
    790c:	bd38      	pop	{r3, r4, r5, pc}

0000790e <z_sched_wake>:
{
    790e:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    7910:	f04f 0320 	mov.w	r3, #32
    7914:	f3ef 8511 	mrs	r5, BASEPRI
    7918:	f383 8812 	msr	BASEPRI_MAX, r3
    791c:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    7920:	f7ff ff7b 	bl	781a <z_priq_dumb_best>
		if (thread != NULL) {
    7924:	4604      	mov	r4, r0
    7926:	b150      	cbz	r0, 793e <z_sched_wake+0x30>
    7928:	6781      	str	r1, [r0, #120]	; 0x78
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    792a:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
    792c:	f7ff ff55 	bl	77da <unpend_thread_no_timeout>
    7930:	3018      	adds	r0, #24
    7932:	f000 f809 	bl	7948 <z_abort_timeout>
			ready_thread(thread);
    7936:	4620      	mov	r0, r4
    7938:	f7fe f8a6 	bl	5a88 <ready_thread>
			ret = true;
    793c:	2001      	movs	r0, #1
	__asm__ volatile(
    793e:	f385 8811 	msr	BASEPRI, r5
    7942:	f3bf 8f6f 	isb	sy
}
    7946:	bd38      	pop	{r3, r4, r5, pc}

00007948 <z_abort_timeout>:
{
    7948:	b510      	push	{r4, lr}
	__asm__ volatile(
    794a:	f04f 0220 	mov.w	r2, #32
    794e:	f3ef 8411 	mrs	r4, BASEPRI
    7952:	f382 8812 	msr	BASEPRI_MAX, r2
    7956:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    795a:	6803      	ldr	r3, [r0, #0]
    795c:	b13b      	cbz	r3, 796e <z_abort_timeout+0x26>
			remove_timeout(to);
    795e:	f7fe fb31 	bl	5fc4 <remove_timeout>
			ret = 0;
    7962:	2000      	movs	r0, #0
	__asm__ volatile(
    7964:	f384 8811 	msr	BASEPRI, r4
    7968:	f3bf 8f6f 	isb	sy
}
    796c:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    796e:	f06f 0015 	mvn.w	r0, #21
    7972:	e7f7      	b.n	7964 <z_abort_timeout+0x1c>

00007974 <z_get_next_timeout_expiry>:
{
    7974:	b510      	push	{r4, lr}
	__asm__ volatile(
    7976:	f04f 0320 	mov.w	r3, #32
    797a:	f3ef 8411 	mrs	r4, BASEPRI
    797e:	f383 8812 	msr	BASEPRI_MAX, r3
    7982:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    7986:	f7fe faf7 	bl	5f78 <next_timeout>
	__asm__ volatile(
    798a:	f384 8811 	msr	BASEPRI, r4
    798e:	f3bf 8f6f 	isb	sy
}
    7992:	bd10      	pop	{r4, pc}

00007994 <z_set_timeout_expiry>:
{
    7994:	b570      	push	{r4, r5, r6, lr}
    7996:	4604      	mov	r4, r0
    7998:	460d      	mov	r5, r1
	__asm__ volatile(
    799a:	f04f 0320 	mov.w	r3, #32
    799e:	f3ef 8611 	mrs	r6, BASEPRI
    79a2:	f383 8812 	msr	BASEPRI_MAX, r3
    79a6:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    79aa:	f7fe fae5 	bl	5f78 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    79ae:	2801      	cmp	r0, #1
    79b0:	dd05      	ble.n	79be <z_set_timeout_expiry+0x2a>
    79b2:	42a0      	cmp	r0, r4
    79b4:	db03      	blt.n	79be <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    79b6:	4629      	mov	r1, r5
    79b8:	4620      	mov	r0, r4
    79ba:	f7fc f9ab 	bl	3d14 <sys_clock_set_timeout>
	__asm__ volatile(
    79be:	f386 8811 	msr	BASEPRI, r6
    79c2:	f3bf 8f6f 	isb	sy
}
    79c6:	bd70      	pop	{r4, r5, r6, pc}

000079c8 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    79c8:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    79ca:	f7fe fbeb 	bl	61a4 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    79ce:	bd08      	pop	{r3, pc}

000079d0 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    79d0:	b108      	cbz	r0, 79d6 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    79d2:	f7fa bebf 	b.w	2754 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    79d6:	4770      	bx	lr

000079d8 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    79d8:	f7fc b9f4 	b.w	3dc4 <SystemInit>
